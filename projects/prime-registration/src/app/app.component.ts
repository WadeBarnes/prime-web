import * as version from '../../../../src/version.GENERATED';
import { Component, OnInit } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { Router, NavigationEnd, ActivatedRoute } from '@angular/router';
import { filter, map, mergeMap } from 'rxjs/operators';
import { ApiService } from '../../../../src/app/services/api-service.service';
import { RegCacheService } from './services/reg-cache.service';
import { CachePayLoad } from '../../../../src/app/models/cache-api.model';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent implements OnInit {

  title = 'Prime';

  constructor( private router: Router,
               private activatedRoute: ActivatedRoute,
               private titleService: Title,
               private apiService: ApiService,
               private regCache: RegCacheService ) {
  }

  ngOnInit() {

    // This line was AUTO-GENERATED by moh-common-schematics:version-js. Feel free to move this line and/or delete the comment.
    version.success ? console.log('%c' + version.message, 'color: #036; font-size: 20px;') : console.error(version.message);
    this.updateTitleOnRouteChange();

    this.loadCache();
  }

  /**
   * Listen to every route change, and update the page title based on the
   * 'title' property in the route's data.
   */
  private updateTitleOnRouteChange() {
    this.router.events.pipe(
      filter(event => event instanceof NavigationEnd),
      map(() => this.activatedRoute),
      map(route => {
        while (route.firstChild) {
          route = route.firstChild;
        }
        return route;
      }),
      filter(route => route.outlet === 'primary'),
      mergeMap(route => route.data)
    ).subscribe((data: { title?: string }) => {
      this.setTitle(data.title);
    });
  }

  /** Set the page title. Includes basic formatting and fallback */
  private setTitle(title?: string) {
    if ( title ) {
      this.titleService.setTitle(`Prime | ${title}`);
    } else {
      // Default title
      this.titleService.setTitle( this.title );
    }
  }


  private loadCache() {
    console.log( 'Load registration cache!' );

    // Load countries for address component
    this.apiService.getCache( 'countries' ).subscribe(
      (response) => {
        const payload = new CachePayLoad( response );
        if ( payload.success ) {
          this.regCache.countryList = payload.country;
        } else {
          console.log( 'Failed to retrieve list of countries.' );
        }
    });

    // Load provinces for address component
    this.apiService.getCache( 'province' ).subscribe(
      (response) => {
        const payload = new CachePayLoad( response );
        if ( payload.success ) {
          this.regCache.provinceList = payload.province;
        } else {
          console.log( 'Failed to retrieve list of province.' );
        }
    });
  }
}
