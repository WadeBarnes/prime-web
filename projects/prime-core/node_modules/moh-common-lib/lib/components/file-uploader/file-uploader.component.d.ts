import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ControlContainer } from '@angular/forms';
import { Observable } from 'rxjs';
import { CommonImage, CommonImageError, CommonImageProcessingError, CommonImageScaleFactors } from '../../../images/src/public_api';
import { Router } from '@angular/router';
import { Base } from '../../../models/src/base';
export interface FileUploaderMsg {
    required: string;
}
export declare class FileUploaderComponent extends Base implements OnInit, OnChanges, AfterContentInit {
    private zone;
    private cd;
    private router;
    private controlContainer;
    noIdImage: Boolean;
    private appConstants;
    dropZone: ElementRef;
    browseFileRef: ElementRef;
    imagePlaceholderRef: ElementRef;
    selectFileLabelRef: ElementRef;
    images: Array<CommonImage>;
    imagesChange: EventEmitter<Array<CommonImage>>;
    id: string;
    showError: boolean;
    required: boolean;
    instructionText: string;
    errorMessages: FileUploaderMsg;
    canvas: ElementRef;
    errorDocument: EventEmitter<CommonImage>;
    constructor(zone: NgZone, cd: ChangeDetectorRef, router: Router, controlContainer: ControlContainer);
    /**
     * This is created as a workaround to access the form control that binds to
     * the input[type='file']. We can't access it via the template name bindings
     * as that isn't working, so instead we access the parent form and then find
     * the input by name.
     */
    readonly fileControl: any;
    /**
     * Return true if file already exists in the list; false otherwise.
     */
    static checkImageExists(file: CommonImage, imageList: Array<CommonImage>): boolean;
    /**
     * A special method to force the rendering of this component.  This is a workaround
     * because for some unknown reason, AngularJS2 change detector does not detect the
     * change of the images Array.
     */
    forceRender(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    test(var1: any): void;
    ngAfterContentInit(): void;
    /**
     * Solve size in this equation: size * 0.8to-the-power-of30 < 1MB, size
     * will be the max image size this application can accept and scale down
     * to under 1MB. In this case: size < 807 MB
     *
     * 30 is the number of retries. the value for maxRetry passed to retryStrategy
     * function.
     *
     * If: size * 0.8to-the-power-of40 < 1MB, then size < 1262 MB.
     *
     * Note: 0.8 is the self.appConstants.images.reductionScaleFactor defined in global.js
     *
     *
     * @param file
     * @param scaleFactors
     */
    observableFromFiles(fileList: FileList, scaleFactors: CommonImageScaleFactors): any;
    private resizeImage;
    /**
     * Max retry scaling down for maxRetry times.
     */
    retryStrategy(maxRetry: number): (errors: Observable<CommonImageProcessingError>) => Observable<any>;
    private readImage;
    private readPDF;
    /**
     * Non reversible image filter to take an existing canvas and make it gray scale
     * @param canvas
     */
    makeGrayScale(canvas: HTMLCanvasElement): void;
    handleImageFile(mspImage: CommonImage): void;
    handleError(error: CommonImageError, mspImage: CommonImage, errorDescription?: string): void;
    /**
     * Reset input fields so that user can delete a file and
     * immediately upload that file again.
     */
    resetInputFields(): void;
    deleteImage(mspImage: CommonImage): void;
    /**
     * Log image attributes
     * @param mspImage
     */
    private logImageInfo;
    /**
     * Return true if the image size is within range
     * @param file
     */
    checkImageDimensions(file: CommonImage): boolean;
    isValid(): boolean;
}
