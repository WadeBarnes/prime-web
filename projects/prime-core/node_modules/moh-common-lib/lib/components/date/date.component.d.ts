import { OnInit, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { Base } from '../../../models/src/base';
import { SimpleDate } from '../../../models/src/simple-date.interface';
import { NgForm, NgModel } from '@angular/forms';
/**
 * Component NPM package dependencies:
 * a) moment
 */
export interface DateErrorMsg {
    required: string;
    dayOutOfRange?: string;
    yearDistantPast?: string;
    yearDistantFuture?: string;
    noPastDatesAllowed?: string;
    noFutureDatesAllowed?: string;
    invalidValue?: string;
}
export declare class DateComponent extends Base implements OnInit {
    private form;
    private cd;
    monthRef: NgModel;
    dayRef: NgModel;
    yearRef: NgModel;
    useCurrentDate: boolean;
    required: boolean;
    disabled: boolean;
    label: string;
    date: SimpleDate;
    /** Can be one of: "future", "past". "future" includes today, "past" does not. */
    restrictDate: 'future' | 'past' | 'any';
    errorMessages: DateErrorMsg;
    dateChange: EventEmitter<SimpleDate>;
    monthList: string[];
    constructor(form: NgForm, cd: ChangeDetectorRef);
    ngOnInit(): void;
    /** Set the month and notify caller of change */
    setMonth(value: string): void;
    /** Set the day and notify caller of change */
    setDay(value: string): void;
    /** Set the yera and notify caller of change */
    setYear(value: string): void;
    /**
     * Force the `day` input to run it's directives again. Important in cases
     * where user fills fields out of order, e.g. sets days to 31 then month to
     * Februrary.
     */
    private triggerDayValidation;
    /** Convert string to numeric value or null if not */
    private getNumericValue;
}
