/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, HostListener, forwardRef } from '@angular/core';
import { Base } from '../../../models/src/base';
import { ControlContainer, NgForm } from '@angular/forms';
import * as zxcvbn_ from 'zxcvbn';
// Awkward necessary workaround due to bug in build tools
// https://github.com/jvandemo/generator-angular2-library/issues/221#issuecomment-355945207
/** @type {?} */
const zxcvbn = zxcvbn_;
/**
 * Interface for passing in error messages
 * Example:
 *  errorMessages = {
 *       required: this.componentLabel + ' is required.',
 *       minLength: this.componentLabel + ' must be ' + this.minLen + ' characters.',
 *       criteria: this.componentLabel + ' does not meet password criteria.'
 *     }
 * @record
 */
export function PasswordErrorMsg() { }
if (false) {
    /** @type {?|undefined} */
    PasswordErrorMsg.prototype.required;
    /** @type {?|undefined} */
    PasswordErrorMsg.prototype.minLength;
    /** @type {?|undefined} */
    PasswordErrorMsg.prototype.criteria;
}
/**
 * PasswordComponent is a text input for a user's password. It includes:
 *
 * - A password strength bar
 * - Minimum length validations
 *
 * Note - if your application has requirements to check things like username is not
 * present in password, we recommend doing this in the (passwordChange) callback.
 *
 * \@example
 *       <common-password componentLabel="{{newPwdLabel}}"
 *                      [showPasswordStrength]="true"
 *                      [minLen]="pwdMinLen"
 *                      [pwdCriteria]="pwdValidChars"
 *                      [password]="data.password"
 *                      (passwordChange)="setNewPassword($event)"></common-password>
 *
 * @export
 */
export class PasswordComponent extends Base {
    constructor() {
        super();
        // Inputs for the component
        this.label = 'Password';
        this.isRequired = true;
        this.isDisabled = false;
        this.minLen = '8';
        this.maxLen = '32';
        this.showPasswordStrength = false;
        this.objectID = 'password_' + this.objectId;
        // Output from the component
        this.passwordChange = new EventEmitter();
        this.blurEvent = new EventEmitter();
        // Flag for the fa-eye to show or hide password
        this.hideValue = true;
        this.strengthPercentage = 0;
        // default messages
        this.requiredMsgSeg = ' is required.';
        this.minLenMsgSeg1 = ' must be at least ';
        this.minLenMsgSeg2 = ' characters in length.';
        this.criteriaMsg = ' contains invalid characters.';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // Set default messages
        this.errMsg = {
            required: this.label + this.requiredMsgSeg,
            minLength: this.label + this.minLenMsgSeg1 + this.minLen + this.minLenMsgSeg2,
            criteria: this.label + this.criteriaMsg
        };
        // Replace default message if provided
        if (this.errorMessages) {
            if (this.errorMessages.required) {
                this.errMsg.required = this.errorMessages.required;
            }
            if (this.errorMessages.minLength) {
                this.errMsg.minLength = this.errorMessages.minLength;
            }
            if (this.errorMessages.criteria) {
                this.errMsg.criteria = this.errorMessages.criteria;
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.password && this.password) {
            // Check strength of password
            this.pswdStrength = this.getPasswordStrength(this.password);
            this.strengthPercentage = ((this.pswdStrength + 1) / 5) * 100;
        }
    }
    /**
     * Passes the value entered back to the calling component
     * @param {?} password value the was entered by
     * @return {?}
     */
    setPassword(password) {
        this.passwordChange.emit(password);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onInputBlur($event) {
        console.log('onBlur: ', event);
        this.blurEvent.emit(event);
    }
    // Prevent user from pasting data into the text box
    /**
     * @param {?} event
     * @return {?}
     */
    onPaste(event) {
        return false;
    }
    /**
     * Get the strength of the password
     *    0 = too guessable: risky password. (guesses < 10^3)
     *    1 = very guessable: protection from throttled online attacks. (guesses < 10^6)
     *    2 = somewhat guessable: protection from unthrottled online attacks. (guesses < 10^8)
     *    3 = safely unguessable: moderate protection from offline slow-hash scenario. (guesses < 10^10)
     *    4 = very unguessable: strong protection from offline slow-hash scenario. (guesses >= 10^10)
     *
     *  https://github.com/dropbox/zxcvbn
     * @private
     * @param {?} password
     * @return {?}
     */
    getPasswordStrength(password) {
        // Password strength feedback
        /** @type {?} */
        const pswdFeedback = zxcvbn(password);
        return pswdFeedback.score;
    }
}
PasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'common-password',
                template: "<label class=\"control-label\" for=\"{{objectID}}\">{{label}}</label>\n<input #pswdRef=\"ngModel\"\n       type=\"{{hideValue? 'password': 'text'}}\"\n       class=\"form-control password-field\"\n       name=\"{{objectID}}\"\n       id=\"{{objectID}}\"\n       [ngModel]=\"password\"\n       (ngModelChange)=\"setPassword($event)\"\n       (blur)=\"onInputBlur($event)\"\n       [pattern]=\"pwdCriteria\"\n       [required]=\"isRequired\"\n       [minlength]=\"minLen\"\n       [maxlength]=\"maxLen\"\n       [disabled]=\"isDisabled\" />\n<span class=\"fa fa-fw {{hideValue? 'fa-eye' : 'fa-eye-slash'}} password-field-icon\"\n      (click)='hideValue = !hideValue'></span>\n<div *ngIf='password && showPasswordStrength'>\n<!-- The progress bar -->\n  <div class=\"progress password-strength-bar\" >\n    <div class=\"progress-bar {{pswdStrength >= 4? 'bg-success' : (pswdStrength >= 3? 'bg-warning' : 'bg-danger')}}\"\n        role=\"progressbar\"\n        [style.width]='strengthPercentage + \"%\"'\n        [attr.aria-valuenow]=\"strengthPercentage\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\">\n    </div>\n  </div>\n  <span class=\"password-progress-label {{pswdStrength >= 4? 'text-success' : (pswdStrength >= 3? 'text-warning' : 'text-danger')}}\"></span>\n</div>\n<!-- Error messages for component -->\n<div *ngIf=\"!pswdRef.disabled && (pswdRef.touched || pswdRef.dirty)\"\n    role=\"alert\"\n    class='error-container'\n    aria-live=\"assertive\">\n  <div class=\"text-danger\" *ngIf=\"pswdRef?.errors?.required\">\n    {{errMsg.required}}\n  </div>\n  <div class=\"text-danger\" *ngIf=\"pswdRef?.errors?.minlength\">\n      {{errMsg.minLength}}\n  </div>\n  <div class=\"text-danger\" *ngIf=\"pswdRef?.errors?.pattern && !pswdRef?.errors?.minlength\">\n      {{errMsg.criteria}}\n  </div>\n</div>\n\n",
                /* Re-use the same ngForm that it's parent is using. The component will show
                   * up in its parents `this.form`, and will auto-update `this.form.valid`
                   */
                viewProviders: [{ provide: ControlContainer, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NgForm)) }],
                styles: [".password-field-icon{float:right;margin-left:-25px;margin-top:-25px;margin-right:.5rem;position:relative;z-index:2}.password-field{padding-right:2rem}.password-strength-bar{min-width:0;max-width:75%;height:.5rem;margin-top:1em}.password-progress-label{float:right;margin-left:-15px;margin-top:-15px;position:relative;z-index:2}.password-strength-bar+.text-success::after{content:'Good'}.password-strength-bar+.text-warning::after{content:'OK'}.password-strength-bar+.text-danger::after{content:'Bad'}input{width:100%}input[type=password]::-ms-clear,input[type=password]::-ms-reveal{display:none}"]
            }] }
];
/** @nocollapse */
PasswordComponent.ctorParameters = () => [];
PasswordComponent.propDecorators = {
    label: [{ type: Input }],
    isRequired: [{ type: Input }],
    isDisabled: [{ type: Input }],
    password: [{ type: Input }],
    pwdCriteria: [{ type: Input }],
    minLen: [{ type: Input }],
    maxLen: [{ type: Input }],
    errorMessages: [{ type: Input }],
    showPasswordStrength: [{ type: Input }],
    objectID: [{ type: Input }],
    passwordChange: [{ type: Output }],
    blurEvent: [{ type: Output }],
    onPaste: [{ type: HostListener, args: ['document:paste', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    PasswordComponent.prototype.label;
    /** @type {?} */
    PasswordComponent.prototype.isRequired;
    /** @type {?} */
    PasswordComponent.prototype.isDisabled;
    /** @type {?} */
    PasswordComponent.prototype.password;
    /** @type {?} */
    PasswordComponent.prototype.pwdCriteria;
    /** @type {?} */
    PasswordComponent.prototype.minLen;
    /** @type {?} */
    PasswordComponent.prototype.maxLen;
    /** @type {?} */
    PasswordComponent.prototype.errorMessages;
    /** @type {?} */
    PasswordComponent.prototype.showPasswordStrength;
    /** @type {?} */
    PasswordComponent.prototype.objectID;
    /** @type {?} */
    PasswordComponent.prototype.passwordChange;
    /** @type {?} */
    PasswordComponent.prototype.blurEvent;
    /** @type {?} */
    PasswordComponent.prototype.hideValue;
    /** @type {?} */
    PasswordComponent.prototype.pswdStrength;
    /** @type {?} */
    PasswordComponent.prototype.strengthPercentage;
    /** @type {?} */
    PasswordComponent.prototype.errMsg;
    /**
     * @type {?}
     * @private
     */
    PasswordComponent.prototype.requiredMsgSeg;
    /**
     * @type {?}
     * @private
     */
    PasswordComponent.prototype.minLenMsgSeg1;
    /**
     * @type {?}
     * @private
     */
    PasswordComponent.prototype.minLenMsgSeg2;
    /**
     * @type {?}
     * @private
     */
    PasswordComponent.prototype.criteriaMsg;
}
//# sourceMappingURL=data:application/json;base64,