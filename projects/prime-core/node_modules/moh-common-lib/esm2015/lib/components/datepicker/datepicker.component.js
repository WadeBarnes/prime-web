/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, forwardRef } from '@angular/core';
import { NgxMyDatePickerDirective } from 'ngx-mydatepicker';
import * as moment_ from 'moment';
import { NgForm, ControlContainer, NG_VALUE_ACCESSOR } from '@angular/forms';
/** @type {?} */
const moment = moment_;
/**
 * PRIME datepicker component. Largely a wrapper for ngx-mydatepicker
 * https://github.com/kekeh/ngx-mydatepicker
 *
 * NOTE - YOU MUST INCLUDE NGX-MYDATEPICKER IN YOUR PARENT APPLICATION TO USE
 * THIS COMPONENT!  This is due to some poor implementation in ngx-mydatepicker.
 * Make sure to use the same version that this library uses.
 */
export class DatepickerComponent {
    constructor() {
        /**
         * Component size can be reduced, see Datepickersizes for options
         */
        this.size = DatepickerSizes.DEFAULT;
        this.dateChange = new EventEmitter();
        this.required = false;
        /**
         * Control visibility of the clear 'x' button on the mini datepicker.
         *
         * **'visible'** is default, button exists
         *
         * **'none'** means the element does not exist
         *
         * **'invisible'** means the element takes up space but is not visible / cannot be
         * used.
         *
         * Invisible is useful when you want to make sure a datepicker is the same
         * size as a visible one.
         */
        this.clearButton = 'visible';
        /**
         * Format for how to display the date to the user.
         */
        this.dateFormat = 'yyyy/mm/dd';
        // Make enum accessible in HTML
        this.DatepickerSizes = DatepickerSizes;
        this._onChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @param {?} date
     * @return {?}
     */
    convertDateToSimpleDate(date) {
        if (date === null || date === undefined) {
            return null;
        }
        return {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate(),
        };
    }
    /**
     * @param {?} date
     * @return {?}
     */
    convertSimpleDateToDate(date) {
        // When ngx-mydatepicker is cleared, it returns {year: 0, month: 0, day: 0}
        if (date.year === 0) {
            return null;
        }
        return new Date(date.year, date.month - 1, date.day);
    }
    /**
     * @param {?} x
     * @return {?}
     */
    isDate(x) {
        if (!x) {
            return false;
        }
        return x.getDate !== undefined;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.errorMessages) {
            this.errorMessages = {
                required: this.labelText + ' is required.',
                dayOutOfRange: 'Invalid ' + this.labelText + '.',
                yearDistantPast: 'Invalid ' + this.labelText + '.',
                yearDistantFuture: 'Invalid ' + this.labelText + '.',
                noFutureDatesAllowed: 'Invalid ' + this.labelText + '.',
                invalidValue: 'Invalid ' + this.labelText + '.'
            };
        }
        this.datepickerOptions = {
            dateFormat: this.dateFormat,
            sunHighlight: false,
            appendSelectorToBody: true,
        };
        if (this.size === DatepickerSizes.MINI) {
            // Set width/height to 4/5 of default
            this.datepickerOptions.selectorHeight = '185px';
            this.datepickerOptions.selectorWidth = '201px';
        }
        if (this.isDate(this.disableSince)) {
            this.datepickerOptions.disableSince = this.convertDateToSimpleDate(this.disableSince);
        }
        if (this.isDate(this.disableUntil)) {
            this.datepickerOptions.disableUntil = this.convertDateToSimpleDate(this.disableSince);
        }
        if (this.onlyFutureDates) {
            /** @type {?} */
            const today = new Date();
            this.datepickerOptions.disableUntil = this.convertDateToSimpleDate(today);
        }
        console.log('Datepicker ngOnInit', this.date);
        if (this.date) {
            // Even if jsdate winds up being undefined, even defining this.model will
            // set the input as non-empty and it'll satisfy the 'required' validation.
            // So, we only add the model if there's actual data.
            this.model = {
                jsdate: this.date
            };
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // Parent component has passed in null, so we have to manually clear the input. This leads to 2 change detection cycles.
        // We could refactor it down to one, but the performance hit is minimal for such a simple component.
        if (this.date === null) {
            this.clearDate();
            this._onChange(null);
            this._onTouched();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChanged(event) {
        if (event.jsdate || event.jsdate === null) {
            // Always emit a Date (or null)
            this.dateChange.emit(event.jsdate);
            this._onChange(event.jsdate);
            this._onTouched();
        }
    }
    /**
     * @return {?}
     */
    clearDate() {
        if (this.ngxdp) {
            // We don't need to emit here, because by changing date we'll trigger onDateChanged automatically.
            this.date = null;
            this.ngxdp.clearDate();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        this.model = {
            jsdate: obj
        };
    }
}
DatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'common-datepicker',
                template: "<div>\n    <label><span>{{labelText}}</span>\n        <div class=\"input-group\">\n            \n                <input class=\"form-control\" placeholder=\"YYYY/MM/DD\"\n                ngx-mydatepicker name=\"datepicker-{{labelText}}\"\n                [(ngModel)]=\"model\"\n                [options]=\"datepickerOptions\"\n                #dp=\"ngx-mydatepicker\"\n                #dateEl='ngModel'\n                (dateChanged)=\"onDateChanged($event)\"\n                [required]='required'\n                [disabled]=\"disabled\"/>\n\n            <span class=\"input-group-append float-label-append\">\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"dp.toggleCalendar()\">\n                    <i class=\"fa fa-calendar\"></i>\n                </button>\n            </span>\n        </div>\n    </label>\n</div>\n\n<!-- InvalidDateFormat comes from ngxmydatepicker, so we have a little less control over it. -->\n<div *ngIf=\"!disabled && dateEl.touched\"\n    role=\"alert\"\n    class='error-container'\n    aria-live=\"assertive\">\n  <div class=\"text-danger\"\n       *ngIf=\"(dateEl?.errors?.required) && errorMessages?.required && !dateEl?.errors?.invalidDateFormat\">\n       {{errorMessages.required}}\n  </div>\n  <!-- ngx-mydatepicker has it's own errors and we can't easily add our own, so we have reduced error messages. -->\n  <!-- <div class=\"text-danger\"\n      *ngIf=\"dateEl?.errors?.dayOutOfRange && errorMessages?.dayOutOfRange\">\n       {{errorMessages.dayOutOfRange}}\n  </div>\n  <div class=\"text-danger\"\n       *ngIf=\"dateEl?.errors?.yearDistantPast && errorMessages?.yearDistantPast\">\n       {{errorMessages.yearDistantPast}}\n  </div>\n  <div class=\"text-danger\"\n       *ngIf=\"dateEl?.errors?.yearDistantFuture && errorMessages?.yearDistantFuture\">\n       {{errorMessages.yearDistantFuture}}\n  </div>\n  <div class=\"text-danger\"\n        *ngIf=\"dateEl?.errors?.noPastDatesAllowed && errorMessages?.noPastDatesAllowed\">\n        {{errorMessages.noPastDatesAllowed}}\n  </div>\n  \n  <div class=\"text-danger\"\n       *ngIf=\"dateEl?.errors?.noFutureDatesAllowed && errorMessages?.noFutureDatesAllowed\">\n       {{errorMessages.noFutureDatesAllowed}}\n  </div> -->\n  <div class=\"text-danger\"\n       *ngIf=\"(dateEl?.errors?.invalidValue || dateEl?.errors?.invalidDateFormat) && errorMessages?.invalidValue\">\n       {{errorMessages.invalidValue}}\n  </div>\n</div>",
                /* Re-use the same ngForm that it's parent is using. The component will show
                   * up in its parents `this.form`, and will auto-update `this.form.valid`
                   */
                viewProviders: [{ provide: ControlContainer, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NgForm)) }],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        multi: true,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => DatepickerComponent))
                    }
                ],
                styles: [".datepicker--mini{display:flex;flex-wrap:nowrap}.datepicker--mini:not(.hide-clear)>.btn{border-top-right-radius:0;border-bottom-right-radius:0}.datepicker--mini .input-group-append .btn{padding:0 .5rem}.input-group-append{z-index:0}.float-label-append{margin-bottom:calc(.5rem + 2px)}.has-float-label{flex-basis:calc(100% - 36px)}"]
            }] }
];
/** @nocollapse */
DatepickerComponent.ctorParameters = () => [];
DatepickerComponent.propDecorators = {
    size: [{ type: Input }],
    date: [{ type: Input }],
    dateChange: [{ type: Output }],
    disabled: [{ type: Input }],
    labelText: [{ type: Input }],
    required: [{ type: Input }],
    disableUntil: [{ type: Input }],
    disableSince: [{ type: Input }],
    onlyFutureDates: [{ type: Input }],
    clearButton: [{ type: Input }],
    dateFormat: [{ type: Input }],
    errorMessages: [{ type: Input }],
    ngxdp: [{ type: ViewChild, args: ['dp',] }]
};
if (false) {
    /**
     * Component size can be reduced, see Datepickersizes for options
     * @type {?}
     */
    DatepickerComponent.prototype.size;
    /** @type {?} */
    DatepickerComponent.prototype.date;
    /** @type {?} */
    DatepickerComponent.prototype.dateChange;
    /** @type {?} */
    DatepickerComponent.prototype.disabled;
    /** @type {?} */
    DatepickerComponent.prototype.labelText;
    /** @type {?} */
    DatepickerComponent.prototype.required;
    /**
     * Dates **before** disableUntil will not be valid selections.  Maps to a ngx-mydatepicker option, but we convert IMyDate to Date
     * @type {?}
     */
    DatepickerComponent.prototype.disableUntil;
    /**
     * Dates **after** disableSince will not be valid selections.  Maps to a ngx-mydatepicker option, but we convert IMyDate to Date
     * @type {?}
     */
    DatepickerComponent.prototype.disableSince;
    /**
     * Equivalent to setting disableBefore to tomorrow.
     * @type {?}
     */
    DatepickerComponent.prototype.onlyFutureDates;
    /**
     * Control visibility of the clear 'x' button on the mini datepicker.
     *
     * **'visible'** is default, button exists
     *
     * **'none'** means the element does not exist
     *
     * **'invisible'** means the element takes up space but is not visible / cannot be
     * used.
     *
     * Invisible is useful when you want to make sure a datepicker is the same
     * size as a visible one.
     * @type {?}
     */
    DatepickerComponent.prototype.clearButton;
    /**
     * Format for how to display the date to the user.
     * @type {?}
     */
    DatepickerComponent.prototype.dateFormat;
    /** @type {?} */
    DatepickerComponent.prototype.errorMessages;
    /**
     * Datetime model used to interface with ngx-datepicker.
     * @type {?}
     */
    DatepickerComponent.prototype.model;
    /** @type {?} */
    DatepickerComponent.prototype.DatepickerSizes;
    /** @type {?} */
    DatepickerComponent.prototype.ngxdp;
    /**
     * Default options for wrapped ngx-datepicker.
     * @type {?}
     */
    DatepickerComponent.prototype.datepickerOptions;
    /** @type {?} */
    DatepickerComponent.prototype._onChange;
    /** @type {?} */
    DatepickerComponent.prototype._onTouched;
}
/** @enum {string} */
const DatepickerSizes = {
    MINI: 'mini',
    DEFAULT: 'default',
};
export { DatepickerSizes };
//# sourceMappingURL=data:application/json;base64,