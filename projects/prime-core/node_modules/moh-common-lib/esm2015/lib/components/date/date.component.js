/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectorRef, forwardRef } from '@angular/core';
import { Base } from '../../../models/src/base';
import { ControlContainer, NgForm, NgModel } from '@angular/forms';
import * as moment_ from 'moment';
/** @type {?} */
const moment = moment_;
/**
 * Component NPM package dependencies:
 * a) moment
 * @record
 */
export function DateErrorMsg() { }
if (false) {
    /** @type {?} */
    DateErrorMsg.prototype.required;
    /** @type {?|undefined} */
    DateErrorMsg.prototype.dayOutOfRange;
    /** @type {?|undefined} */
    DateErrorMsg.prototype.yearDistantPast;
    /** @type {?|undefined} */
    DateErrorMsg.prototype.yearDistantFuture;
    /** @type {?|undefined} */
    DateErrorMsg.prototype.noPastDatesAllowed;
    /** @type {?|undefined} */
    DateErrorMsg.prototype.noFutureDatesAllowed;
    /** @type {?|undefined} */
    DateErrorMsg.prototype.invalidValue;
}
export class DateComponent extends Base {
    /**
     * @param {?} form
     * @param {?} cd
     */
    constructor(form, cd) {
        super();
        this.form = form;
        this.cd = cd;
        this.useCurrentDate = false;
        this.required = true;
        this.disabled = false;
        this.label = 'Date';
        /**
         * Can be one of: "future", "past". "future" includes today, "past" does not.
         */
        this.restrictDate = 'any';
        this.dateChange = new EventEmitter();
        this.monthList = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.errorMessages) {
            // Use default messages
            this.errorMessages = {
                required: this.label + ' is required.',
                dayOutOfRange: 'Invalid ' + this.label + '.',
                yearDistantPast: 'Invalid ' + this.label + '.',
                yearDistantFuture: 'Invalid ' + this.label + '.',
                noFutureDatesAllowed: 'Invalid ' + this.label + '.',
                invalidValue: 'Invalid ' + this.label + '.'
            };
        }
        if (this.useCurrentDate) {
            // Set date to current date
            this.date.month = moment().month();
            this.date.day = moment().date();
            this.date.year = moment().year();
        }
    }
    /**
     * Set the month and notify caller of change
     * @param {?} value
     * @return {?}
     */
    setMonth(value) {
        /** @type {?} */
        const month = this.getNumericValue(value);
        // console.log( 'monthRef: ', this.monthRef );
        if (this.date) {
            this.date.month = month;
            this.triggerDayValidation();
            this.dateChange.emit(this.date);
        }
    }
    /**
     * Set the day and notify caller of change
     * @param {?} value
     * @return {?}
     */
    setDay(value) {
        /** @type {?} */
        const day = this.getNumericValue(value);
        // console.log(  'dayRef: ', this.dayRef );
        if (this.date) {
            this.date.day = day;
            this.dateChange.emit(this.date);
        }
    }
    /**
     * Set the yera and notify caller of change
     * @param {?} value
     * @return {?}
     */
    setYear(value) {
        /** @type {?} */
        const year = this.getNumericValue(value);
        // console.log( 'yearRef: ', this.yearRef );
        if (this.date) {
            this.date.year = year;
            this.triggerDayValidation();
            this.dateChange.emit(this.date);
        }
    }
    /**
     * Force the `day` input to run it's directives again. Important in cases
     * where user fills fields out of order, e.g. sets days to 31 then month to
     * Februrary.
     * @private
     * @return {?}
     */
    triggerDayValidation() {
        // We have to wrap this in a timeout, otherwise it runs before Angular has updated the values
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.form.controls['day']) {
                // console.log( 'Trigger day validation' );
                this.form.controls['day'].updateValueAndValidity();
                this.cd.detectChanges();
            }
        }), 0);
    }
    /**
     * Convert string to numeric value or null if not
     * @private
     * @param {?} value
     * @return {?}
     */
    getNumericValue(value) {
        /** @type {?} */
        const parsed = parseInt(value, 10);
        return (isNaN(parsed) ? null : parsed);
    }
}
DateComponent.decorators = [
    { type: Component, args: [{
                selector: 'common-date',
                template: "<fieldset>\n  <legend class=\"date--legend\">{{label}}</legend>\n  <div class=\"form-group date-row\">\n\n    <label class=\"visuallyhidden\" for=\"month{{objectId}}\">Month</label>\n    <select class=\"form-control monthSelect\"\n            id=\"month{{objectId}}\"\n            name=\"month\"\n            [ngModel]=\"date?.month\"\n            (ngModelChange)=\"setMonth($event)\"\n            [disabled]='disabled'\n            #monthRef=\"ngModel\"\n            [required]=\"required\">\n      <!-- We show the blank option so the user can clear out their data.-->\n      <option value=\"null\" label=\"-- month --\" selected [disabled]='required'></option>\n      <option *ngFor=\"let month of monthList; let i = index;\" [value]=\"i + 1\">{{month}}</option>\n    </select>\n\n    <label class=\"visuallyhidden\" for=\"day{{objectId}}\">Day</label>\n    <input type=\"number\"\n           class=\"form-control dayInput\"\n           id=\"day{{objectId}}\"\n           name=\"day\"\n           placeholder=\"day\"\n           [ngModel]=\"date?.day\"\n           (ngModelChange)=\"setDay($event)\"\n           #dayRef=\"ngModel\"\n           [required]=\"required\"\n           commonDateFieldFormat\n           commonDayValidation\n           [disabled]='disabled'\n           maxlength=\"2\" />\n\n    <label class=\"visuallyhidden\" for=\"year{{objectId}}\">Year</label>\n    <input type=\"number\"\n           class=\"form-control yearInput\"\n           id=\"year{{objectId}}\"\n           name=\"year\"\n           placeholder=\"year\"\n           [ngModel]=\"date?.year\"\n           (ngModelChange)=\"setYear($event)\"\n           #yearRef=\"ngModel\"\n           [required]=\"required\"\n           commonDateFieldFormat\n           [commonYearValidate]=\"restrictDate\"\n           [disabled]='disabled'\n           maxlength=\"4\" />\n\n  </div>\n\n</fieldset>\n\n<!-- Error messages for component -->\n<div *ngIf=\"!disabled && (monthRef.touched || monthRef.dirty) && (dayRef.touched || dayRef.dirty) && (yearRef.touched || yearRef.dirty)\"\n    role=\"alert\"\n    class='error-container'\n    aria-live=\"assertive\">\n  <div class=\"text-danger\"\n       *ngIf=\"(monthRef?.errors?.required || dayRef?.errors?.required || yearRef?.errors?.required ) && errorMessages?.required\">\n       {{errorMessages.required}}\n  </div>\n  <div class=\"text-danger\"\n      *ngIf=\"dayRef?.errors?.dayOutOfRange && errorMessages?.dayOutOfRange\">\n       {{errorMessages.dayOutOfRange}}\n  </div>\n  <div class=\"text-danger\"\n       *ngIf=\"yearRef?.errors?.yearDistantPast && errorMessages?.yearDistantPast\">\n       {{errorMessages.yearDistantPast}}\n  </div>\n  <div class=\"text-danger\"\n       *ngIf=\"yearRef?.errors?.yearDistantFuture && errorMessages?.yearDistantFuture\">\n       {{errorMessages.yearDistantFuture}}\n  </div>\n  <div class=\"text-danger\"\n        *ngIf=\"yearRef?.errors?.noPastDatesAllowed && errorMessages?.noPastDatesAllowed\">\n        {{errorMessages.noPastDatesAllowed}}\n  </div>\n  <div class=\"text-danger\"\n       *ngIf=\"yearRef?.errors?.noFutureDatesAllowed && errorMessages?.noFutureDatesAllowed\">\n       {{errorMessages.noFutureDatesAllowed}}\n  </div>\n  <!-- Case should not happen until something is not formatted correctly-->\n  <div class=\"text-danger\"\n       *ngIf=\"(dayRef?.errors?.invalidValue || yearRef?.errors?.invalidValue) && errorMessages?.invalidValue\">\n       {{errorMessages.invalidValue}}\n  </div>\n</div>\n\n\n",
                /* Re-use the same ngForm that it's parent is using. The component will show
                   * up in its parents `this.form`, and will auto-update `this.form.valid`
                   */
                viewProviders: [{ provide: ControlContainer, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NgForm)) }],
                styles: [".date--legend{font-size:inherit;font-weight:700}.date-row{display:flex;flex-wrap:nowrap;justify-content:space-between}.monthSelect{max-width:50%;height:35px;margin-right:1em}.dayInput{max-width:25%;height:35px;margin-right:1em}.yearInput{max-width:25%;height:35px}.error-container{flex-basis:100%!important}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;-moz-appearance:none;appearance:none;margin:0}select option[selected]{color:gray!important}"]
            }] }
];
/** @nocollapse */
DateComponent.ctorParameters = () => [
    { type: NgForm },
    { type: ChangeDetectorRef }
];
DateComponent.propDecorators = {
    monthRef: [{ type: ViewChild, args: ['monthRef',] }],
    dayRef: [{ type: ViewChild, args: ['dayRef',] }],
    yearRef: [{ type: ViewChild, args: ['yearRef',] }],
    useCurrentDate: [{ type: Input }],
    required: [{ type: Input }],
    disabled: [{ type: Input }],
    label: [{ type: Input }],
    date: [{ type: Input }],
    restrictDate: [{ type: Input }],
    errorMessages: [{ type: Input }],
    dateChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DateComponent.prototype.monthRef;
    /** @type {?} */
    DateComponent.prototype.dayRef;
    /** @type {?} */
    DateComponent.prototype.yearRef;
    /** @type {?} */
    DateComponent.prototype.useCurrentDate;
    /** @type {?} */
    DateComponent.prototype.required;
    /** @type {?} */
    DateComponent.prototype.disabled;
    /** @type {?} */
    DateComponent.prototype.label;
    /** @type {?} */
    DateComponent.prototype.date;
    /**
     * Can be one of: "future", "past". "future" includes today, "past" does not.
     * @type {?}
     */
    DateComponent.prototype.restrictDate;
    /** @type {?} */
    DateComponent.prototype.errorMessages;
    /** @type {?} */
    DateComponent.prototype.dateChange;
    /** @type {?} */
    DateComponent.prototype.monthList;
    /**
     * @type {?}
     * @private
     */
    DateComponent.prototype.form;
    /**
     * @type {?}
     * @private
     */
    DateComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,