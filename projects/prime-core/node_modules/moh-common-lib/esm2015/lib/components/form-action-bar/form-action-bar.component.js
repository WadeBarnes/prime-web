/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';
import { ControlContainer, NgForm } from '@angular/forms';
export class FormActionBarComponent {
    constructor() {
        this.submitLabel = 'Continue';
        this.canContinue = true;
        this.isLoading = false;
        this.defaultColor = true;
        this.btnClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        if (!this.isLoading && this.canContinue) {
            this.btnClick.emit($event);
        }
        $event.stopPropagation();
        return false;
    }
}
FormActionBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'common-form-action-bar',
                template: "<div class=\"form-action-bar form-bar\" [ngClass]=\"{disabled: !canContinue}\">\n    <button class=\"btn btn-lg {{defaultColor ? 'btn-primary' : 'btn-secondary' }} submit\"\n            (click)=\"onClick($event)\"\n            [ngClass]=\"{disabled: !canContinue || isLoading}\">\n      <ng-container *ngIf=\"!isLoading; else loadingSpinner\"> {{submitLabel}} </ng-container>\n      \n    </button>\n</div>\n\n<ng-template #loadingSpinner>\n    <i class=\"fa fa-spinner fa-pulse fa-fw\"></i>\n</ng-template>",
                viewProviders: [{ provide: ControlContainer, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NgForm)) }],
                styles: [".form-action-bar{display:flex;justify-content:flex-end;padding:1em;background-color:#cdd9e4;transition:background-color .3s;position:-webkit-sticky;position:sticky;bottom:0;z-index:10;left:5rem;right:5rem}.form-action-bar.disabled{background-color:#d5d9dd}@media (max-width:991.98px){.form-action-bar{left:2.5rem;right:2.5rem}}.submit{min-width:240px}@media (max-width:767.98px){.form-action-bar{left:0;right:0}.submit{min-width:100%}}.btn{white-space:normal!important;word-wrap:break-word}"]
            }] }
];
/** @nocollapse */
FormActionBarComponent.ctorParameters = () => [];
FormActionBarComponent.propDecorators = {
    submitLabel: [{ type: Input }],
    canContinue: [{ type: Input }],
    isLoading: [{ type: Input }],
    defaultColor: [{ type: Input }],
    btnClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FormActionBarComponent.prototype.submitLabel;
    /** @type {?} */
    FormActionBarComponent.prototype.canContinue;
    /** @type {?} */
    FormActionBarComponent.prototype.isLoading;
    /** @type {?} */
    FormActionBarComponent.prototype.defaultColor;
    /** @type {?} */
    FormActionBarComponent.prototype.btnClick;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1hY3Rpb24tYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21vaC1jb21tb24tbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZm9ybS1hY3Rpb24tYmFyL2Zvcm0tYWN0aW9uLWJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVExRCxNQUFNLE9BQU8sc0JBQXNCO0lBT2pDO1FBTlMsZ0JBQVcsR0FBVyxVQUFVLENBQUM7UUFDakMsZ0JBQVcsR0FBWSxJQUFJLENBQUM7UUFDNUIsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUMzQixpQkFBWSxHQUFZLElBQUksQ0FBQztRQUM1QixhQUFRLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFaEQsQ0FBQzs7OztJQUVqQixRQUFRO0lBQ1IsQ0FBQzs7Ozs7SUFFRCxPQUFPLENBQUMsTUFBTTtRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDNUI7UUFDRCxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDekIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7WUF4QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx3QkFBd0I7Z0JBQ2xDLHVnQkFBK0M7Z0JBRS9DLGFBQWEsRUFBRSxDQUFFLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBRTs7YUFDekY7Ozs7OzBCQUVFLEtBQUs7MEJBQ0wsS0FBSzt3QkFDTCxLQUFLOzJCQUNMLEtBQUs7dUJBQ0wsTUFBTTs7OztJQUpQLDZDQUEwQzs7SUFDMUMsNkNBQXFDOztJQUNyQywyQ0FBb0M7O0lBQ3BDLDhDQUFzQzs7SUFDdEMsMENBQWdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbENvbnRhaW5lciwgTmdGb3JtIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjb21tb24tZm9ybS1hY3Rpb24tYmFyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Zvcm0tYWN0aW9uLWJhci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2Zvcm0tYWN0aW9uLWJhci5jb21wb25lbnQuc2NzcyddLFxuICB2aWV3UHJvdmlkZXJzOiBbIHsgcHJvdmlkZTogQ29udHJvbENvbnRhaW5lciwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTmdGb3JtICkgfSBdXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1BY3Rpb25CYXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBzdWJtaXRMYWJlbDogc3RyaW5nID0gJ0NvbnRpbnVlJztcbiAgQElucHV0KCkgY2FuQ29udGludWU6IGJvb2xlYW4gPSB0cnVlO1xuICBASW5wdXQoKSBpc0xvYWRpbmc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgZGVmYXVsdENvbG9yOiBib29sZWFuID0gdHJ1ZTtcbiAgQE91dHB1dCgpIGJ0bkNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gIH1cblxuICBvbkNsaWNrKCRldmVudCkge1xuICAgIGlmICghdGhpcy5pc0xvYWRpbmcgJiYgdGhpcy5jYW5Db250aW51ZSkge1xuICAgICAgdGhpcy5idG5DbGljay5lbWl0KCRldmVudCk7XG4gICAgfVxuICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdfQ==