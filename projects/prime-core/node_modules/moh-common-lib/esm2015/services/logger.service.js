/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { AbstractHttpService } from './abstract-api-service';
import { throwError } from 'rxjs';
import * as moment_ from 'moment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/** @type {?} */
const moment = moment_;
export class CommonLogger extends AbstractHttpService {
    /**
     * @param {?} http
     */
    constructor(http) {
        super(http);
        this.http = http;
        /**
         * The HTTP Headers which go with each request.  These MUST be set if you are
         * using the logger.  Fields include:
         *
         * - program (REQUIRED, the application wide code)
         * - applicationId (REQUIRED, like sessionId)
         * - request_method (REQUIRED, 'POST')
         * - logsource: (REQUIRED, window.location.hostname)
         * - http_x_forwarded_host (REQUIRED, window.location.hostname)
         *
         */
        this._headers = new HttpHeaders({
            request_method: 'POST',
            logsource: window.location.hostname,
            http_x_forwarded_host: window.location.hostname
        });
        this.url = null;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    set applicationId(id) {
        this._headers = this._headers.set('applicationId', id);
    }
    /**
     * @return {?}
     */
    get applicationId() {
        return this._headers.get('applicationId');
    }
    /**
     * @param {?} name
     * @return {?}
     */
    set programName(name) {
        this._headers = this._headers.set('program', name);
    }
    /**
     * @return {?}
     */
    get programName() {
        return this._headers.get('name');
    }
    /**
     * @param {?} newURL
     * @return {?}
     */
    setURL(newURL) {
        this.url = newURL;
    }
    /**
     * @param {?} message
     * @return {?}
     */
    log(message) {
        this._log((/** @type {?} */ (message)));
    }
    /**
     * @param {?} errorMessage
     * @return {?}
     */
    logError(errorMessage) {
        this._logError((/** @type {?} */ (errorMessage)));
    }
    /**
     * Log a message to Splunk. This is the main way to send logs and
     * automatically includes meta-data. You do **not** need to subscribe to the
     * response, as the service already does that. The input object must have an
     * 'event' property set, everything else is optional.
     *
     * Example:
     * ```
     * this.logService.log({
     * event: 'submission',
     * dateObj: new Date()
     * });
     * ```
     * @protected
     * @param {?} message A JavaScript object, nesting is fine, with `event` property
     * set.
     * @return {?}
     */
    _log(message) {
        this.setSeverity(SeverityLevels.INFO);
        return this._sendLog(message);
    }
    /**
     * @protected
     * @param {?} errorMessage
     * @return {?}
     */
    _logError(errorMessage) {
        this.setSeverity(SeverityLevels.ERROR);
        return this._sendLog(errorMessage);
    }
    /**
     * Log HTTP errors, e.g. when losing network connectivity or receiving an
     * error response code.
     * @param {?} error
     * @return {?}
     */
    logHttpError(error) {
        return this._logError({
            event: 'error',
            message: error.message,
            errorName: error.name,
            statusText: error.statusText
        });
    }
    /**
     * Internal method to send logs to Splunk, includes meta-data except that's
     * consistent across all requests, but not specific values like severity
     * level.
     *
     * @private
     * @param {?} message A JavaScript object or anything that can be toString()'d,
     * like Date
     * @return {?}
     */
    _sendLog(message) {
        // Update headers
        this.setTimestamp();
        this.setTags(message.event);
        if (this.url === null) {
            /** @type {?} */
            const msg = 'Unable to send logs as URL as not been set via setURL()';
            console.error(msg);
            return throwError(msg);
        }
        // Configure request
        /** @type {?} */
        const body = { message: message };
        // We call .subscribe() here because we don't care about the response and
        // we want to ensure that we never forget to call subscribe.
        return this.post(this.url, body).subscribe();
    }
    /**
     * @protected
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        console.log('logService handleError()', error);
        if (error.error instanceof ErrorEvent) {
            // Client-side / network error occured
            console.error('An error occured: ', error.error.message);
        }
        else {
            // The backend returned an unsuccessful response code
            console.error(`Backend returned error code: ${error.status}.  Error body: ${error.error}`);
        }
        return throwError(error);
    }
    /**
     * Overwrite the inherited httpOptions so we can set responseType to text.
     * This updates Angular's parsing, and it won't error out due to the server
     * not responding with JSON.
     * @protected
     * @return {?}
     */
    get httpOptions() {
        return {
            headers: this._headers,
            responseType: 'text'
        };
    }
    /**
     * @private
     * @return {?}
     */
    setTimestamp() {
        this._headers = this._headers.set('timestamp', moment().toISOString());
    }
    /**
     * @private
     * @param {?} severity
     * @return {?}
     */
    setSeverity(severity) {
        this._headers = this._headers.set('severity', severity);
    }
    /**
     * The headers are easier to search in splunk, and we aren't using tags, so
     * repurpose it to event type.
     * @private
     * @param {?} message
     * @return {?}
     */
    setTags(message) {
        this._headers = this._headers.set('tags', message);
    }
}
CommonLogger.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
CommonLogger.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ CommonLogger.ngInjectableDef = i0.defineInjectable({ factory: function CommonLogger_Factory() { return new CommonLogger(i0.inject(i1.HttpClient)); }, token: CommonLogger, providedIn: "root" });
if (false) {
    /**
     * The HTTP Headers which go with each request.  These MUST be set if you are
     * using the logger.  Fields include:
     *
     * - program (REQUIRED, the application wide code)
     * - applicationId (REQUIRED, like sessionId)
     * - request_method (REQUIRED, 'POST')
     * - logsource: (REQUIRED, window.location.hostname)
     * - http_x_forwarded_host (REQUIRED, window.location.hostname)
     *
     * @type {?}
     * @protected
     */
    CommonLogger.prototype._headers;
    /**
     * @type {?}
     * @private
     */
    CommonLogger.prototype.url;
    /**
     * @type {?}
     * @protected
     */
    CommonLogger.prototype.http;
}
/** @enum {string} */
const SeverityLevels = {
    INFO: 'info',
    ERROR: 'error',
};
/**
 * @record
 */
export function CommonLogMessage() { }
if (false) {
    /**
     * The type of event being logged.
     * @type {?}
     */
    CommonLogMessage.prototype.event;
    /* Skipping unhandled member: [key: string]: any;*/
}
//# sourceMappingURL=data:application/json;base64,