/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { UUID } from 'angular2-uuid';
/** @enum {number} */
const CommonImageError = {
    WrongType: 0,
    TooSmall: 1,
    TooBig: 2,
    AlreadyExists: 3,
    Unknown: 4,
    CannotOpen: 5,
    PDFnotSupported: 6,
    CannotOpenPDF: 7,
};
export { CommonImageError };
CommonImageError[CommonImageError.WrongType] = 'WrongType';
CommonImageError[CommonImageError.TooSmall] = 'TooSmall';
CommonImageError[CommonImageError.TooBig] = 'TooBig';
CommonImageError[CommonImageError.AlreadyExists] = 'AlreadyExists';
CommonImageError[CommonImageError.Unknown] = 'Unknown';
CommonImageError[CommonImageError.CannotOpen] = 'CannotOpen';
CommonImageError[CommonImageError.PDFnotSupported] = 'PDFnotSupported';
CommonImageError[CommonImageError.CannotOpenPDF] = 'CannotOpenPDF';
export class CommonImageProcessingError {
    // added errorDescription.PDF.JS gives proper error messages as invalid pdf structure or password protected pdf.Good for splunk tracking
    /**
     * @param {?} errorCode
     * @param {?=} errorDescription
     */
    constructor(errorCode, errorDescription) {
        this.errorCode = errorCode;
        this.errorDescription = errorDescription;
    }
}
if (false) {
    /** @type {?} */
    CommonImageProcessingError.prototype.commonImage;
    /** @type {?} */
    CommonImageProcessingError.prototype.rawImageFile;
    /** @type {?} */
    CommonImageProcessingError.prototype.maxSizeAllowed;
    /** @type {?} */
    CommonImageProcessingError.prototype.errorCode;
    /** @type {?} */
    CommonImageProcessingError.prototype.errorDescription;
}
/**
 * Image as uploaded by user
 */
export class CommonImage {
    constructor() {
        this.attachmentOrder = 0;
        this.uuid = UUID.UUID();
    }
}
if (false) {
    /** @type {?} */
    CommonImage.prototype.uuid;
    /** @type {?} */
    CommonImage.prototype.fileContent;
    /** @type {?} */
    CommonImage.prototype.contentType;
    /** @type {?} */
    CommonImage.prototype.size;
    /** @type {?} */
    CommonImage.prototype.sizeUnit;
    /** @type {?} */
    CommonImage.prototype.sizeTxt;
    /** @type {?} */
    CommonImage.prototype.naturalHeight;
    /** @type {?} */
    CommonImage.prototype.naturalWidth;
    /** @type {?} */
    CommonImage.prototype.name;
    /** @type {?} */
    CommonImage.prototype.id;
    /** @type {?} */
    CommonImage.prototype.error;
    /** @type {?} */
    CommonImage.prototype.attachmentOrder;
}
/**
 * @record
 */
export function CommonImageScaleFactors() { }
if (false) {
    /** @type {?} */
    CommonImageScaleFactors.prototype.widthFactor;
    /** @type {?} */
    CommonImageScaleFactors.prototype.heightFactor;
    /**
     * @param {?} scale
     * @return {?}
     */
    CommonImageScaleFactors.prototype.scaleDown = function (scale) { };
}
export class CommonImageScaleFactorsImpl {
    /**
     * @param {?} wFactor
     * @param {?} hFactor
     */
    constructor(wFactor, hFactor) {
        this.widthFactor = wFactor;
        this.heightFactor = hFactor;
    }
    /**
     * @param {?} scale
     * @return {?}
     */
    scaleDown(scale) {
        return new CommonImageScaleFactorsImpl(this.widthFactor * scale, this.heightFactor * scale);
    }
}
if (false) {
    /** @type {?} */
    CommonImageScaleFactorsImpl.prototype.widthFactor;
    /** @type {?} */
    CommonImageScaleFactorsImpl.prototype.heightFactor;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbW9oLWNvbW1vbi1saWIvaW1hZ2VzLyIsInNvdXJjZXMiOlsiaW1hZ2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7SUFJakMsWUFBUztJQUNULFdBQVE7SUFDUixTQUFNO0lBQ04sZ0JBQWE7SUFDYixVQUFPO0lBQ1AsYUFBVTtJQUNWLGtCQUFlO0lBQ2YsZ0JBQWE7Ozs7Ozs7Ozs7O0FBR2pCLE1BQU0sT0FBTywwQkFBMEI7Ozs7OztJQUtuQyxZQUFtQixTQUEyQixFQUFTLGdCQUF5QjtRQUE3RCxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUFTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBUztJQUVoRixDQUFDO0NBQ0o7OztJQVBHLGlEQUEwQjs7SUFDMUIsa0RBQW9COztJQUNwQixvREFBd0I7O0lBRVosK0NBQWtDOztJQUFFLHNEQUFnQzs7Ozs7QUFPcEYsTUFBTSxPQUFPLFdBQVc7SUFJcEI7UUFrQkEsb0JBQWUsR0FBVyxDQUFDLENBQUM7UUFqQnhCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7Q0FpQko7OztJQXJCRywyQkFBYTs7SUFNYixrQ0FBb0I7O0lBQ3BCLGtDQUFvQjs7SUFFcEIsMkJBQWE7O0lBQ2IsK0JBQWlCOztJQUNqQiw4QkFBZ0I7O0lBQ2hCLG9DQUFzQjs7SUFDdEIsbUNBQXFCOztJQUNyQiwyQkFBYTs7SUFHYix5QkFBVzs7SUFFWCw0QkFBeUI7O0lBQ3pCLHNDQUE0Qjs7Ozs7QUFHaEMsNkNBS0M7OztJQUpHLDhDQUFvQjs7SUFDcEIsK0NBQXFCOzs7OztJQUVyQixtRUFBa0Q7O0FBR3RELE1BQU0sT0FBTywyQkFBMkI7Ozs7O0lBSXBDLFlBQVksT0FBZSxFQUFFLE9BQWU7UUFDeEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7UUFDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsS0FBYTtRQUNuQixPQUFPLElBQUksMkJBQTJCLENBQ2xDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxFQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7Q0FDSjs7O0lBYkcsa0RBQW9COztJQUNwQixtREFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVVUlEIH0gZnJvbSAnYW5ndWxhcjItdXVpZCc7XG5cbi8vIE5PVEU6IElmIHlvdSBjaGFuZ2UgYW55dGhpbmcgaW4gdGhpcyBlbnVtLCBjaGVjayBpbWFnZS1lcnJvci1tb2RhbC5jb21wb25lbnQuaHRtbCBmb3IgdGVzdHMgYW5kIGZpbGUtdXBsb2FkZXIuY29tcG9uZW50LnRzOlxuZXhwb3J0IGVudW0gQ29tbW9uSW1hZ2VFcnJvciB7XG4gICAgV3JvbmdUeXBlLFxuICAgIFRvb1NtYWxsLFxuICAgIFRvb0JpZyxcbiAgICBBbHJlYWR5RXhpc3RzLFxuICAgIFVua25vd24sXG4gICAgQ2Fubm90T3BlbixcbiAgICBQREZub3RTdXBwb3J0ZWQsXG4gICAgQ2Fubm90T3BlblBERixcbn1cblxuZXhwb3J0IGNsYXNzIENvbW1vbkltYWdlUHJvY2Vzc2luZ0Vycm9yIHtcbiAgICBjb21tb25JbWFnZT86IENvbW1vbkltYWdlO1xuICAgIHJhd0ltYWdlRmlsZT86IEZpbGU7XG4gICAgbWF4U2l6ZUFsbG93ZWQ/OiBudW1iZXI7XG4gICAgLy8gYWRkZWQgZXJyb3JEZXNjcmlwdGlvbi5QREYuSlMgZ2l2ZXMgcHJvcGVyIGVycm9yIG1lc3NhZ2VzIGFzIGludmFsaWQgcGRmIHN0cnVjdHVyZSBvciBwYXNzd29yZCBwcm90ZWN0ZWQgcGRmLkdvb2QgZm9yIHNwbHVuayB0cmFja2luZ1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlcnJvckNvZGU6IENvbW1vbkltYWdlRXJyb3IsIHB1YmxpYyBlcnJvckRlc2NyaXB0aW9uPzogc3RyaW5nKSB7XG5cbiAgICB9XG59XG4vKipcbiAqIEltYWdlIGFzIHVwbG9hZGVkIGJ5IHVzZXJcbiAqL1xuZXhwb3J0IGNsYXNzIENvbW1vbkltYWdlIHtcblxuICAgIHV1aWQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnV1aWQgPSBVVUlELlVVSUQoKTtcbiAgICB9XG5cbiAgICBmaWxlQ29udGVudDogc3RyaW5nO1xuICAgIGNvbnRlbnRUeXBlOiBzdHJpbmc7XG4gICAgLy8gbnVtYmVyIG9mIGJ5dGVzLlxuICAgIHNpemU6IG51bWJlcjtcbiAgICBzaXplVW5pdDogc3RyaW5nO1xuICAgIHNpemVUeHQ6IHN0cmluZztcbiAgICBuYXR1cmFsSGVpZ2h0OiBudW1iZXI7XG4gICAgbmF0dXJhbFdpZHRoOiBudW1iZXI7XG4gICAgbmFtZTogc3RyaW5nO1xuXG4gICAgLy8gZmlsZSB1bmlxbmVzcyBjaGVja3N1bVxuICAgIGlkOiBzdHJpbmc7XG5cbiAgICBlcnJvcj86IENvbW1vbkltYWdlRXJyb3I7XG4gICAgYXR0YWNobWVudE9yZGVyOiBudW1iZXIgPSAwO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbW1vbkltYWdlU2NhbGVGYWN0b3JzIHtcbiAgICB3aWR0aEZhY3RvcjogbnVtYmVyO1xuICAgIGhlaWdodEZhY3RvcjogbnVtYmVyO1xuXG4gICAgc2NhbGVEb3duKHNjYWxlOiBudW1iZXIpOiBDb21tb25JbWFnZVNjYWxlRmFjdG9ycztcbn1cblxuZXhwb3J0IGNsYXNzIENvbW1vbkltYWdlU2NhbGVGYWN0b3JzSW1wbCBpbXBsZW1lbnRzIENvbW1vbkltYWdlU2NhbGVGYWN0b3JzIHtcbiAgICB3aWR0aEZhY3RvcjogbnVtYmVyO1xuICAgIGhlaWdodEZhY3RvcjogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3Iod0ZhY3RvcjogbnVtYmVyLCBoRmFjdG9yOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy53aWR0aEZhY3RvciA9IHdGYWN0b3I7XG4gICAgICAgIHRoaXMuaGVpZ2h0RmFjdG9yID0gaEZhY3RvcjtcbiAgICB9XG5cbiAgICBzY2FsZURvd24oc2NhbGU6IG51bWJlcik6IENvbW1vbkltYWdlU2NhbGVGYWN0b3JzIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21tb25JbWFnZVNjYWxlRmFjdG9yc0ltcGwoXG4gICAgICAgICAgICB0aGlzLndpZHRoRmFjdG9yICogc2NhbGUsXG4gICAgICAgICAgICB0aGlzLmhlaWdodEZhY3RvciAqIHNjYWxlKTtcbiAgICB9XG59XG4iXX0=