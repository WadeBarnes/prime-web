/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';
/**
 *
 * @abstract
 */
export class AbstractForm {
    /**
     * Constructor
     * @param {?} router
     */
    constructor(router) {
        this.router = router;
        /**
         * Show or hide the loading spinner as required, should be passed to form action bar.
         */
        this.loading = false;
        this.router = router;
    }
    /**
     * Determines if the Continue button is disabled on the form action bar
     * @return {?}
     */
    canContinue() {
        // Returns true if form is valid
        return this.form.valid;
    }
    /**
     * Navigates to a route then automatically scrolls to the top of the page.
     * @protected
     * @param {?} url
     * @return {?}
     */
    navigate(url) {
        this.router.navigate([url])
            .then((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }));
    }
    /**
     * Runs the angular 'markAsTouched()' on all form inputs.
     * @protected
     * @return {?}
     */
    markAllInputsTouched() {
        Object.keys(this.form.form.controls).forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            this.form.form.get(x).markAsTouched();
        }));
    }
}
AbstractForm.propDecorators = {
    form: [{ type: ViewChild, args: ['formRef',] }]
};
if (false) {
    /**
     * Access to the form elements for validation
     * @type {?}
     */
    AbstractForm.prototype.form;
    /**
     * Disables all inputs (todo: not implemented)
     * @type {?}
     */
    AbstractForm.prototype.disabled;
    /**
     * Show or hide the loading spinner as required, should be passed to form action bar.
     * @type {?}
     */
    AbstractForm.prototype.loading;
    /**
     * @type {?}
     * @protected
     */
    AbstractForm.prototype.router;
    /**
     * What happens when the user clicks the continue button. Generally navigating to another page.
     * @abstract
     * @return {?}
     */
    AbstractForm.prototype.continue = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtZm9ybS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21vaC1jb21tb24tbGliL21vZGVscy8iLCJzb3VyY2VzIjpbImFic3RyYWN0LWZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OztBQU14QyxNQUFNLE9BQWdCLFlBQVk7Ozs7O0lBZWhDLFlBQXNCLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFROzs7O1FBUnBDLFlBQU8sR0FBWSxLQUFLLENBQUM7UUFTdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQzs7Ozs7SUFLRCxXQUFXO1FBQ1QsZ0NBQWdDO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDekIsQ0FBQzs7Ozs7OztJQUdTLFFBQVEsQ0FBQyxHQUFXO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDeEIsSUFBSTs7OztRQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDYixNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNsRCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7OztJQUdTLG9CQUFvQjtRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU87Ozs7UUFBQyxDQUFDLENBQUMsRUFBRTtZQUMvQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDeEMsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7bUJBdENBLFNBQVMsU0FBQyxTQUFTOzs7Ozs7O0lBQXBCLDRCQUFtQzs7Ozs7SUFHbkMsZ0NBQWtCOzs7OztJQUVsQiwrQkFBeUI7Ozs7O0lBUWIsOEJBQXdCOzs7Ozs7SUFOcEMsa0RBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEZvcm0ge1xuICAvKiogQWNjZXNzIHRvIHRoZSBmb3JtIGVsZW1lbnRzIGZvciB2YWxpZGF0aW9uICovXG4gIEBWaWV3Q2hpbGQoJ2Zvcm1SZWYnKSBmb3JtOiBOZ0Zvcm07XG5cbiAgLyoqIERpc2FibGVzIGFsbCBpbnB1dHMgKHRvZG86IG5vdCBpbXBsZW1lbnRlZCkgKi9cbiAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gIC8qKiBTaG93IG9yIGhpZGUgdGhlIGxvYWRpbmcgc3Bpbm5lciBhcyByZXF1aXJlZCwgc2hvdWxkIGJlIHBhc3NlZCB0byBmb3JtIGFjdGlvbiBiYXIuICovXG4gIGxvYWRpbmc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgLyoqIFdoYXQgaGFwcGVucyB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgY29udGludWUgYnV0dG9uLiBHZW5lcmFsbHkgbmF2aWdhdGluZyB0byBhbm90aGVyIHBhZ2UuICovXG4gIGFic3RyYWN0IGNvbnRpbnVlKCk6IHZvaWQ7XG5cblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByb3V0ZXI6IFJvdXRlcikge1xuICAgIHRoaXMucm91dGVyID0gcm91dGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIENvbnRpbnVlIGJ1dHRvbiBpcyBkaXNhYmxlZCBvbiB0aGUgZm9ybSBhY3Rpb24gYmFyXG4gICAqL1xuICBjYW5Db250aW51ZSgpOiBib29sZWFuIHtcbiAgICAvLyBSZXR1cm5zIHRydWUgaWYgZm9ybSBpcyB2YWxpZFxuICAgIHJldHVybiB0aGlzLmZvcm0udmFsaWQ7XG4gIH1cblxuICAvKiogTmF2aWdhdGVzIHRvIGEgcm91dGUgdGhlbiBhdXRvbWF0aWNhbGx5IHNjcm9sbHMgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZS4gKi9cbiAgcHJvdGVjdGVkIG5hdmlnYXRlKHVybDogc3RyaW5nKSB7XG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW3VybF0pXG4gICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oeyB0b3A6IDAsIGJlaGF2aW9yOiAnc21vb3RoJyB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqIFJ1bnMgdGhlIGFuZ3VsYXIgJ21hcmtBc1RvdWNoZWQoKScgb24gYWxsIGZvcm0gaW5wdXRzLiAqL1xuICBwcm90ZWN0ZWQgbWFya0FsbElucHV0c1RvdWNoZWQoKTogdm9pZCB7XG4gICAgT2JqZWN0LmtleXModGhpcy5mb3JtLmZvcm0uY29udHJvbHMpLmZvckVhY2goeCA9PiB7XG4gICAgICB0aGlzLmZvcm0uZm9ybS5nZXQoeCkubWFya0FzVG91Y2hlZCgpO1xuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==