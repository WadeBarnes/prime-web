/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// List of constants used for masking inputs
import { EventEmitter, Input, Output } from '@angular/core';
import { Base } from './base';
/** @type {?} */
export const LETTER = /[A-Z]/i;
// Ignore case here, then upperCase it via pipe.
/** @type {?} */
export const NUMBER = /\d/;
/** @type {?} */
export const SPACE = ' ';
export class MaskModel extends Base {
    constructor() {
        super();
        this.valueChange = new EventEmitter();
        this.disabled = false;
        this.required = true;
    }
    /**
     * Upper cases letters in string
     * @param {?} text
     * @return {?}
     */
    upperCasePipe(text) {
        return text.toUpperCase();
    }
    /**
     * Updates the value
     * @param {?} value
     * @return {?}
     */
    onUpdate(value) {
        // Emit value without spaces
        this.valueChange.emit(value);
    }
}
MaskModel.propDecorators = {
    value: [{ type: Input }],
    valueChange: [{ type: Output }],
    disabled: [{ type: Input }],
    required: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MaskModel.prototype.value;
    /** @type {?} */
    MaskModel.prototype.valueChange;
    /** @type {?} */
    MaskModel.prototype.disabled;
    /** @type {?} */
    MaskModel.prototype.required;
    /** @type {?} */
    MaskModel.prototype.mask;
    /** @type {?} */
    MaskModel.prototype.placeholder;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21vaC1jb21tb24tbGliL21vZGVscy8iLCJzb3VyY2VzIjpbIm1hc2subW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUMsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQzs7QUFFOUIsTUFBTSxPQUFPLE1BQU0sR0FBRyxRQUFROzs7QUFDOUIsTUFBTSxPQUFPLE1BQU0sR0FBRyxJQUFJOztBQUMxQixNQUFNLE9BQU8sS0FBSyxHQUFHLEdBQUc7QUFFeEIsTUFBTSxPQUFPLFNBQVUsU0FBUSxJQUFJO0lBV2pDO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFUQSxnQkFBVyxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO1FBRWhFLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFDMUIsYUFBUSxHQUFZLElBQUksQ0FBQztJQU9sQyxDQUFDOzs7Ozs7SUFLRCxhQUFhLENBQUMsSUFBWTtRQUN4QixPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7Ozs7SUFLRCxRQUFRLENBQUUsS0FBYTtRQUVyQiw0QkFBNEI7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUUsS0FBSyxDQUFFLENBQUM7SUFDakMsQ0FBQzs7O29CQTNCQSxLQUFLOzBCQUNMLE1BQU07dUJBRU4sS0FBSzt1QkFDTCxLQUFLOzs7O0lBSk4sMEJBQXVCOztJQUN2QixnQ0FBeUU7O0lBRXpFLDZCQUFtQzs7SUFDbkMsNkJBQWtDOztJQUVsQyx5QkFBaUI7O0lBQ2pCLGdDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpc3Qgb2YgY29uc3RhbnRzIHVzZWQgZm9yIG1hc2tpbmcgaW5wdXRzXG5pbXBvcnQge0V2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlIH0gZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGNvbnN0IExFVFRFUiA9IC9bQS1aXS9pOyAvLyBJZ25vcmUgY2FzZSBoZXJlLCB0aGVuIHVwcGVyQ2FzZSBpdCB2aWEgcGlwZS5cbmV4cG9ydCBjb25zdCBOVU1CRVIgPSAvXFxkLztcbmV4cG9ydCBjb25zdCBTUEFDRSA9ICcgJztcblxuZXhwb3J0IGNsYXNzIE1hc2tNb2RlbCBleHRlbmRzIEJhc2Uge1xuXG4gIEBJbnB1dCgpIHZhbHVlOiBzdHJpbmc7XG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSByZXF1aXJlZDogYm9vbGVhbiA9IHRydWU7XG5cbiAgcHVibGljIG1hc2s6IGFueTtcbiAgcHVibGljIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcHBlciBjYXNlcyBsZXR0ZXJzIGluIHN0cmluZ1xuICAgKi9cbiAgdXBwZXJDYXNlUGlwZSh0ZXh0OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGV4dC50b1VwcGVyQ2FzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHZhbHVlXG4gICAqL1xuICBvblVwZGF0ZSggdmFsdWU6IHN0cmluZyApIHtcblxuICAgIC8vIEVtaXQgdmFsdWUgd2l0aG91dCBzcGFjZXNcbiAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQoIHZhbHVlICk7XG4gIH1cbn1cbiJdfQ==