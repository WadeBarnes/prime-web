/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// List of constants used for masking inputs
import { EventEmitter, Input, Output } from '@angular/core';
import { Base } from './base';
/** @type {?} */
export const LETTER = /[A-Z]/i;
// Ignore case here, then upperCase it via pipe.
/** @type {?} */
export const NUMBER = /\d/;
/** @type {?} */
export const SPACE = ' ';
export class MaskModel extends Base {
    constructor() {
        super();
        this.valueChange = new EventEmitter();
        this.disabled = false;
        this.required = true;
    }
    /**
     * Upper cases letters in string
     * @param {?} text
     * @return {?}
     */
    upperCasePipe(text) {
        return text.toUpperCase();
    }
    /**
     * Updates the value
     * @param {?} value
     * @return {?}
     */
    onUpdate(value) {
        // Emit value without spaces
        this.valueChange.emit(value);
    }
}
MaskModel.propDecorators = {
    value: [{ type: Input }],
    valueChange: [{ type: Output }],
    disabled: [{ type: Input }],
    required: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MaskModel.prototype.value;
    /** @type {?} */
    MaskModel.prototype.valueChange;
    /** @type {?} */
    MaskModel.prototype.disabled;
    /** @type {?} */
    MaskModel.prototype.required;
    /** @type {?} */
    MaskModel.prototype.mask;
    /** @type {?} */
    MaskModel.prototype.placeholder;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21vaC1jb21tb24tbGliLyIsInNvdXJjZXMiOlsibW9kZWxzL3NyYy9tYXNrLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFDLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7O0FBRTlCLE1BQU0sT0FBTyxNQUFNLEdBQUcsUUFBUTs7O0FBQzlCLE1BQU0sT0FBTyxNQUFNLEdBQUcsSUFBSTs7QUFDMUIsTUFBTSxPQUFPLEtBQUssR0FBRyxHQUFHO0FBRXhCLE1BQU0sT0FBTyxTQUFVLFNBQVEsSUFBSTtJQVdqQztRQUNFLEtBQUssRUFBRSxDQUFDO1FBVEEsZ0JBQVcsR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUVoRSxhQUFRLEdBQVksS0FBSyxDQUFDO1FBQzFCLGFBQVEsR0FBWSxJQUFJLENBQUM7SUFPbEMsQ0FBQzs7Ozs7O0lBS0QsYUFBYSxDQUFDLElBQVk7UUFDeEIsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7Ozs7O0lBS0QsUUFBUSxDQUFFLEtBQWE7UUFFckIsNEJBQTRCO1FBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFFLEtBQUssQ0FBRSxDQUFDO0lBQ2pDLENBQUM7OztvQkEzQkEsS0FBSzswQkFDTCxNQUFNO3VCQUVOLEtBQUs7dUJBQ0wsS0FBSzs7OztJQUpOLDBCQUF1Qjs7SUFDdkIsZ0NBQXlFOztJQUV6RSw2QkFBbUM7O0lBQ25DLDZCQUFrQzs7SUFFbEMseUJBQWlCOztJQUNqQixnQ0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaXN0IG9mIGNvbnN0YW50cyB1c2VkIGZvciBtYXNraW5nIGlucHV0c1xuaW1wb3J0IHtFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZSB9IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBjb25zdCBMRVRURVIgPSAvW0EtWl0vaTsgLy8gSWdub3JlIGNhc2UgaGVyZSwgdGhlbiB1cHBlckNhc2UgaXQgdmlhIHBpcGUuXG5leHBvcnQgY29uc3QgTlVNQkVSID0gL1xcZC87XG5leHBvcnQgY29uc3QgU1BBQ0UgPSAnICc7XG5cbmV4cG9ydCBjbGFzcyBNYXNrTW9kZWwgZXh0ZW5kcyBCYXNlIHtcblxuICBASW5wdXQoKSB2YWx1ZTogc3RyaW5nO1xuICBAT3V0cHV0KCkgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgcmVxdWlyZWQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIHB1YmxpYyBtYXNrOiBhbnk7XG4gIHB1YmxpYyBwbGFjZWhvbGRlcjogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogVXBwZXIgY2FzZXMgbGV0dGVycyBpbiBzdHJpbmdcbiAgICovXG4gIHVwcGVyQ2FzZVBpcGUodGV4dDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRleHQudG9VcHBlckNhc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSB2YWx1ZVxuICAgKi9cbiAgb25VcGRhdGUoIHZhbHVlOiBzdHJpbmcgKSB7XG5cbiAgICAvLyBFbWl0IHZhbHVlIHdpdGhvdXQgc3BhY2VzXG4gICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KCB2YWx1ZSApO1xuICB9XG59XG4iXX0=