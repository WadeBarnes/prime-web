/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as moment_ from 'moment';
import { Base } from './base';
/** @type {?} */
const moment = moment_;
/**
 * Person, each project can extend this person class
 * NPM package dependencies:
 *  a) moment
 */
export class Person extends Base {
    constructor() {
        super(...arguments);
        /**
         * Format to display birthdate
         */
        this.dobFormat = 'YYYY/MM/DD';
        // Initialize dob to nulls
        this.dateOfBirth = { year: null, month: null, day: null };
    }
    /**
     * Returns DoB in YYYYMMDD format, used by API.
     * @return {?}
     */
    get dateOfBirthShort() {
        return this.isDobEmpty() ? null :
            moment({
                year: this.dateOfBirth.year,
                month: this.dateOfBirth.month - 1,
                day: this.dateOfBirth.day
            }).format('YYYYMMDD');
    }
    /**
     * Returns DoB in dobFormat (default: YYYY/MM/DD), for display purposes
     * @return {?}
     */
    get formatDateOfBirth() {
        return this.isDobEmpty() ? null :
            moment({
                year: this.dateOfBirth.year,
                month: this.dateOfBirth.month - 1,
                day: this.dateOfBirth.day
            }).format(this.dobFormat);
    }
    /**
     * Indicates whether or not the date of birth is empty
     * @return {?}
     */
    isDobEmpty() {
        return Object.keys(this.dateOfBirth)
            .map((/**
         * @param {?} key
         * @return {?}
         */
        key => this.dateOfBirth[key]))
            .filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x)) // Filter out null/undefined
            .length !== 3;
    }
    /**
     * Concatenates the first and last name together
     * @return {?}
     */
    get name() {
        /** @type {?} */
        let _name = null;
        if (this.firstName) {
            _name = this.firstName;
        }
        if (this.lastName) {
            _name = _name ? _name.concat(' ' + this.lastName) : this.lastName;
        }
        return _name;
    }
    /**
     * Sets the full name for the person (first, middle and last names)
     * NOTE: Just for development with dummy data and unit tests
     * @param {?} fullName
     * @return {?}
     */
    set name(fullName) {
        /** @type {?} */
        const names = fullName.split(' ');
        this.firstName = names[0];
        if (names.length === 2) {
            this.lastName = names[1];
        }
        else if (names.length === 3) {
            this.middleName = names[1];
            this.lastName = names[2];
        }
    }
    /**
     * Calculates the age from date of birth
     * @return {?}
     */
    getAge() {
        /** @type {?} */
        const dobDt = new Date(this.dateOfBirth.year, this.dateOfBirth.month, this.dateOfBirth.day);
        return Math.ceil(moment().diff(dobDt, 'year', true));
    }
    /* Copy function */
    /**
     * @param {?} object
     * @return {?}
     */
    copy(object) {
        this.firstName = object.firstName;
        this.middleName = object.middleName;
        this.lastName = object.lastName;
        this.dateOfBirth.month = object.dateOfBirth.month;
        this.dateOfBirth.day = object.dateOfBirth.day;
        this.dateOfBirth.year = object.dateOfBirth.year;
    }
}
if (false) {
    /** @type {?} */
    Person.prototype.firstName;
    /** @type {?} */
    Person.prototype.middleName;
    /** @type {?} */
    Person.prototype.lastName;
    /**
     * Format to display birthdate
     * @type {?}
     */
    Person.prototype.dobFormat;
    /** @type {?} */
    Person.prototype.dateOfBirth;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc29uLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbW9oLWNvbW1vbi1saWIvbW9kZWxzLyIsInNvdXJjZXMiOlsicGVyc29uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEtBQUssT0FBTyxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDOztNQUV4QixNQUFNLEdBQUcsT0FBTzs7Ozs7O0FBT3RCLE1BQU0sT0FBTyxNQUFPLFNBQVEsSUFBSTtJQUFoQzs7Ozs7UUFRUyxjQUFTLEdBQUcsWUFBWSxDQUFDOztRQUd6QixnQkFBVyxHQUFlLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQTZFMUUsQ0FBQzs7Ozs7SUExRUMsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdCLE1BQU0sQ0FBRTtnQkFDTixJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJO2dCQUMzQixLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsQ0FBQztnQkFDakMsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRzthQUMxQixDQUFDLENBQUMsTUFBTSxDQUFFLFVBQVUsQ0FBRSxDQUFDO0lBQzlCLENBQUM7Ozs7O0lBR0QsSUFBSSxpQkFBaUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdCLE1BQU0sQ0FBRTtnQkFDTixJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJO2dCQUMzQixLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsQ0FBQztnQkFDakMsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRzthQUMxQixDQUFDLENBQUMsTUFBTSxDQUFFLElBQUksQ0FBQyxTQUFTLENBQUUsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUdELFVBQVU7UUFDUixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBRTthQUNqQyxHQUFHOzs7O1FBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2FBQ25DLE1BQU07Ozs7UUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLDRCQUE0QjthQUM3QyxNQUFNLEtBQUssQ0FBQyxDQUFDO0lBQ3BCLENBQUM7Ozs7O0lBR0QsSUFBSSxJQUFJOztZQUNGLEtBQUssR0FBRyxJQUFJO1FBRWhCLElBQUssSUFBSSxDQUFDLFNBQVMsRUFBRztZQUNwQixLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUN4QjtRQUVELElBQUssSUFBSSxDQUFDLFFBQVEsRUFBRztZQUNuQixLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDckU7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7Ozs7SUFNRCxJQUFJLElBQUksQ0FBRSxRQUFnQjs7Y0FFbEIsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUUsR0FBRyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTFCLElBQUssS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUc7WUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDMUI7YUFBTSxJQUFLLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFHO1lBQy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQzs7Ozs7SUFHRCxNQUFNOztjQUNFLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBRTtRQUM3RixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUUsTUFBTSxFQUFHLENBQUMsSUFBSSxDQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFFLENBQUUsQ0FBQztJQUM1RCxDQUFDOzs7Ozs7SUFHRCxJQUFJLENBQUUsTUFBYztRQUNsQixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztRQUNsRCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztRQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztJQUNsRCxDQUFDO0NBQ0Y7OztJQXJGQywyQkFBeUI7O0lBQ3pCLDRCQUEwQjs7SUFDMUIsMEJBQXdCOzs7OztJQUd4QiwyQkFBZ0M7O0lBR2hDLDZCQUF3RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG1vbWVudF8gZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IEJhc2UgfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgU2ltcGxlRGF0ZSB9IGZyb20gJy4vc2ltcGxlLWRhdGUuaW50ZXJmYWNlJztcbmNvbnN0IG1vbWVudCA9IG1vbWVudF87XG5cbi8qKlxuICogUGVyc29uLCBlYWNoIHByb2plY3QgY2FuIGV4dGVuZCB0aGlzIHBlcnNvbiBjbGFzc1xuICogTlBNIHBhY2thZ2UgZGVwZW5kZW5jaWVzOlxuICogIGEpIG1vbWVudFxuICovXG5leHBvcnQgY2xhc3MgUGVyc29uIGV4dGVuZHMgQmFzZSB7XG5cbiAgLy8gUGFydHMgb2YgYSBwZXJzb24ncyBuYW1lXG4gIHB1YmxpYyBmaXJzdE5hbWU6IHN0cmluZztcbiAgcHVibGljIG1pZGRsZU5hbWU6IHN0cmluZztcbiAgcHVibGljIGxhc3ROYW1lOiBzdHJpbmc7XG5cbiAgLyoqIEZvcm1hdCB0byBkaXNwbGF5IGJpcnRoZGF0ZSAqL1xuICBwdWJsaWMgZG9iRm9ybWF0ID0gJ1lZWVkvTU0vREQnO1xuXG4gIC8vIEluaXRpYWxpemUgZG9iIHRvIG51bGxzXG4gIHB1YmxpYyBkYXRlT2ZCaXJ0aDogU2ltcGxlRGF0ZSA9IHsgeWVhcjogbnVsbCwgbW9udGg6IG51bGwsIGRheTogbnVsbCB9O1xuXG4gIC8qKiBSZXR1cm5zIERvQiBpbiBZWVlZTU1ERCBmb3JtYXQsIHVzZWQgYnkgQVBJLiAqL1xuICBnZXQgZGF0ZU9mQmlydGhTaG9ydCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmlzRG9iRW1wdHkoKSA/IG51bGwgOlxuICAgICAgICBtb21lbnQoIHtcbiAgICAgICAgICB5ZWFyOiB0aGlzLmRhdGVPZkJpcnRoLnllYXIsXG4gICAgICAgICAgbW9udGg6IHRoaXMuZGF0ZU9mQmlydGgubW9udGggLSAxLFxuICAgICAgICAgIGRheTogdGhpcy5kYXRlT2ZCaXJ0aC5kYXlcbiAgICAgICAgfSkuZm9ybWF0KCAnWVlZWU1NREQnICk7XG4gIH1cblxuICAvKiogUmV0dXJucyBEb0IgaW4gZG9iRm9ybWF0IChkZWZhdWx0OiBZWVlZL01NL0REKSwgZm9yIGRpc3BsYXkgcHVycG9zZXMgKi9cbiAgZ2V0IGZvcm1hdERhdGVPZkJpcnRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaXNEb2JFbXB0eSgpID8gbnVsbCA6XG4gICAgICAgIG1vbWVudCgge1xuICAgICAgICAgIHllYXI6IHRoaXMuZGF0ZU9mQmlydGgueWVhcixcbiAgICAgICAgICBtb250aDogdGhpcy5kYXRlT2ZCaXJ0aC5tb250aCAtIDEsXG4gICAgICAgICAgZGF5OiB0aGlzLmRhdGVPZkJpcnRoLmRheVxuICAgICAgICB9KS5mb3JtYXQoIHRoaXMuZG9iRm9ybWF0ICk7XG4gIH1cblxuICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRoZSBkYXRlIG9mIGJpcnRoIGlzIGVtcHR5ICovXG4gIGlzRG9iRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKCB0aGlzLmRhdGVPZkJpcnRoIClcbiAgICAgICAgLm1hcCgga2V5ID0+IHRoaXMuZGF0ZU9mQmlydGhba2V5XSApXG4gICAgICAgIC5maWx0ZXIoIHggPT4geCApIC8vIEZpbHRlciBvdXQgbnVsbC91bmRlZmluZWRcbiAgICAgICAgLmxlbmd0aCAhPT0gMztcbiAgfVxuXG4gIC8qKiBDb25jYXRlbmF0ZXMgdGhlIGZpcnN0IGFuZCBsYXN0IG5hbWUgdG9nZXRoZXIgKi9cbiAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICBsZXQgX25hbWUgPSBudWxsO1xuXG4gICAgaWYgKCB0aGlzLmZpcnN0TmFtZSApIHtcbiAgICAgIF9uYW1lID0gdGhpcy5maXJzdE5hbWU7XG4gICAgfVxuXG4gICAgaWYgKCB0aGlzLmxhc3ROYW1lICkge1xuICAgICAgX25hbWUgPSBfbmFtZSA/IF9uYW1lLmNvbmNhdCggJyAnICsgdGhpcy5sYXN0TmFtZSApIDogdGhpcy5sYXN0TmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX25hbWU7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZnVsbCBuYW1lIGZvciB0aGUgcGVyc29uIChmaXJzdCwgbWlkZGxlIGFuZCBsYXN0IG5hbWVzKVxuICAgKiBOT1RFOiBKdXN0IGZvciBkZXZlbG9wbWVudCB3aXRoIGR1bW15IGRhdGEgYW5kIHVuaXQgdGVzdHNcbiAgICovXG4gIHNldCBuYW1lKCBmdWxsTmFtZTogc3RyaW5nICkge1xuXG4gICAgY29uc3QgbmFtZXMgPSBmdWxsTmFtZS5zcGxpdCggJyAnKSA7XG4gICAgdGhpcy5maXJzdE5hbWUgPSBuYW1lc1swXTtcblxuICAgIGlmICggbmFtZXMubGVuZ3RoID09PSAyICkge1xuICAgICAgdGhpcy5sYXN0TmFtZSA9IG5hbWVzWzFdO1xuICAgIH0gZWxzZSBpZiAoIG5hbWVzLmxlbmd0aCA9PT0gMyApIHtcbiAgICAgIHRoaXMubWlkZGxlTmFtZSA9IG5hbWVzWzFdO1xuICAgICAgdGhpcy5sYXN0TmFtZSA9IG5hbWVzWzJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBDYWxjdWxhdGVzIHRoZSBhZ2UgZnJvbSBkYXRlIG9mIGJpcnRoICovXG4gIGdldEFnZSgpOiBOdW1iZXIge1xuICAgIGNvbnN0IGRvYkR0ID0gbmV3IERhdGUoIHRoaXMuZGF0ZU9mQmlydGgueWVhciwgdGhpcy5kYXRlT2ZCaXJ0aC5tb250aCwgdGhpcy5kYXRlT2ZCaXJ0aC5kYXkgKTtcbiAgICByZXR1cm4gTWF0aC5jZWlsKCBtb21lbnQoICkuZGlmZiggZG9iRHQsICd5ZWFyJywgdHJ1ZSApICk7XG4gIH1cblxuICAvKiBDb3B5IGZ1bmN0aW9uICovXG4gIGNvcHkoIG9iamVjdDogUGVyc29uICkge1xuICAgIHRoaXMuZmlyc3ROYW1lID0gb2JqZWN0LmZpcnN0TmFtZTtcbiAgICB0aGlzLm1pZGRsZU5hbWUgPSBvYmplY3QubWlkZGxlTmFtZTtcbiAgICB0aGlzLmxhc3ROYW1lID0gb2JqZWN0Lmxhc3ROYW1lO1xuICAgIHRoaXMuZGF0ZU9mQmlydGgubW9udGggPSBvYmplY3QuZGF0ZU9mQmlydGgubW9udGg7XG4gICAgdGhpcy5kYXRlT2ZCaXJ0aC5kYXkgPSBvYmplY3QuZGF0ZU9mQmlydGguZGF5O1xuICAgIHRoaXMuZGF0ZU9mQmlydGgueWVhciA9IG9iamVjdC5kYXRlT2ZCaXJ0aC55ZWFyO1xuICB9XG59XG4iXX0=