/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
// payload returned from the server
export class ServerPayload {
}
ServerPayload.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    ServerPayload.prototype.nonce;
    /** @type {?} */
    ServerPayload.prototype.captcha;
    /** @type {?} */
    ServerPayload.prototype.validation;
    /** @type {?} */
    ServerPayload.prototype.expiry;
}
export class CaptchaDataService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    // private http: Http) { }
    /**
     * @param {?} apiBaseUrl
     * @param {?} nonce
     * @return {?}
     */
    fetchData(apiBaseUrl, nonce) {
        return this.httpClient
            .post(apiBaseUrl + '/captcha', { nonce: nonce }, { observe: 'response' });
    }
    /**
     * @param {?} apiBaseUrl
     * @param {?} nonce
     * @param {?} answer
     * @param {?} encryptedAnswer
     * @return {?}
     */
    verifyCaptcha(apiBaseUrl, nonce, answer, encryptedAnswer) {
        return this.httpClient
            .post(apiBaseUrl + '/verify/captcha', { nonce: nonce, answer: answer, validation: encryptedAnswer }, { observe: 'response' });
    }
    /**
     * @param {?} apiBaseUrl
     * @param {?} validation
     * @param {?=} translation
     * @return {?}
     */
    fetchAudio(apiBaseUrl, validation, translation) {
        /** @type {?} */
        const payload = { validation: validation };
        if (translation) {
            payload.translation = translation;
        }
        return this.httpClient
            .post(apiBaseUrl + '/captcha/audio', payload, { observe: 'response' });
    }
}
CaptchaDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CaptchaDataService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CaptchaDataService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwdGNoYS1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tb2gtY29tbW9uLWxpYi9jYXB0Y2hhLyIsInNvdXJjZXMiOlsiY2FwdGNoYS1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxzQkFBc0IsQ0FBQzs7QUFNaEUsTUFBTSxPQUFPLGFBQWE7OztZQUR6QixVQUFVOzs7O0lBRVAsOEJBQWM7O0lBQ2QsZ0NBQWdCOztJQUNoQixtQ0FBbUI7O0lBQ25CLCtCQUFlOztBQUluQixNQUFNLE9BQU8sa0JBQWtCOzs7O0lBRTNCLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFBSSxDQUFDOzs7Ozs7O0lBR3hDLFNBQVMsQ0FBQyxVQUFrQixFQUFFLEtBQWE7UUFDOUMsT0FBTyxJQUFJLENBQUMsVUFBVTthQUNqQixJQUFJLENBQ0QsVUFBVSxHQUFHLFVBQVUsRUFDdkIsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQ2hCLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Ozs7Ozs7SUFFTSxhQUFhLENBQUMsVUFBa0IsRUFDZixLQUFhLEVBQ2IsTUFBYyxFQUNkLGVBQXVCO1FBQzNDLE9BQU8sSUFBSSxDQUFDLFVBQVU7YUFDakIsSUFBSSxDQUNELFVBQVUsR0FBRyxpQkFBaUIsRUFDOUIsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxFQUM3RCxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7Ozs7SUFFTSxVQUFVLENBQUMsVUFBa0IsRUFBRSxVQUFrQixFQUFFLFdBQW9COztjQUNwRSxPQUFPLEdBQVEsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFO1FBQy9DLElBQUksV0FBVyxFQUFFO1lBQ2IsT0FBTyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7U0FDckM7UUFDRCxPQUFPLElBQUksQ0FBQyxVQUFVO2FBQ2pCLElBQUksQ0FDRCxVQUFVLEdBQUcsZ0JBQWdCLEVBQzdCLE9BQU8sRUFDUCxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7OztZQW5DSixVQUFVOzs7O1lBYkYsVUFBVTs7Ozs7OztJQWdCSCx3Q0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG4vLyBpbXBvcnQgeyBIdHRwLCBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vLyBwYXlsb2FkIHJldHVybmVkIGZyb20gdGhlIHNlcnZlclxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlcnZlclBheWxvYWQge1xuICAgIG5vbmNlOiBzdHJpbmc7XG4gICAgY2FwdGNoYTogc3RyaW5nO1xuICAgIHZhbGlkYXRpb246IHN0cmluZztcbiAgICBleHBpcnk6IHN0cmluZztcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhcHRjaGFEYXRhU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHsgfVxuICAgIC8vIHByaXZhdGUgaHR0cDogSHR0cCkgeyB9XG5cbiAgICBwdWJsaWMgZmV0Y2hEYXRhKGFwaUJhc2VVcmw6IHN0cmluZywgbm9uY2U6IHN0cmluZyk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPFNlcnZlclBheWxvYWQ+PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnRcbiAgICAgICAgICAgIC5wb3N0PFNlcnZlclBheWxvYWQ+KFxuICAgICAgICAgICAgICAgIGFwaUJhc2VVcmwgKyAnL2NhcHRjaGEnLFxuICAgICAgICAgICAgICAgIHsgbm9uY2U6IG5vbmNlIH0sXG4gICAgICAgICAgICAgICAgeyBvYnNlcnZlOiAncmVzcG9uc2UnIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyB2ZXJpZnlDYXB0Y2hhKGFwaUJhc2VVcmw6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub25jZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcjogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY3J5cHRlZEFuc3dlcjogc3RyaW5nKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8U2VydmVyUGF5bG9hZD4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudFxuICAgICAgICAgICAgLnBvc3Q8U2VydmVyUGF5bG9hZD4oXG4gICAgICAgICAgICAgICAgYXBpQmFzZVVybCArICcvdmVyaWZ5L2NhcHRjaGEnLFxuICAgICAgICAgICAgICAgIHsgbm9uY2U6IG5vbmNlLCBhbnN3ZXI6IGFuc3dlciwgdmFsaWRhdGlvbjogZW5jcnlwdGVkQW5zd2VyIH0sXG4gICAgICAgICAgICAgICAgeyBvYnNlcnZlOiAncmVzcG9uc2UnIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBmZXRjaEF1ZGlvKGFwaUJhc2VVcmw6IHN0cmluZywgdmFsaWRhdGlvbjogc3RyaW5nLCB0cmFuc2xhdGlvbj86IHN0cmluZykge1xuICAgICAgICBjb25zdCBwYXlsb2FkOiBhbnkgPSB7IHZhbGlkYXRpb246IHZhbGlkYXRpb24gfTtcbiAgICAgICAgaWYgKHRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgICBwYXlsb2FkLnRyYW5zbGF0aW9uID0gdHJhbnNsYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudFxuICAgICAgICAgICAgLnBvc3Q8c3RyaW5nPihcbiAgICAgICAgICAgICAgICBhcGlCYXNlVXJsICsgJy9jYXB0Y2hhL2F1ZGlvJyxcbiAgICAgICAgICAgICAgICBwYXlsb2FkLFxuICAgICAgICAgICAgICAgIHsgb2JzZXJ2ZTogJ3Jlc3BvbnNlJyB9KTtcbiAgICB9XG4gICAgLypcbiAgICAgIGZldGNoRGF0YShhcGlCYXNlVXJsOiBzdHJpbmcsIG5vbmNlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChhcGlCYXNlVXJsICsgJy9jYXB0Y2hhJywge25vbmNlOiBub25jZX0sIHt9KTtcbiAgICAgIH1cblxuICAgICAgdmVyaWZ5Q2FwdGNoYShhcGlCYXNlVXJsOiBzdHJpbmcsIG5vbmNlOiBzdHJpbmcsIGFuc3dlcjogc3RyaW5nLCBlbmNyeXB0ZWRBbnN3ZXI6IHN0cmluZyk6IE9ic2VydmFibGU8UmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KGFwaUJhc2VVcmwgKyAnL3ZlcmlmeS9jYXB0Y2hhJywge25vbmNlOiBub25jZSwgYW5zd2VyOiBhbnN3ZXIsIHZhbGlkYXRpb246IGVuY3J5cHRlZEFuc3dlcn0sIHt9KTtcbiAgICAgIH1cblxuICAgICAgZmV0Y2hBdWRpbyhhcGlCYXNlVXJsOiBzdHJpbmcsIHZhbGlkYXRpb246IHN0cmluZyk6IE9ic2VydmFibGU8UmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KGFwaUJhc2VVcmwgKyAnL2NhcHRjaGEvYXVkaW8nLCB7dmFsaWRhdGlvbjogdmFsaWRhdGlvbn0sIHt9KTtcbiAgICAgIH1cbiAgICAqL1xufVxuIl19