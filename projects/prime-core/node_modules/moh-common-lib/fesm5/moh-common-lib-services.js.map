{"version":3,"file":"moh-common-lib-services.js.map","sources":["ng://moh-common-lib/services/abstract-api-service.ts","ng://moh-common-lib/services/geocoder.service.ts","ng://moh-common-lib/services/logger.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\n\n/**\n * Abstract class for HTTP Service\n */\nexport abstract class AbstractHttpService {\n\n  protected logHTTPRequestsToConsole: boolean = false;\n\n  constructor(protected http: HttpClient) {}\n\n  /** The headers to send along with every GET and POST. */\n  protected abstract _headers: HttpHeaders;\n\n  /**\n   * Makes a GET request to the specified URL, using headers and HTTP options specified in their respective methods.\n   * @param url Target URL to make the GET request\n   */\n  protected get<T>(url, queryParams?: HttpParams): Observable<T> {\n    /** The HTTP request observer with always on error handling */\n    const httpOpts = this.httpOptions;\n    httpOpts.params = queryParams ? queryParams : undefined;\n    const observable = this.http.get(url, httpOpts);\n    return this.setupRequest(observable);\n  }\n\n  protected post<T>(url, body): Observable<T> {\n    if (this.logHTTPRequestsToConsole) {\n      console.log( 'Post Request: ', body );\n    }\n    const observable = this.http.post(url, body, this.httpOptions);\n    return this.setupRequest(observable);\n  }\n\n  protected setupRequest<T>(observable: Observable<any> ): Observable<T> {\n    // All failed requests should trigger the abstract method handleError\n    observable = observable.pipe(catchError(this.handleError.bind(this)));\n    // Optionally add console logging\n    if (this.logHTTPRequestsToConsole) {\n      observable = observable.pipe(tap(\n        data => console.log('HTTP Success: ', data),\n        error => console.log('HTTP Error: ', error)\n      ));\n    }\n    return observable;\n  }\n\n  /** The HttpOptions object that Angular takes for GET and POST requests. Used in every HTTP request from this service. */\n  protected get httpOptions(): {headers: HttpHeaders, params?: HttpParams} {\n    return {\n      headers: this._headers\n    };\n  }\n\n  /** Handles all failed requests that throw either a server error (400/500) or a client error (e.g. lost internet). */\n  protected abstract handleError(error: HttpErrorResponse);\n}\n","import { Injectable } from '@angular/core';\nimport { AbstractHttpService } from './abstract-api-service';\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\n\nexport interface GeoAddressResult {\n    /** String from the API that includes street, city, province, and country. */\n    fullAddress: string;\n    city: string;\n    street: string;\n    // Set to defaults in response\n    country: string;\n    province: string;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class GeocoderService extends AbstractHttpService {\n\n    protected _headers: HttpHeaders = new HttpHeaders();\n    private BASE_URL = 'https://geocoder.api.gov.bc.ca';\n    private ADDRESS_URL = `${this.BASE_URL}/addresses.json?`;\n\n\n    /** Defaults for service */\n    public defaultCountry: string = 'Canada';\n    public defaultProv: string = 'British Columbia';\n\n    constructor(protected http: HttpClient) {\n        super(http);\n    }\n\n\n    // https://geocoder.api.gov.bc.ca/addresses.json?minScore=50&maxResults=5&echo=false&brief=true&autoComplete=true&addressString=784+Hock\n    lookup(address: string): Observable<GeoAddressResult[]> {\n        const params = new HttpParams()\n            .set('minScore', '50')\n            .set('maxResults', '10')\n            .set('echo', 'false')\n            .set('brief', 'false') // API splits address string up into sub-attributes, like city  / street name\n            .set('autoComplete', 'true')\n            .set('matchPrecisionNot', 'LOCALITY,STREET,BLOCK,INTERSECTION')\n            .set('addressString', address);\n\n        return this.get(this.ADDRESS_URL, params).pipe(map(this.processResponse));\n    }\n\n    /**\n     * Formats the response from ADDRESS_URL, trimming irrelevant fields.\n     *\n     * This works for other requests for the same API too, however it may error\n     * out on some items if matchPrecisionNot is not set.\n     *\n     * @param obj The response from ADDRESS_URL\n     */\n    private processResponse(obj): GeoAddressResult[] {\n        return obj.features.map(feature => {\n            const props = feature.properties;\n            const city = props.localityName;\n            // We get street just by trimming everything before city, more\n            // stable than looking for commas, etc.\n            const cityIndex = props.fullAddress.indexOf(`, ${city}`);\n            const street = props.fullAddress.slice(0, cityIndex);\n            return {\n                fullAddress: props.fullAddress,\n                city,\n                street,\n                country: this.defaultCountry, // Default to Canada\n                province: this.defaultProv    // Default to BC\n            };\n        });\n    }\n\n    protected handleError(error: HttpErrorResponse) {\n        console.error('GeoCoder network error', { error });\n        return throwError('Geocoder error');\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { AbstractHttpService } from './abstract-api-service';\nimport { throwError } from 'rxjs';\nimport * as moment_ from 'moment';\nconst moment = moment_;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommonLogger extends AbstractHttpService {\n  /**\n   * The HTTP Headers which go with each request.  These MUST be set if you are\n   * using the logger.  Fields include:\n   *\n   * - program (REQUIRED, the application wide code)\n   * - applicationId (REQUIRED, like sessionId)\n   * - request_method (REQUIRED, 'POST')\n   * - logsource: (REQUIRED, window.location.hostname)\n   * - http_x_forwarded_host (REQUIRED, window.location.hostname)\n   *\n   */\n  protected _headers: HttpHeaders = new HttpHeaders({\n    request_method: 'POST',\n    logsource: window.location.hostname,\n    http_x_forwarded_host: window.location.hostname\n  });\n\n  private url: string = null;\n\n  constructor(protected http: HttpClient) {\n    super(http);\n  }\n\n  set applicationId( id: string ) {\n    this._headers = this._headers.set( 'applicationId', id );\n  }\n\n  get applicationId() {\n    return this._headers.get( 'applicationId' );\n  }\n\n  set programName( name: string ) {\n    this._headers = this._headers.set( 'program', name );\n  }\n\n  get programName() {\n    return this._headers.get( 'name' );\n  }\n\n  setURL(newURL: string) {\n    this.url = newURL;\n  }\n\n  public log( message: any ) {\n    this._log( message as CommonLogMessage );\n  }\n\n  public logError( errorMessage: any ) {\n    this._logError( errorMessage as CommonLogMessage );\n  }\n\n  /**\n   * Log a message to Splunk. This is the main way to send logs and\n   * automatically includes meta-data. You do **not** need to subscribe to the\n   * response, as the service already does that. The input object must have an\n   * 'event' property set, everything else is optional.\n   *\n   * Example:\n   * ```\n    this.logService.log({\n       event: 'submission',\n       dateObj: new Date()\n    });\n    ```\n   * @param message A JavaScript object, nesting is fine, with `event` property\n   * set.\n   */\n  protected _log(message: CommonLogMessage) {\n    this.setSeverity(SeverityLevels.INFO);\n    return this._sendLog(message);\n  }\n\n  protected _logError(errorMessage: CommonLogMessage) {\n    this.setSeverity(SeverityLevels.ERROR);\n    return this._sendLog(errorMessage);\n  }\n\n  /**\n   * Log HTTP errors, e.g. when losing network connectivity or receiving an\n   * error response code.\n   */\n  public logHttpError(error: HttpErrorResponse) {\n    return this._logError({\n      event: 'error',\n      message: error.message,\n      errorName: error.name,\n      statusText: error.statusText\n    });\n  }\n\n  /**\n   * Internal method to send logs to Splunk, includes meta-data except that's\n   * consistent across all requests, but not specific values like severity\n   * level.\n   *\n   * @param message A JavaScript object or anything that can be toString()'d,\n   * like Date\n   */\n  private _sendLog(message: CommonLogMessage) {\n    // Update headers\n    this.setTimestamp();\n    this.setTags(message.event);\n\n    if (this.url === null) {\n        const msg = 'Unable to send logs as URL as not been set via setURL()';\n        console.error(msg);\n        return throwError(msg);\n    }\n\n    // Configure request\n    const body = { message: message };\n\n    // We call .subscribe() here because we don't care about the response and\n    // we want to ensure that we never forget to call subscribe.\n    return this.post(this.url, body).subscribe();\n  }\n\n  protected handleError(error: HttpErrorResponse) {\n    console.log('logService handleError()', error);\n    if (error.error instanceof ErrorEvent) {\n      // Client-side / network error occured\n      console.error('An error occured: ', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code\n      console.error(`Backend returned error code: ${error.status}.  Error body: ${error.error}`);\n    }\n\n    return throwError(error);\n  }\n\n  /**\n   * Overwrite the inherited httpOptions so we can set responseType to text.\n   * This updates Angular's parsing, and it won't error out due to the server\n   * not responding with JSON.\n   */\n  protected get httpOptions(): any {\n    return {\n      headers: this._headers,\n      responseType: 'text'\n    };\n  }\n\n  private setTimestamp() {\n    this._headers = this._headers.set('timestamp', moment().toISOString());\n  }\n\n  private setSeverity(severity: SeverityLevels) {\n    this._headers = this._headers.set('severity', severity);\n  }\n\n  /**\n   * The headers are easier to search in splunk, and we aren't using tags, so\n   * repurpose it to event type.\n   */\n  private setTags(message: string ) {\n    this._headers = this._headers.set('tags', message);\n  }\n\n}\n\nenum SeverityLevels {\n  INFO = 'info',\n  ERROR = 'error',\n}\n\nexport interface CommonLogMessage {\n  /** The type of event being logged. */\n  event: string; // Should be subclasses into multiple string literals\n  // We allow any other properties/values in the interface\n  [key: string]: any;\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
