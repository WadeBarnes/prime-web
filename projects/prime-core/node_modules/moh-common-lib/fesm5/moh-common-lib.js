import { CommonModule } from '@angular/common';
import * as zxcvbn_ from 'zxcvbn';
import * as moment_ from 'moment';
import { NgxMyDatePickerModule } from 'ngx-mydatepicker';
import { Observable, fromEvent, merge } from 'rxjs';
import { filter, map, flatMap, scan, delay, retryWhen } from 'rxjs/operators';
import { UUID } from 'angular2-uuid';
import { Router, NavigationEnd, RouterModule } from '@angular/router';
import * as loadImage_ from 'blueimp-load-image';
import * as sha1_ from 'sha1';
import * as PDFJS_ from 'pdfjs-dist';
import { ProgressbarModule, ModalModule } from 'ngx-bootstrap';
import { TextMaskModule } from 'angular2-text-mask';
import { ControlContainer, NgForm, NG_VALIDATORS, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { NgSelectModule } from '@ng-select/ng-select';
import { __extends, __spread } from 'tslib';
import { Component, Input, Output, EventEmitter, forwardRef, ViewEncapsulation, HostListener, ViewChild, ViewChildren, ChangeDetectionStrategy, ChangeDetectorRef, Directive, NgZone, ViewContainerRef, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * The base styles for a breadcrumb with slots for content to go.  If you need a
 * complex breadcrumb, the idea is you can extend this CoreBreadcrumb and use
 * the base styles.  There are 3 slots: left, center, and right - all are
 * optional and any configuration works. You select the slot by adding it as an
 * attribute to the top level elements inside of the breadcrumb element.
 *
 *   Example usage:
 *
 *   <common-core-breadcrumb>
 *    <div left>
 *      <a routerLink="/provisioner/">Dashboard</a> /
 *      <strong>Provision by {{ IS_SHOWING_PERSON ? "User" : "Site" }}</strong>
 *    </div>
 *    <div center></div>
 *    <div right></div>
 *   </common-core-breadcrumb>
 *
 * @export
 */
var CoreBreadcrumbComponent = /** @class */ (function () {
    function CoreBreadcrumbComponent() {
    }
    /**
     * @return {?}
     */
    CoreBreadcrumbComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    CoreBreadcrumbComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-core-breadcrumb',
                    template: "<nav class=\"breadcrumb d-flex justify-content-between horizontal-scroll\">\n    <ng-content select=\"[left]\"></ng-content>\n    <ng-content class='d-flex' select=\"[center]\"></ng-content>\n    <ng-content select=\"[right]\"></ng-content>\n</nav>\n",
                    styles: [".breadcrumb{display:flex;justify-content:space-between;background-color:transparent}@media (min-width:992px){.breadcrumb{flex-wrap:nowrap}}.horizontal-scroll{overflow-x:scroll;overflow-y:hidden}.horizontal-scroll::-webkit-scrollbar{background:0 0;height:5px}.horizontal-scroll::-webkit-scrollbar-thumb{background:#5475a7;border-radius:10px}"]
                }] }
    ];
    /** @nocollapse */
    CoreBreadcrumbComponent.ctorParameters = function () { return []; };
    return CoreBreadcrumbComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormActionBarComponent = /** @class */ (function () {
    function FormActionBarComponent() {
        this.submitLabel = 'Continue';
        this.canContinue = true;
        this.isLoading = false;
        this.defaultColor = true;
        this.btnClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    FormActionBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FormActionBarComponent.prototype.onClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (!this.isLoading && this.canContinue) {
            this.btnClick.emit($event);
        }
        $event.stopPropagation();
        return false;
    };
    FormActionBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-form-action-bar',
                    template: "<div class=\"form-action-bar form-bar\" [ngClass]=\"{disabled: !canContinue}\">\n    <button class=\"btn btn-lg {{defaultColor ? 'btn-primary' : 'btn-secondary' }} submit\"\n            (click)=\"onClick($event)\"\n            [ngClass]=\"{disabled: !canContinue || isLoading}\">\n      <ng-container *ngIf=\"!isLoading; else loadingSpinner\"> {{submitLabel}} </ng-container>\n      \n    </button>\n</div>\n\n<ng-template #loadingSpinner>\n    <i class=\"fa fa-spinner fa-pulse fa-fw\"></i>\n</ng-template>",
                    viewProviders: [{ provide: ControlContainer, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NgForm; })) }],
                    styles: [".form-action-bar{display:flex;justify-content:flex-end;padding:1em;background-color:#cdd9e4;transition:background-color .3s;position:-webkit-sticky;position:sticky;bottom:0;z-index:10;left:5rem;right:5rem}.form-action-bar.disabled{background-color:#d5d9dd}@media (max-width:991.98px){.form-action-bar{left:2.5rem;right:2.5rem}}.submit{min-width:240px}@media (max-width:767.98px){.form-action-bar{left:0;right:0}.submit{min-width:100%}}.btn{white-space:normal!important;word-wrap:break-word}"]
                }] }
    ];
    /** @nocollapse */
    FormActionBarComponent.ctorParameters = function () { return []; };
    FormActionBarComponent.propDecorators = {
        submitLabel: [{ type: Input }],
        canContinue: [{ type: Input }],
        isLoading: [{ type: Input }],
        defaultColor: [{ type: Input }],
        btnClick: [{ type: Output }]
    };
    return FormActionBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * The "Page Framework" is a template to be used on FPCare pages to ensure
 * consistent layout.  It applies to most pages, but should NOT be used on
 * Dashboards, or full-width table components.
 *
 * \@example
 * <common-page-framework>
 *        <div>This will go in the middle column</div>
 *        <p>So will this</p>
 *        <div aside> This will go in the side column, or tips.</div>
 * </common-page-framework>
 *
 * @export
 */
var PageFrameworkComponent = /** @class */ (function () {
    function PageFrameworkComponent() {
        this.layout = 'default';
    }
    /**
     * @return {?}
     */
    PageFrameworkComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    PageFrameworkComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-page-framework',
                    template: "<div class=\"row\" [ngSwitch]=\"layout\">\n\n  <ng-container *ngSwitchCase=\"'default'\">\n    <div class=\"col-md-8\">\n      <div class=\"px-lg-4 px-md-3 py-3\">\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </div>\n    </div>\n    <div class=\"col-md-4 aside-col\">\n      <div class='pr-lg-5 pr-md-4 py-2'>\n        <ng-container *ngTemplateOutlet=\"aside\"></ng-container>\n      </div>\n    </div>\n  </ng-container>\n\n\n  <ng-container *ngSwitchCase=\"'double'\">\n    <div class=\"col-md-6\">\n      <div class=\"px-lg-5 px-md-3 py-3\">\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </div>\n    </div>\n    <div class=\"col-md-6\">\n      <div class='px-lg-5 px-md-3 py-3'>\n        <ng-container *ngTemplateOutlet=\"aside\"></ng-container>\n      </div>\n    </div>\n  </ng-container>\n\n    <ng-container *ngSwitchCase=\"'single'\">\n      <div class=\"col-md-8 offset-lg-2\">\n        <div class=\"px-lg-5 px-md-3 py-3\">\n          <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"'blank'\">\n      <div class=\"col-sm-12\">\n        <div class=\"px-lg-5 px-md-3 py-3\">\n          <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </div>\n      </div>\n    </ng-container>\n</div>\n<ng-container *ngTemplateOutlet=\"submit\"></ng-container>\n\n\n<!-- We use ng-template here to get around a bug with having multiple ng-contents in one template. By default, if there are duplicate ng-contents in a template Angular will select the very first one - even if latter ones are 'removed' by ngSwitch or ngIf.-->\n<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>\n\n<ng-template #aside>\n    <ng-content select='aside'></ng-content>\n</ng-template>\n\n<ng-template #submit>\n  <ng-content select='common-form-action-bar'></ng-content>\n  <ng-content select='common-form-submit-bar'></ng-content>\n</ng-template>",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["common-page-framework{background:#fcfcfc;display:block}.h5,h5{font-size:1rem;font-weight:700;margin-bottom:0}p+.h5,p+h5{margin-top:1.5rem}.aside-col aside{background:#f2f2f2;padding:1em;border-radius:5px}@media (min-width:768px){.aside-col aside{margin-top:1rem}}"]
                }] }
    ];
    PageFrameworkComponent.propDecorators = {
        layout: [{ type: Input }]
    };
    return PageFrameworkComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Base class.  Components extend this class to have object IDs.
 * NPM package dependencies:
 *  a) moment
 */
var  /**
 * Base class.  Components extend this class to have object IDs.
 * NPM package dependencies:
 *  a) moment
 */
Base = /** @class */ (function () {
    function Base() {
        /**
         * An identifier for parents to keep track of components
         */
        this.objectId = UUID.UUID().toString();
    }
    return Base;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Awkward necessary workaround due to bug in build tools
// https://github.com/jvandemo/generator-angular2-library/issues/221#issuecomment-355945207
/** @type {?} */
var zxcvbn = zxcvbn_;
/**
 * PasswordComponent is a text input for a user's password. It includes:
 *
 * - A password strength bar
 * - Minimum length validations
 *
 * Note - if your application has requirements to check things like username is not
 * present in password, we recommend doing this in the (passwordChange) callback.
 *
 * \@example
 *       <common-password componentLabel="{{newPwdLabel}}"
 *                      [showPasswordStrength]="true"
 *                      [minLen]="pwdMinLen"
 *                      [pwdCriteria]="pwdValidChars"
 *                      [password]="data.password"
 *                      (passwordChange)="setNewPassword($event)"></common-password>
 *
 * @export
 */
var PasswordComponent = /** @class */ (function (_super) {
    __extends(PasswordComponent, _super);
    function PasswordComponent() {
        var _this = _super.call(this) || this;
        // Inputs for the component
        _this.label = 'Password';
        _this.isRequired = true;
        _this.isDisabled = false;
        _this.minLen = '8';
        _this.maxLen = '32';
        _this.showPasswordStrength = false;
        _this.objectID = 'password_' + _this.objectId;
        // Output from the component
        _this.passwordChange = new EventEmitter();
        _this.blurEvent = new EventEmitter();
        // Flag for the fa-eye to show or hide password
        _this.hideValue = true;
        _this.strengthPercentage = 0;
        // default messages
        _this.requiredMsgSeg = ' is required.';
        _this.minLenMsgSeg1 = ' must be at least ';
        _this.minLenMsgSeg2 = ' characters in length.';
        _this.criteriaMsg = ' contains invalid characters.';
        return _this;
    }
    /**
     * @return {?}
     */
    PasswordComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Set default messages
        this.errMsg = {
            required: this.label + this.requiredMsgSeg,
            minLength: this.label + this.minLenMsgSeg1 + this.minLen + this.minLenMsgSeg2,
            criteria: this.label + this.criteriaMsg
        };
        // Replace default message if provided
        if (this.errorMessages) {
            if (this.errorMessages.required) {
                this.errMsg.required = this.errorMessages.required;
            }
            if (this.errorMessages.minLength) {
                this.errMsg.minLength = this.errorMessages.minLength;
            }
            if (this.errorMessages.criteria) {
                this.errMsg.criteria = this.errorMessages.criteria;
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PasswordComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.password && this.password) {
            // Check strength of password
            this.pswdStrength = this.getPasswordStrength(this.password);
            this.strengthPercentage = ((this.pswdStrength + 1) / 5) * 100;
        }
    };
    /**
     * Passes the value entered back to the calling component
     * @param password value the was entered by
     */
    /**
     * Passes the value entered back to the calling component
     * @param {?} password value the was entered by
     * @return {?}
     */
    PasswordComponent.prototype.setPassword = /**
     * Passes the value entered back to the calling component
     * @param {?} password value the was entered by
     * @return {?}
     */
    function (password) {
        this.passwordChange.emit(password);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PasswordComponent.prototype.onInputBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        console.log('onBlur: ', event);
        this.blurEvent.emit(event);
    };
    // Prevent user from pasting data into the text box
    // Prevent user from pasting data into the text box
    /**
     * @param {?} event
     * @return {?}
     */
    PasswordComponent.prototype.onPaste = 
    // Prevent user from pasting data into the text box
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return false;
    };
    /**
     * Get the strength of the password
  
     *    0 = too guessable: risky password. (guesses < 10^3)
     *    1 = very guessable: protection from throttled online attacks. (guesses < 10^6)
     *    2 = somewhat guessable: protection from unthrottled online attacks. (guesses < 10^8)
     *    3 = safely unguessable: moderate protection from offline slow-hash scenario. (guesses < 10^10)
     *    4 = very unguessable: strong protection from offline slow-hash scenario. (guesses >= 10^10)
     *
     *  https://github.com/dropbox/zxcvbn
     */
    /**
     * Get the strength of the password
     *    0 = too guessable: risky password. (guesses < 10^3)
     *    1 = very guessable: protection from throttled online attacks. (guesses < 10^6)
     *    2 = somewhat guessable: protection from unthrottled online attacks. (guesses < 10^8)
     *    3 = safely unguessable: moderate protection from offline slow-hash scenario. (guesses < 10^10)
     *    4 = very unguessable: strong protection from offline slow-hash scenario. (guesses >= 10^10)
     *
     *  https://github.com/dropbox/zxcvbn
     * @private
     * @param {?} password
     * @return {?}
     */
    PasswordComponent.prototype.getPasswordStrength = /**
     * Get the strength of the password
     *    0 = too guessable: risky password. (guesses < 10^3)
     *    1 = very guessable: protection from throttled online attacks. (guesses < 10^6)
     *    2 = somewhat guessable: protection from unthrottled online attacks. (guesses < 10^8)
     *    3 = safely unguessable: moderate protection from offline slow-hash scenario. (guesses < 10^10)
     *    4 = very unguessable: strong protection from offline slow-hash scenario. (guesses >= 10^10)
     *
     *  https://github.com/dropbox/zxcvbn
     * @private
     * @param {?} password
     * @return {?}
     */
    function (password) {
        // Password strength feedback
        /** @type {?} */
        var pswdFeedback = zxcvbn(password);
        return pswdFeedback.score;
    };
    PasswordComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-password',
                    template: "<label class=\"control-label\" for=\"{{objectID}}\">{{label}}</label>\n<input #pswdRef=\"ngModel\"\n       type=\"{{hideValue? 'password': 'text'}}\"\n       class=\"form-control password-field\"\n       name=\"{{objectID}}\"\n       id=\"{{objectID}}\"\n       [ngModel]=\"password\"\n       (ngModelChange)=\"setPassword($event)\"\n       (blur)=\"onInputBlur($event)\"\n       [pattern]=\"pwdCriteria\"\n       [required]=\"isRequired\"\n       [minlength]=\"minLen\"\n       [maxlength]=\"maxLen\"\n       [disabled]=\"isDisabled\" />\n<span class=\"fa fa-fw {{hideValue? 'fa-eye' : 'fa-eye-slash'}} password-field-icon\"\n      (click)='hideValue = !hideValue'></span>\n<div *ngIf='password && showPasswordStrength'>\n<!-- The progress bar -->\n  <div class=\"progress password-strength-bar\" >\n    <div class=\"progress-bar {{pswdStrength >= 4? 'bg-success' : (pswdStrength >= 3? 'bg-warning' : 'bg-danger')}}\"\n        role=\"progressbar\"\n        [style.width]='strengthPercentage + \"%\"'\n        [attr.aria-valuenow]=\"strengthPercentage\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\">\n    </div>\n  </div>\n  <span class=\"password-progress-label {{pswdStrength >= 4? 'text-success' : (pswdStrength >= 3? 'text-warning' : 'text-danger')}}\"></span>\n</div>\n<!-- Error messages for component -->\n<div *ngIf=\"!pswdRef.disabled && (pswdRef.touched || pswdRef.dirty)\"\n    role=\"alert\"\n    class='error-container'\n    aria-live=\"assertive\">\n  <div class=\"text-danger\" *ngIf=\"pswdRef?.errors?.required\">\n    {{errMsg.required}}\n  </div>\n  <div class=\"text-danger\" *ngIf=\"pswdRef?.errors?.minlength\">\n      {{errMsg.minLength}}\n  </div>\n  <div class=\"text-danger\" *ngIf=\"pswdRef?.errors?.pattern && !pswdRef?.errors?.minlength\">\n      {{errMsg.criteria}}\n  </div>\n</div>\n\n",
                    /* Re-use the same ngForm that it's parent is using. The component will show
                       * up in its parents `this.form`, and will auto-update `this.form.valid`
                       */
                    viewProviders: [{ provide: ControlContainer, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NgForm; })) }],
                    styles: [".password-field-icon{float:right;margin-left:-25px;margin-top:-25px;margin-right:.5rem;position:relative;z-index:2}.password-field{padding-right:2rem}.password-strength-bar{min-width:0;max-width:75%;height:.5rem;margin-top:1em}.password-progress-label{float:right;margin-left:-15px;margin-top:-15px;position:relative;z-index:2}.password-strength-bar+.text-success::after{content:'Good'}.password-strength-bar+.text-warning::after{content:'OK'}.password-strength-bar+.text-danger::after{content:'Bad'}input{width:100%}input[type=password]::-ms-clear,input[type=password]::-ms-reveal{display:none}"]
                }] }
    ];
    /** @nocollapse */
    PasswordComponent.ctorParameters = function () { return []; };
    PasswordComponent.propDecorators = {
        label: [{ type: Input }],
        isRequired: [{ type: Input }],
        isDisabled: [{ type: Input }],
        password: [{ type: Input }],
        pwdCriteria: [{ type: Input }],
        minLen: [{ type: Input }],
        maxLen: [{ type: Input }],
        errorMessages: [{ type: Input }],
        showPasswordStrength: [{ type: Input }],
        objectID: [{ type: Input }],
        passwordChange: [{ type: Output }],
        blurEvent: [{ type: Output }],
        onPaste: [{ type: HostListener, args: ['document:paste', ['$event'],] }]
    };
    return PasswordComponent;
}(Base));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * NPM Dependencies:
 *  a) rxjs
 *  b) ngx-bootstrap
 */
var WizardProgressBarComponent = /** @class */ (function () {
    function WizardProgressBarComponent(router, cd) {
        this.router = router;
        this.cd = cd;
        this.progressSteps = [];
    }
    /**
     * @return {?}
     */
    WizardProgressBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Update the progress bar view on route change and _only_ route chaange.
        // Skip most of Angular's ChangeDetection in favour of manually optimizing.
        this.routerEvents$ = this.router.events.pipe(filter((/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return ev instanceof NavigationEnd; })), map((/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return ev.url; }))).subscribe((/**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            _this.activeIndex = _this.getActiveIndex(url);
            _this.cd.detectChanges();
            _this.scrollStepIntoView();
        }));
        // Must schedule first run manually, or bar won't be set.
        this.activeIndex = this.getActiveIndex(this.router.url);
    };
    /**
     * @return {?}
     */
    WizardProgressBarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.cd.detach();
        this.routerEvents$.unsubscribe();
    };
    /**
     * @return {?}
     */
    WizardProgressBarComponent.prototype.calculateProgressPercentage = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var denominator = this.progressSteps.length;
        /** @type {?} */
        var numerator = this.activeIndex + 1;
        if (denominator === 0 || numerator > denominator) {
            return 100;
        }
        // Because we've switched from space-evenly to space-around (for IE), we
        // have to handle the half-space that space-around adds to the start/end of
        // the container
        /** @type {?} */
        var halfSpace = 1 / (denominator * 2);
        return Math.round(((numerator / denominator) - halfSpace) * 100);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    WizardProgressBarComponent.prototype.getActiveIndex = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.progressSteps.findIndex((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return url.includes(x.route); }));
    };
    /**
    * Primarily for mobile, this horizontally scrolls the step into view.
    *
    * Note - be very careful with any changes to this function because it steps
    * outside of Angular to call native browser functions.
    */
    /**
     * Primarily for mobile, this horizontally scrolls the step into view.
     *
     * Note - be very careful with any changes to this function because it steps
     * outside of Angular to call native browser functions.
     * @private
     * @return {?}
     */
    WizardProgressBarComponent.prototype.scrollStepIntoView = /**
     * Primarily for mobile, this horizontally scrolls the step into view.
     *
     * Note - be very careful with any changes to this function because it steps
     * outside of Angular to call native browser functions.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var target = this.steps.toArray()[this.activeIndex];
        /** @type {?} */
        var container = document.getElementsByClassName('horizontal-scroll');
        if (container.length === 1) {
            // Since we're already breaking out of Angular, we try and be safe by using a try/catch.
            // Otherwise an error here could halt execution,
            try {
                container[0].scrollLeft = Math.abs(target.nativeElement.offsetLeft - (window.outerWidth / 2));
            }
            catch (error) { }
        }
    };
    WizardProgressBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-wizard-progress-bar',
                    template: "<progressbar\n  [value]=\"calculateProgressPercentage()\"\n  [max]=\"100\"\n  [animate]=\"true\">\n</progressbar>\n\n<div class=\"step-container\" #stepContainer>\n\n  <a #steps *ngFor=\"let step of progressSteps; let i = index;\" [routerLink]=\"step.route\">\n\n    <div class=\"step\" [ngClass]=\"{active: i === activeIndex}\">\n      <span class=\"step-text\">{{step.title}}</span>\n    </div>\n\n  </a>\n\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{flex:1;padding:0 2em;min-height:2em;min-width:650px}.step-container{display:flex;justify-content:space-around}progressbar{background-color:#adb5bd;height:.5rem}.step{position:relative;-webkit-transform:translateX(-.5em);transform:translateX(-.5em);margin-top:.25rem}.step:before{content:\" \";position:absolute;width:1em;height:1em;border-radius:100%;background:#fff;border:3px solid #036;right:0;left:0;margin:0 auto;bottom:100%}.step:not(.active) .step-text{opacity:.8}.step:not(.active):before{background:#ced4da}.step .step-text{position:absolute;-webkit-transform:translateX(-33%);transform:translateX(-33%);white-space:nowrap;font-size:small}.progress-background{width:100%;background-color:#00f}"]
                }] }
    ];
    /** @nocollapse */
    WizardProgressBarComponent.ctorParameters = function () { return [
        { type: Router },
        { type: ChangeDetectorRef }
    ]; };
    WizardProgressBarComponent.propDecorators = {
        progressSteps: [{ type: Input }],
        stepContainer: [{ type: ViewChild, args: ['stepContainer',] }],
        steps: [{ type: ViewChildren, args: ['steps',] }]
    };
    return WizardProgressBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment = moment_;
var DateComponent = /** @class */ (function (_super) {
    __extends(DateComponent, _super);
    function DateComponent(form, cd) {
        var _this = _super.call(this) || this;
        _this.form = form;
        _this.cd = cd;
        _this.useCurrentDate = false;
        _this.required = true;
        _this.disabled = false;
        _this.label = 'Date';
        /**
         * Can be one of: "future", "past". "future" includes today, "past" does not.
         */
        _this.restrictDate = 'any';
        _this.dateChange = new EventEmitter();
        _this.monthList = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ];
        return _this;
    }
    /**
     * @return {?}
     */
    DateComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.errorMessages) {
            // Use default messages
            this.errorMessages = {
                required: this.label + ' is required.',
                dayOutOfRange: 'Invalid ' + this.label + '.',
                yearDistantPast: 'Invalid ' + this.label + '.',
                yearDistantFuture: 'Invalid ' + this.label + '.',
                noFutureDatesAllowed: 'Invalid ' + this.label + '.',
                invalidValue: 'Invalid ' + this.label + '.'
            };
        }
        if (this.useCurrentDate) {
            // Set date to current date
            this.date.month = moment().month();
            this.date.day = moment().date();
            this.date.year = moment().year();
        }
    };
    /** Set the month and notify caller of change */
    /**
     * Set the month and notify caller of change
     * @param {?} value
     * @return {?}
     */
    DateComponent.prototype.setMonth = /**
     * Set the month and notify caller of change
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var month = this.getNumericValue(value);
        // console.log( 'monthRef: ', this.monthRef );
        if (this.date) {
            this.date.month = month;
            this.triggerDayValidation();
            this.dateChange.emit(this.date);
        }
    };
    /** Set the day and notify caller of change */
    /**
     * Set the day and notify caller of change
     * @param {?} value
     * @return {?}
     */
    DateComponent.prototype.setDay = /**
     * Set the day and notify caller of change
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var day = this.getNumericValue(value);
        // console.log(  'dayRef: ', this.dayRef );
        if (this.date) {
            this.date.day = day;
            this.dateChange.emit(this.date);
        }
    };
    /** Set the yera and notify caller of change */
    /**
     * Set the yera and notify caller of change
     * @param {?} value
     * @return {?}
     */
    DateComponent.prototype.setYear = /**
     * Set the yera and notify caller of change
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var year = this.getNumericValue(value);
        // console.log( 'yearRef: ', this.yearRef );
        if (this.date) {
            this.date.year = year;
            this.triggerDayValidation();
            this.dateChange.emit(this.date);
        }
    };
    /**
     * Force the `day` input to run it's directives again. Important in cases
     * where user fills fields out of order, e.g. sets days to 31 then month to
     * Februrary.
     */
    /**
     * Force the `day` input to run it's directives again. Important in cases
     * where user fills fields out of order, e.g. sets days to 31 then month to
     * Februrary.
     * @private
     * @return {?}
     */
    DateComponent.prototype.triggerDayValidation = /**
     * Force the `day` input to run it's directives again. Important in cases
     * where user fills fields out of order, e.g. sets days to 31 then month to
     * Februrary.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // We have to wrap this in a timeout, otherwise it runs before Angular has updated the values
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.form.controls['day']) {
                // console.log( 'Trigger day validation' );
                _this.form.controls['day'].updateValueAndValidity();
                _this.cd.detectChanges();
            }
        }), 0);
    };
    /** Convert string to numeric value or null if not */
    /**
     * Convert string to numeric value or null if not
     * @private
     * @param {?} value
     * @return {?}
     */
    DateComponent.prototype.getNumericValue = /**
     * Convert string to numeric value or null if not
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var parsed = parseInt(value, 10);
        return (isNaN(parsed) ? null : parsed);
    };
    DateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-date',
                    template: "<fieldset>\n  <legend class=\"date--legend\">{{label}}</legend>\n  <div class=\"form-group date-row\">\n\n    <label class=\"visuallyhidden\" for=\"month{{objectId}}\">Month</label>\n    <select class=\"form-control monthSelect\"\n            id=\"month{{objectId}}\"\n            name=\"month\"\n            [ngModel]=\"date?.month\"\n            (ngModelChange)=\"setMonth($event)\"\n            [disabled]='disabled'\n            #monthRef=\"ngModel\"\n            [required]=\"required\">\n      <!-- We show the blank option so the user can clear out their data.-->\n      <option value=\"null\" label=\"-- month --\" selected [disabled]='required'></option>\n      <option *ngFor=\"let month of monthList; let i = index;\" [value]=\"i + 1\">{{month}}</option>\n    </select>\n\n    <label class=\"visuallyhidden\" for=\"day{{objectId}}\">Day</label>\n    <input type=\"number\"\n           class=\"form-control dayInput\"\n           id=\"day{{objectId}}\"\n           name=\"day\"\n           placeholder=\"day\"\n           [ngModel]=\"date?.day\"\n           (ngModelChange)=\"setDay($event)\"\n           #dayRef=\"ngModel\"\n           [required]=\"required\"\n           commonDateFieldFormat\n           commonDayValidation\n           [disabled]='disabled'\n           maxlength=\"2\" />\n\n    <label class=\"visuallyhidden\" for=\"year{{objectId}}\">Year</label>\n    <input type=\"number\"\n           class=\"form-control yearInput\"\n           id=\"year{{objectId}}\"\n           name=\"year\"\n           placeholder=\"year\"\n           [ngModel]=\"date?.year\"\n           (ngModelChange)=\"setYear($event)\"\n           #yearRef=\"ngModel\"\n           [required]=\"required\"\n           commonDateFieldFormat\n           [commonYearValidate]=\"restrictDate\"\n           [disabled]='disabled'\n           maxlength=\"4\" />\n\n  </div>\n\n</fieldset>\n\n<!-- Error messages for component -->\n<div *ngIf=\"!disabled && (monthRef.touched || monthRef.dirty) && (dayRef.touched || dayRef.dirty) && (yearRef.touched || yearRef.dirty)\"\n    role=\"alert\"\n    class='error-container'\n    aria-live=\"assertive\">\n  <div class=\"text-danger\"\n       *ngIf=\"(monthRef?.errors?.required || dayRef?.errors?.required || yearRef?.errors?.required ) && errorMessages?.required\">\n       {{errorMessages.required}}\n  </div>\n  <div class=\"text-danger\"\n      *ngIf=\"dayRef?.errors?.dayOutOfRange && errorMessages?.dayOutOfRange\">\n       {{errorMessages.dayOutOfRange}}\n  </div>\n  <div class=\"text-danger\"\n       *ngIf=\"yearRef?.errors?.yearDistantPast && errorMessages?.yearDistantPast\">\n       {{errorMessages.yearDistantPast}}\n  </div>\n  <div class=\"text-danger\"\n       *ngIf=\"yearRef?.errors?.yearDistantFuture && errorMessages?.yearDistantFuture\">\n       {{errorMessages.yearDistantFuture}}\n  </div>\n  <div class=\"text-danger\"\n        *ngIf=\"yearRef?.errors?.noPastDatesAllowed && errorMessages?.noPastDatesAllowed\">\n        {{errorMessages.noPastDatesAllowed}}\n  </div>\n  <div class=\"text-danger\"\n       *ngIf=\"yearRef?.errors?.noFutureDatesAllowed && errorMessages?.noFutureDatesAllowed\">\n       {{errorMessages.noFutureDatesAllowed}}\n  </div>\n  <!-- Case should not happen until something is not formatted correctly-->\n  <div class=\"text-danger\"\n       *ngIf=\"(dayRef?.errors?.invalidValue || yearRef?.errors?.invalidValue) && errorMessages?.invalidValue\">\n       {{errorMessages.invalidValue}}\n  </div>\n</div>\n\n\n",
                    /* Re-use the same ngForm that it's parent is using. The component will show
                       * up in its parents `this.form`, and will auto-update `this.form.valid`
                       */
                    viewProviders: [{ provide: ControlContainer, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NgForm; })) }],
                    styles: [".date--legend{font-size:inherit;font-weight:700}.date-row{display:flex;flex-wrap:nowrap;justify-content:space-between}.monthSelect{max-width:50%;height:35px;margin-right:1em}.dayInput{max-width:25%;height:35px;margin-right:1em}.yearInput{max-width:25%;height:35px}.error-container{flex-basis:100%!important}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{-webkit-appearance:none;-moz-appearance:none;appearance:none;margin:0}select option[selected]{color:gray!important}"]
                }] }
    ];
    /** @nocollapse */
    DateComponent.ctorParameters = function () { return [
        { type: NgForm },
        { type: ChangeDetectorRef }
    ]; };
    DateComponent.propDecorators = {
        monthRef: [{ type: ViewChild, args: ['monthRef',] }],
        dayRef: [{ type: ViewChild, args: ['dayRef',] }],
        yearRef: [{ type: ViewChild, args: ['yearRef',] }],
        useCurrentDate: [{ type: Input }],
        required: [{ type: Input }],
        disabled: [{ type: Input }],
        label: [{ type: Input }],
        date: [{ type: Input }],
        restrictDate: [{ type: Input }],
        errorMessages: [{ type: Input }],
        dateChange: [{ type: Output }]
    };
    return DateComponent;
}(Base));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$1 = moment_;
var DayValidationDirective = /** @class */ (function () {
    function DayValidationDirective() {
    }
    /**
     * @param {?} control
     * @return {?}
     */
    DayValidationDirective.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var date = control.parent.value;
        if (!control.value) {
            return null; // empty value
        }
        /** @type {?} */
        var day = parseInt(control.value, 10);
        // console.log( 'day: ', day );
        if (!isNaN(day)) {
            // console.log( 'parent: ', date );
            // Only process of value is numeric
            if (!isNaN(date.month) && !isNaN(date.year)) {
                // Determine days in month
                /** @type {?} */
                var str = date.year + "-" + date.month;
                /** @type {?} */
                var daysInMonth = moment$1(str, 'YYYY-MM').daysInMonth();
                // console.log( 'str: ', str + ', dayInMonth: ', daysInMonth );
                if (isNaN(daysInMonth)) {
                    daysInMonth = 31;
                }
                // Validate days
                if (day > daysInMonth || day < 1) {
                    return { 'dayOutOfRange': true };
                }
            }
            return null;
        }
        return { 'invalidValue': true };
    };
    DayValidationDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[commonDayValidation]',
                    providers: [
                        { provide: NG_VALIDATORS, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return DayValidationDirective; })), multi: true }
                    ]
                },] }
    ];
    return DayValidationDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateFieldFormatDirective = /** @class */ (function () {
    function DateFieldFormatDirective() {
        this.ngModelChange = new EventEmitter(false);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    DateFieldFormatDirective.prototype.onInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var input = (/** @type {?} */ (event.target));
        /** @type {?} */
        var maxlen = input.getAttribute('maxlength');
        /** @type {?} */
        var trimmed = input.value.trim();
        if (/[^\d]+/.test(input.value)) {
            trimmed = trimmed.replace(/[^\d]/g, '');
        }
        trimmed = trimmed.substr(0, Number(maxlen));
        input.value = trimmed;
        this.ngModelChange.emit(trimmed);
    };
    DateFieldFormatDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[commonDateFieldFormat]'
                },] }
    ];
    DateFieldFormatDirective.propDecorators = {
        ngModelChange: [{ type: Output }],
        onInput: [{ type: HostListener, args: ['input', ['$event'],] }]
    };
    return DateFieldFormatDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$2 = moment_;
// TODO:  Create a message structure to pass in error messages similar to password module.
var YearValidateDirective = /** @class */ (function () {
    function YearValidateDirective() {
    }
    /**
     * @param {?} control
     * @return {?}
     */
    YearValidateDirective.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var date = control.parent.value;
        // console.log( 'validate year: ', control.value );
        if (!control.value) {
            return null; // empty value
        }
        /** @type {?} */
        var year = parseInt(control.value, 10);
        // Only process if value is numeric
        if (!isNaN(year)) {
            /** @type {?} */
            var currentYear = moment$2().get('y');
            if (currentYear - year > 150) {
                return { 'yearDistantPast': true };
            }
            if (year - currentYear > 150) {
                return { 'yearDistantFuture': true };
            }
            // Check whether dates can be present or past
            if (this.commonYearValidate && this.commonYearValidate !== 'any' &&
                !isNaN(date.day) && !isNaN(date.month)) {
                /** @type {?} */
                var diff = moment$2({ year: year, month: date.month, day: date.day })
                    .diff(moment$2(), 'days', true);
                /**
                 * Validate current date as if it's a future date, and reject it when only
                 * accepting past dates.  We accomplish this by comparing diff against 1.
                 */
                if (diff < -1 && this.commonYearValidate === 'future') {
                    return { 'noPastDatesAllowed': true };
                }
                if (diff >= -1 && this.commonYearValidate === 'past') {
                    return { 'noFutureDatesAllowed': true };
                }
            }
            return null;
        }
        return { 'invalidValue': true };
    };
    YearValidateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[commonYearValidate]',
                    providers: [
                        { provide: NG_VALIDATORS, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return YearValidateDirective; })), multi: true }
                    ]
                },] }
    ];
    YearValidateDirective.propDecorators = {
        commonYearValidate: [{ type: Input }]
    };
    return YearValidateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * PRIME datepicker component. Largely a wrapper for ngx-mydatepicker
 * https://github.com/kekeh/ngx-mydatepicker
 *
 * NOTE - YOU MUST INCLUDE NGX-MYDATEPICKER IN YOUR PARENT APPLICATION TO USE
 * THIS COMPONENT!  This is due to some poor implementation in ngx-mydatepicker.
 * Make sure to use the same version that this library uses.
 */
var DatepickerComponent = /** @class */ (function () {
    function DatepickerComponent() {
        /**
         * Component size can be reduced, see Datepickersizes for options
         */
        this.size = DatepickerSizes.DEFAULT;
        this.dateChange = new EventEmitter();
        this.required = false;
        /**
         * Control visibility of the clear 'x' button on the mini datepicker.
         *
         * **'visible'** is default, button exists
         *
         * **'none'** means the element does not exist
         *
         * **'invisible'** means the element takes up space but is not visible / cannot be
         * used.
         *
         * Invisible is useful when you want to make sure a datepicker is the same
         * size as a visible one.
         */
        this.clearButton = 'visible';
        /**
         * Format for how to display the date to the user.
         */
        this.dateFormat = 'yyyy/mm/dd';
        // Make enum accessible in HTML
        this.DatepickerSizes = DatepickerSizes;
        this._onChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { });
        this._onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    /**
     * @param {?} date
     * @return {?}
     */
    DatepickerComponent.prototype.convertDateToSimpleDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (date === null || date === undefined) {
            return null;
        }
        return {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate(),
        };
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DatepickerComponent.prototype.convertSimpleDateToDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        // When ngx-mydatepicker is cleared, it returns {year: 0, month: 0, day: 0}
        if (date.year === 0) {
            return null;
        }
        return new Date(date.year, date.month - 1, date.day);
    };
    /**
     * @param {?} x
     * @return {?}
     */
    DatepickerComponent.prototype.isDate = /**
     * @param {?} x
     * @return {?}
     */
    function (x) {
        if (!x) {
            return false;
        }
        return x.getDate !== undefined;
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.errorMessages) {
            this.errorMessages = {
                required: this.labelText + ' is required.',
                dayOutOfRange: 'Invalid ' + this.labelText + '.',
                yearDistantPast: 'Invalid ' + this.labelText + '.',
                yearDistantFuture: 'Invalid ' + this.labelText + '.',
                noFutureDatesAllowed: 'Invalid ' + this.labelText + '.',
                invalidValue: 'Invalid ' + this.labelText + '.'
            };
        }
        this.datepickerOptions = {
            dateFormat: this.dateFormat,
            sunHighlight: false,
            appendSelectorToBody: true,
        };
        if (this.size === DatepickerSizes.MINI) {
            // Set width/height to 4/5 of default
            this.datepickerOptions.selectorHeight = '185px';
            this.datepickerOptions.selectorWidth = '201px';
        }
        if (this.isDate(this.disableSince)) {
            this.datepickerOptions.disableSince = this.convertDateToSimpleDate(this.disableSince);
        }
        if (this.isDate(this.disableUntil)) {
            this.datepickerOptions.disableUntil = this.convertDateToSimpleDate(this.disableSince);
        }
        if (this.onlyFutureDates) {
            /** @type {?} */
            var today = new Date();
            this.datepickerOptions.disableUntil = this.convertDateToSimpleDate(today);
        }
        console.log('Datepicker ngOnInit', this.date);
        if (this.date) {
            // Even if jsdate winds up being undefined, even defining this.model will
            // set the input as non-empty and it'll satisfy the 'required' validation.
            // So, we only add the model if there's actual data.
            this.model = {
                jsdate: this.date
            };
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatepickerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // Parent component has passed in null, so we have to manually clear the input. This leads to 2 change detection cycles.
        // We could refactor it down to one, but the performance hit is minimal for such a simple component.
        if (this.date === null) {
            this.clearDate();
            this._onChange(null);
            this._onTouched();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatepickerComponent.prototype.onDateChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.jsdate || event.jsdate === null) {
            // Always emit a Date (or null)
            this.dateChange.emit(event.jsdate);
            this._onChange(event.jsdate);
            this._onTouched();
        }
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.clearDate = /**
     * @return {?}
     */
    function () {
        if (this.ngxdp) {
            // We don't need to emit here, because by changing date we'll trigger onDateChanged automatically.
            this.date = null;
            this.ngxdp.clearDate();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatepickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatepickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    DatepickerComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.model = {
            jsdate: obj
        };
    };
    DatepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-datepicker',
                    template: "<div>\n    <label><span>{{labelText}}</span>\n        <div class=\"input-group\">\n            \n                <input class=\"form-control\" placeholder=\"YYYY/MM/DD\"\n                ngx-mydatepicker name=\"datepicker-{{labelText}}\"\n                [(ngModel)]=\"model\"\n                [options]=\"datepickerOptions\"\n                #dp=\"ngx-mydatepicker\"\n                #dateEl='ngModel'\n                (dateChanged)=\"onDateChanged($event)\"\n                [required]='required'\n                [disabled]=\"disabled\"/>\n\n            <span class=\"input-group-append float-label-append\">\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"dp.toggleCalendar()\">\n                    <i class=\"fa fa-calendar\"></i>\n                </button>\n            </span>\n        </div>\n    </label>\n</div>\n\n<!-- InvalidDateFormat comes from ngxmydatepicker, so we have a little less control over it. -->\n<div *ngIf=\"!disabled && dateEl.touched\"\n    role=\"alert\"\n    class='error-container'\n    aria-live=\"assertive\">\n  <div class=\"text-danger\"\n       *ngIf=\"(dateEl?.errors?.required) && errorMessages?.required && !dateEl?.errors?.invalidDateFormat\">\n       {{errorMessages.required}}\n  </div>\n  <!-- ngx-mydatepicker has it's own errors and we can't easily add our own, so we have reduced error messages. -->\n  <!-- <div class=\"text-danger\"\n      *ngIf=\"dateEl?.errors?.dayOutOfRange && errorMessages?.dayOutOfRange\">\n       {{errorMessages.dayOutOfRange}}\n  </div>\n  <div class=\"text-danger\"\n       *ngIf=\"dateEl?.errors?.yearDistantPast && errorMessages?.yearDistantPast\">\n       {{errorMessages.yearDistantPast}}\n  </div>\n  <div class=\"text-danger\"\n       *ngIf=\"dateEl?.errors?.yearDistantFuture && errorMessages?.yearDistantFuture\">\n       {{errorMessages.yearDistantFuture}}\n  </div>\n  <div class=\"text-danger\"\n        *ngIf=\"dateEl?.errors?.noPastDatesAllowed && errorMessages?.noPastDatesAllowed\">\n        {{errorMessages.noPastDatesAllowed}}\n  </div>\n  \n  <div class=\"text-danger\"\n       *ngIf=\"dateEl?.errors?.noFutureDatesAllowed && errorMessages?.noFutureDatesAllowed\">\n       {{errorMessages.noFutureDatesAllowed}}\n  </div> -->\n  <div class=\"text-danger\"\n       *ngIf=\"(dateEl?.errors?.invalidValue || dateEl?.errors?.invalidDateFormat) && errorMessages?.invalidValue\">\n       {{errorMessages.invalidValue}}\n  </div>\n</div>",
                    /* Re-use the same ngForm that it's parent is using. The component will show
                       * up in its parents `this.form`, and will auto-update `this.form.valid`
                       */
                    viewProviders: [{ provide: ControlContainer, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NgForm; })) }],
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return DatepickerComponent; }))
                        }
                    ],
                    styles: [".datepicker--mini{display:flex;flex-wrap:nowrap}.datepicker--mini:not(.hide-clear)>.btn{border-top-right-radius:0;border-bottom-right-radius:0}.datepicker--mini .input-group-append .btn{padding:0 .5rem}.input-group-append{z-index:0}.float-label-append{margin-bottom:calc(.5rem + 2px)}.has-float-label{flex-basis:calc(100% - 36px)}"]
                }] }
    ];
    /** @nocollapse */
    DatepickerComponent.ctorParameters = function () { return []; };
    DatepickerComponent.propDecorators = {
        size: [{ type: Input }],
        date: [{ type: Input }],
        dateChange: [{ type: Output }],
        disabled: [{ type: Input }],
        labelText: [{ type: Input }],
        required: [{ type: Input }],
        disableUntil: [{ type: Input }],
        disableSince: [{ type: Input }],
        onlyFutureDates: [{ type: Input }],
        clearButton: [{ type: Input }],
        dateFormat: [{ type: Input }],
        errorMessages: [{ type: Input }],
        ngxdp: [{ type: ViewChild, args: ['dp',] }]
    };
    return DatepickerComponent;
}());
/** @enum {string} */
var DatepickerSizes = {
    MINI: 'mini',
    DEFAULT: 'default',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var CommonImageError = {
    WrongType: 0,
    TooSmall: 1,
    TooBig: 2,
    AlreadyExists: 3,
    Unknown: 4,
    CannotOpen: 5,
    PDFnotSupported: 6,
    CannotOpenPDF: 7,
};
CommonImageError[CommonImageError.WrongType] = 'WrongType';
CommonImageError[CommonImageError.TooSmall] = 'TooSmall';
CommonImageError[CommonImageError.TooBig] = 'TooBig';
CommonImageError[CommonImageError.AlreadyExists] = 'AlreadyExists';
CommonImageError[CommonImageError.Unknown] = 'Unknown';
CommonImageError[CommonImageError.CannotOpen] = 'CannotOpen';
CommonImageError[CommonImageError.PDFnotSupported] = 'PDFnotSupported';
CommonImageError[CommonImageError.CannotOpenPDF] = 'CannotOpenPDF';
var CommonImageProcessingError = /** @class */ (function () {
    // added errorDescription.PDF.JS gives proper error messages as invalid pdf structure or password protected pdf.Good for splunk tracking
    function CommonImageProcessingError(errorCode, errorDescription) {
        this.errorCode = errorCode;
        this.errorDescription = errorDescription;
    }
    return CommonImageProcessingError;
}());
/**
 * Image as uploaded by user
 */
var /**
 * Image as uploaded by user
 */
CommonImage = /** @class */ (function () {
    function CommonImage() {
        this.attachmentOrder = 0;
        this.uuid = UUID.UUID();
    }
    return CommonImage;
}());
var CommonImageScaleFactorsImpl = /** @class */ (function () {
    function CommonImageScaleFactorsImpl(wFactor, hFactor) {
        this.widthFactor = wFactor;
        this.heightFactor = hFactor;
    }
    /**
     * @param {?} scale
     * @return {?}
     */
    CommonImageScaleFactorsImpl.prototype.scaleDown = /**
     * @param {?} scale
     * @return {?}
     */
    function (scale) {
        return new CommonImageScaleFactorsImpl(this.widthFactor * scale, this.heightFactor * scale);
    };
    return CommonImageScaleFactorsImpl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var loadImage = loadImage_;
/** @type {?} */
var sha1 = sha1_;
/** @type {?} */
var PDFJS = ((/** @type {?} */ (PDFJS_)));
// TODO - Remove this and fix tslint issues
/* tslint:disable:max-line-length*/
var FileUploaderComponent = /** @class */ (function (_super) {
    __extends(FileUploaderComponent, _super);
    function FileUploaderComponent(zone, cd, router, controlContainer) {
        var _this = _super.call(this) || this;
        _this.zone = zone;
        _this.cd = cd;
        _this.router = router;
        _this.controlContainer = controlContainer;
        // lang = require('./i18n');
        _this.noIdImage = false;
        // @ContentChild('uploadInstruction') uploadInstructionRef: ElementRef;
        _this.images = new Array(0);
        _this.imagesChange = new EventEmitter();
        _this.required = false;
        _this.instructionText = 'Please upload required ID documents.';
        _this.errorMessages = { required: 'File is required.' };
        _this.errorDocument = new EventEmitter();
        return _this;
        // this.application = this.getApplicationType();
    }
    Object.defineProperty(FileUploaderComponent.prototype, "fileControl", {
        /**
         * This is created as a workaround to access the form control that binds to
         * the input[type='file']. We can't access it via the template name bindings
         * as that isn't working, so instead we access the parent form and then find
         * the input by name.
         */
        get: /**
         * This is created as a workaround to access the form control that binds to
         * the input[type='file']. We can't access it via the template name bindings
         * as that isn't working, so instead we access the parent form and then find
         * the input by name.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var INPUT_NAME = "fileUploadBrowse-" + this.id;
            // note - should be "this.controlContainer as NgForm" here, which works,
            // but fails on compiliation due to secondary entries
            return ((/** @type {?} */ (this.controlContainer))).controls[INPUT_NAME];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Return true if file already exists in the list; false otherwise.
     */
    /**
     * Return true if file already exists in the list; false otherwise.
     * @param {?} file
     * @param {?} imageList
     * @return {?}
     */
    FileUploaderComponent.checkImageExists = /**
     * Return true if file already exists in the list; false otherwise.
     * @param {?} file
     * @param {?} imageList
     * @return {?}
     */
    function (file, imageList) {
        if (!imageList || imageList.length < 1) {
            return false;
        }
        else {
            /** @type {?} */
            var sha1Sum = sha1(file.fileContent);
            for (var i = imageList.length - 1; i >= 0; i--) {
                // console.log(`compare  ${imageList[i].id} with ${sha1Sum}, result ${imageList[i].id === sha1Sum}`);
                if (imageList[i].id === sha1Sum) {
                    console.log("This file " + file.name + " has already been uploaded.");
                    return true;
                }
            }
            return false;
        }
    };
    /**
     * A special method to force the rendering of this component.  This is a workaround
     * because for some unknown reason, AngularJS2 change detector does not detect the
     * change of the images Array.
     */
    /**
     * A special method to force the rendering of this component.  This is a workaround
     * because for some unknown reason, AngularJS2 change detector does not detect the
     * change of the images Array.
     * @return {?}
     */
    FileUploaderComponent.prototype.forceRender = /**
     * A special method to force the rendering of this component.  This is a workaround
     * because for some unknown reason, AngularJS2 change detector does not detect the
     * change of the images Array.
     * @return {?}
     */
    function () {
        this.zone.run((/**
         * @return {?}
         */
        function () {
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FileUploaderComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        console.log('fileuploader onChanges', changes['images']);
        // if (changes['images'] && (changes['images'].currentValue.length === 0 &&
        //   changes['images'].previousValue.length > 0)) {
        if (changes['images'] && (changes['images'].currentValue.length === 0
            && changes['images'].previousValue
            && changes['images'].previousValue.length > 0)) {
            this.noIdImage = true;
        }
        else {
            this.noIdImage = false;
        }
    };
    /*
     System processing steps

     1. User clicks browse or drag-n-drops an file
     2. For browse case, the browser is told to only accept mime type image/*, .JPG, .GIF, .PNG, etc,
     however user can override and for drag-n-drop we don't can't impose this filter
     4. Using the HTML5 File API, we open a handle on the file
     5. Read the filename for later display to the user
     6. Create a hidden Image element in the browser's DOM
     7. Read the file's bytes as a DataUrl and copy them into the Image element
     8. Wait until the Image finishes loading the image
     9. Read the image element's natural width and height
     10. Pass the File handle into a HTML5 Canvas lib (we need the XIFF headers to auto rotate, XIFF headers are not available in DataUrl)
     11. The Canvas errors because it's a wrong type, e.g., TIFF, we abort and notify user
     12. Instruct the Canvas lib to keep resizing the image if it exceeds a maximum width or height,
     extract meta data, and auto-orient based on XIFF metadata.  It uses a "contain" operation which retains
     it's width to height pixel ratio.
     13. Call a function on the Canvas element to turn the Canvas into a JPEG of quality 50%.
     14. Once in a Blob with get the blob size in bytes and a human friendly display size
     15. In order to more easily manage the image, we convert the Blob to a DataUrl again.
     16. Pass the DataUrl into a hash algorithm to create an identifier and to check if the image has already been uploaded
     17. Next we check the final size of the image to ensure it's not to small in resolution
     (arguably this could've been done earlier), if too small we notify user
     18. Finally, the image is saved into the user's ongoing EA/PA application including localstorage
     19. The image is displayed to user as a thumbnail

     */
    /*
         System processing steps
    
         1. User clicks browse or drag-n-drops an file
         2. For browse case, the browser is told to only accept mime type image/*, .JPG, .GIF, .PNG, etc,
         however user can override and for drag-n-drop we don't can't impose this filter
         4. Using the HTML5 File API, we open a handle on the file
         5. Read the filename for later display to the user
         6. Create a hidden Image element in the browser's DOM
         7. Read the file's bytes as a DataUrl and copy them into the Image element
         8. Wait until the Image finishes loading the image
         9. Read the image element's natural width and height
         10. Pass the File handle into a HTML5 Canvas lib (we need the XIFF headers to auto rotate, XIFF headers are not available in DataUrl)
         11. The Canvas errors because it's a wrong type, e.g., TIFF, we abort and notify user
         12. Instruct the Canvas lib to keep resizing the image if it exceeds a maximum width or height,
         extract meta data, and auto-orient based on XIFF metadata.  It uses a "contain" operation which retains
         it's width to height pixel ratio.
         13. Call a function on the Canvas element to turn the Canvas into a JPEG of quality 50%.
         14. Once in a Blob with get the blob size in bytes and a human friendly display size
         15. In order to more easily manage the image, we convert the Blob to a DataUrl again.
         16. Pass the DataUrl into a hash algorithm to create an identifier and to check if the image has already been uploaded
         17. Next we check the final size of the image to ensure it's not to small in resolution
         (arguably this could've been done earlier), if too small we notify user
         18. Finally, the image is saved into the user's ongoing EA/PA application including localstorage
         19. The image is displayed to user as a thumbnail
    
         */
    /**
     * @return {?}
     */
    FileUploaderComponent.prototype.ngOnInit = /*
         System processing steps
    
         1. User clicks browse or drag-n-drops an file
         2. For browse case, the browser is told to only accept mime type image/*, .JPG, .GIF, .PNG, etc,
         however user can override and for drag-n-drop we don't can't impose this filter
         4. Using the HTML5 File API, we open a handle on the file
         5. Read the filename for later display to the user
         6. Create a hidden Image element in the browser's DOM
         7. Read the file's bytes as a DataUrl and copy them into the Image element
         8. Wait until the Image finishes loading the image
         9. Read the image element's natural width and height
         10. Pass the File handle into a HTML5 Canvas lib (we need the XIFF headers to auto rotate, XIFF headers are not available in DataUrl)
         11. The Canvas errors because it's a wrong type, e.g., TIFF, we abort and notify user
         12. Instruct the Canvas lib to keep resizing the image if it exceeds a maximum width or height,
         extract meta data, and auto-orient based on XIFF metadata.  It uses a "contain" operation which retains
         it's width to height pixel ratio.
         13. Call a function on the Canvas element to turn the Canvas into a JPEG of quality 50%.
         14. Once in a Blob with get the blob size in bytes and a human friendly display size
         15. In order to more easily manage the image, we convert the Blob to a DataUrl again.
         16. Pass the DataUrl into a hash algorithm to create an identifier and to check if the image has already been uploaded
         17. Next we check the final size of the image to ensure it's not to small in resolution
         (arguably this could've been done earlier), if too small we notify user
         18. Finally, the image is saved into the user's ongoing EA/PA application including localstorage
         19. The image is displayed to user as a thumbnail
    
         */
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var dragOverStream = fromEvent(this.dropZone.nativeElement, 'dragover');
        /**
         * Must cancel the dragover event in order for the drop event to work.
         */
        dragOverStream.pipe(map((/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            return event;
        }))).subscribe((/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            // console.log('Cancel dragover event.');
            evt.preventDefault();
        }));
        /** @type {?} */
        var dropStream = fromEvent(this.dropZone.nativeElement, 'drop');
        /** @type {?} */
        var filesArrayFromDrop = dropStream.pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.preventDefault();
            return event.dataTransfer.files;
        })));
        /** @type {?} */
        var browseFileStream = fromEvent(this.browseFileRef.nativeElement, 'change');
        // const captureFileStream = fromEvent<Event>(this.captureFileRef.nativeElement, 'change');
        merge(merge(browseFileStream).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.preventDefault();
            return event.target['files'];
        }))), filesArrayFromDrop).pipe(filter((/**
         * @param {?} files
         * @return {?}
         */
        function (files) {
            console.log('files');
            return !!files && files.length && files.length > 0;
        })), flatMap((/**
         * @param {?} fileList
         * @return {?}
         */
        function (fileList) {
            return _this.observableFromFiles(fileList, new CommonImageScaleFactorsImpl(1, 1));
        })), filter((/**
         * @param {?} mspImage
         * @return {?}
         */
        function (mspImage) {
            /** @type {?} */
            var imageExists = FileUploaderComponent.checkImageExists(mspImage, _this.images);
            if (imageExists) {
                _this.handleError(CommonImageError.AlreadyExists, mspImage);
                _this.resetInputFields();
            }
            return !imageExists;
        })), 
        // TODO - Is this necessary? Can likely be removed as it's exactly identical to the preceding.
        filter((/**
         * @param {?} mspImage
         * @return {?}
         */
        function (mspImage) {
            /** @type {?} */
            var imageExists = FileUploaderComponent.checkImageExists(mspImage, _this.images);
            if (imageExists) {
                _this.handleError(CommonImageError.AlreadyExists, mspImage);
                _this.resetInputFields();
            }
            return !imageExists;
        })), filter((/**
         * @param {?} mspImage
         * @return {?}
         */
        function (mspImage) {
            /** @type {?} */
            var imageSizeOk = _this.checkImageDimensions(mspImage);
            if (!imageSizeOk) {
                _this.handleError(CommonImageError.TooSmall, mspImage);
                _this.resetInputFields();
            }
            return imageSizeOk;
        }))).subscribe((/**
         * @param {?} file
         * @return {?}
         */
        function (file) {
            _this.handleImageFile(file);
            _this.resetInputFields();
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            console.log('Error in loading image: %o', error);
            /**
             * Handle the error if the image is gigantic that after
             * 100 times of scaling down by 30% on each step, the image
             * is still over 1 MB.
             */
            if (error.errorCode) {
                if (CommonImageError.TooBig === error.errorCode) {
                    _this.handleError(CommonImageError.TooBig, error.image);
                }
                else if (CommonImageError.CannotOpen === error.errorCode) {
                    if (!error.image) {
                        error.image = new CommonImage();
                        if (error.rawImageFile) {
                            error.image.name = error.rawImageFile.name;
                        }
                    }
                    _this.handleError(CommonImageError.CannotOpen, error.image);
                }
                else if (CommonImageError.CannotOpenPDF === error.errorCode) {
                    _this.handleError(CommonImageError.CannotOpenPDF, error.image, error.errorDescription);
                }
                else {
                    throw error;
                }
            }
        }), (/**
         * @return {?}
         */
        function () {
            console.log('completed loading image');
        }));
    };
    /**
     * @param {?} var1
     * @return {?}
     */
    FileUploaderComponent.prototype.test = /**
     * @param {?} var1
     * @return {?}
     */
    function (var1) {
        console.log(var1);
    };
    /**
     * @return {?}
     */
    FileUploaderComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var imagePlaceholderEnterKeyStream = merge(fromEvent(this.imagePlaceholderRef.nativeElement, 'keyup'), fromEvent(this.selectFileLabelRef.nativeElement, 'keyup')).pipe(filter((/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) { return evt.key === 'Enter'; })));
        merge(fromEvent(this.imagePlaceholderRef.nativeElement, 'click'), 
        // fromEvent<Event>(this.uploadInstructionRef.nativeElement, 'click'),
        imagePlaceholderEnterKeyStream).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.preventDefault();
            return event;
        }))).subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { _this.browseFileRef.nativeElement.click(); }));
    };
    /**
     * Solve size in this equation: size * 0.8to-the-power-of30 < 1MB, size
     * will be the max image size this application can accept and scale down
     * to under 1MB. In this case: size < 807 MB
     *
     * 30 is the number of retries. the value for maxRetry passed to retryStrategy
     * function.
     *
     * If: size * 0.8to-the-power-of40 < 1MB, then size < 1262 MB.
     *
     * Note: 0.8 is the self.appConstants.images.reductionScaleFactor defined in global.js
     *
     *
     * @param file
     * @param scaleFactors
     */
    /**
     * Solve size in this equation: size * 0.8to-the-power-of30 < 1MB, size
     * will be the max image size this application can accept and scale down
     * to under 1MB. In this case: size < 807 MB
     *
     * 30 is the number of retries. the value for maxRetry passed to retryStrategy
     * function.
     *
     * If: size * 0.8to-the-power-of40 < 1MB, then size < 1262 MB.
     *
     * Note: 0.8 is the self.appConstants.images.reductionScaleFactor defined in global.js
     *
     *
     * @param {?} fileList
     * @param {?} scaleFactors
     * @return {?}
     */
    FileUploaderComponent.prototype.observableFromFiles = /**
     * Solve size in this equation: size * 0.8to-the-power-of30 < 1MB, size
     * will be the max image size this application can accept and scale down
     * to under 1MB. In this case: size < 807 MB
     *
     * 30 is the number of retries. the value for maxRetry passed to retryStrategy
     * function.
     *
     * If: size * 0.8to-the-power-of40 < 1MB, then size < 1262 MB.
     *
     * Note: 0.8 is the self.appConstants.images.reductionScaleFactor defined in global.js
     *
     *
     * @param {?} fileList
     * @param {?} scaleFactors
     * @return {?}
     */
    function (fileList, scaleFactors) {
        var _this = this;
        /**
         * Previously this was set in appConstants, but that's removed from the common lib.
         * @type {?}
         */
        var reductionScaleFactor = 0.8;
        console.log('obserablveFromFiles');
        // Init
        /** @type {?} */
        var self = this;
        //    let  pageNumber = Math.max(...self.images.concat( self.application.getAllImages()).map(function(o) {return o.attachmentOrder; }), 0) + 1 ;
        /** @type {?} */
        var pageNumber = Math.max.apply(Math, __spread(self.images.map((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return o.attachmentOrder; })), [0])) + 1;
        // Create our observer
        /** @type {?} */
        var fileObservable = Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            scaleFactors = scaleFactors.scaleDown(reductionScaleFactor);
            for (var fileIndex = 0; fileIndex < fileList.length; fileIndex++) {
                /** @type {?} */
                var file = fileList[fileIndex];
                console.log('Start processing file ' + fileIndex + ' of ' + fileList.length + ' %s of size %s bytes %s type', file.name, file.size, file.type);
                /* Previously set in appConstants */
                /** @type {?} */
                var pdfScaleFactor = 2.0;
                // let mspImage: MspImage = new MspImage();
                // let reader: FileReader = new FileReader();
                // // Copy file properties
                // mspImage.name = file.name;
                if (file.type === 'application/pdf') {
                    // this.logService.log({name: file.name + ' Received in Upload',
                    //     UUID: self.dataService.getMspUuid()}, 'File_Upload');
                    /**
                     *  Page number logic :
                     *      Images - Assign current page number whichever is available..so get the current page number , pass it to call back [reserve it] and increment
                     *      PDF    -  we dont know how many pages..so cant get current number and keep it since it can be multiple pages... so start assigning later point
                     *      when PDF is totally read..
                     *
                     *  */
                    _this.readPDF(file, pdfScaleFactor, (/**
                     * @param {?} images
                     * @param {?} pdfFile
                     * @return {?}
                     */
                    function (images, pdfFile) {
                        // this.logService.log({name: file.name + 'is successfully split into ' + images.length + ' images',
                        // UUID: self.dataService.getMspUuid()}, 'File_Upload');
                        images.map((/**
                         * @param {?} image
                         * @param {?} index
                         * @return {?}
                         */
                        function (image, index) {
                            image.name = pdfFile.name;
                            _this.resizeImage(image, self, scaleFactors, observer, pageNumber, true); // index starts from zero
                            pageNumber = pageNumber + 1;
                        }));
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        console.log('error' + JSON.stringify(error));
                        /** @type {?} */
                        var imageReadError = new CommonImageProcessingError(CommonImageError.CannotOpenPDF, error);
                        observer.error(imageReadError);
                    }));
                }
                else {
                    // Load image into img element to read natural height and width
                    _this.readImage(file, pageNumber, (/**
                     * @param {?} image
                     * @param {?} imageFile
                     * @param {?} nextPageNumber
                     * @return {?}
                     */
                    function (image, imageFile, nextPageNumber) {
                        image.id = imageFile.name; // .name deprecated, changed image.name to image.id
                        _this.resizeImage(image, self, scaleFactors, observer, nextPageNumber);
                    }), (
                    // can be ignored for bug, the log line is never called
                    // can be ignored for bug, the log line is never called
                    /**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        console.log('error' + JSON.stringify(error));
                        observer.error(error);
                    }));
                    pageNumber = pageNumber + 1;
                }
            }
            // retryWhen is potential issue!
        })).pipe(retryWhen(this.retryStrategy(32)));
        return fileObservable;
    };
    /**
     * @private
     * @param {?} image
     * @param {?} self
     * @param {?} scaleFactors
     * @param {?} observer
     * @param {?=} pageNumber
     * @param {?=} isPdf
     * @return {?}
     */
    FileUploaderComponent.prototype.resizeImage = /**
     * @private
     * @param {?} image
     * @param {?} self
     * @param {?} scaleFactors
     * @param {?} observer
     * @param {?=} pageNumber
     * @param {?=} isPdf
     * @return {?}
     */
    function (image, self, scaleFactors, observer, pageNumber, isPdf) {
        if (pageNumber === void 0) { pageNumber = 0; }
        if (isPdf === void 0) { isPdf = false; }
        // While it's still in an image, get it's height and width
        /** @type {?} */
        var mspImage = new CommonImage();
        /** @type {?} */
        var reader = new FileReader();
        console.log('image.name:' + image.id); // .name deprecated, changed image.name to image.id
        // Copy file properties
        mspImage.name = image.id;
        if (isPdf) {
            mspImage.name = image.name + '-page' + pageNumber; // Just give name to pdf
        }
        // Temporary so we don't have duplicate file names. TODO: Improve.
        //   mspImage.name += Math.ceil(Math.random()*100);
        mspImage.attachmentOrder = pageNumber;
        mspImage.naturalWidth = image.naturalWidth;
        mspImage.naturalHeight = image.naturalHeight;
        console.log("image file natural height and width:\n            " + mspImage.naturalHeight + " x " + mspImage.naturalWidth);
        // Canvas will force the change to a JPEG
        mspImage.contentType = 'image/jpeg'; // previously in appConstants
        // Scale the image by loading into a canvas
        console.log('Start scaling down the image using blueimp-load-image lib: ');
        /** @type {?} */
        var scaledImage = loadImage(image.src, (
        // NOTE: we pass the File ref here again even though its already read because we need the XIFF metadata
        /**
         * @param {?} canvas
         * @param {?} metadata
         * @return {?}
         */
        function (canvas, metadata) {
            // Canvas may be an Event when errors happens
            if (canvas instanceof Event) {
                self.handleError(CommonImageError.WrongType, mspImage);
                self.resetInputFields();
                return;
            }
            // Convert to blob to get size
            canvas.toBlob((/**
             * @param {?} blob
             * @return {?}
             */
            function (blob) {
                // Copy the blob properties
                mspImage.size = blob.size;
                // log image info (but only for the first time before any scaling)
                // if (s
                /** @type {?} */
                var fileName = mspImage.name;
                /** @type {?} */
                var nBytes = mspImage.size;
                /** @type {?} */
                var fileSize = '';
                /** @type {?} */
                var fileSizeUnit = '';
                /** @type {?} */
                var sOutput = nBytes + ' bytes';
                // optional code for multiples approximation
                for (var aMultiples = ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'], nMultiple = 0, nApprox = nBytes / 1024; nApprox > 1; nApprox /= 1024, nMultiple++) {
                    sOutput = nApprox.toFixed(3) + ' ' + aMultiples[nMultiple] + ' (' + nBytes + ' bytes)';
                    fileSize = nApprox.toFixed(0);
                    fileSizeUnit = aMultiples[nMultiple];
                    mspImage.sizeUnit = fileSizeUnit;
                }
                console.log("File " + fileName + " is scaled down to: " + sOutput);
                mspImage.sizeTxt = sOutput;
                // call reader with new transformed image
                reader.onload = (/**
                 * @param {?} evt
                 * @return {?}
                 */
                function (evt) {
                    mspImage.fileContent = evt.target.result;
                    mspImage.id = sha1(mspImage.fileContent);
                    // keep scaling down the image until the image size is
                    // under max image size
                    /**
                     * previously in appConstants
                     * @type {?}
                     */
                    var maxSizeBytes = 1048576;
                    if (mspImage.size > maxSizeBytes) {
                        console.log('File size after scaling down: %d, max file size allowed: %d', mspImage.size, maxSizeBytes);
                        /** @type {?} */
                        var imageTooBigError = new CommonImageProcessingError(CommonImageError.TooBig);
                        imageTooBigError.maxSizeAllowed = maxSizeBytes;
                        imageTooBigError.commonImage = mspImage;
                        observer.error(imageTooBigError);
                    }
                    else {
                        // log image info
                        //   self.logImageInfo("msp_file-uploader_after_resize_attributes", self.dataService.getMspUuid(), mspImage);
                        observer.next(mspImage);
                    }
                });
                reader.readAsDataURL(blob);
            }), 
            // What mime type to make the blob as and jpeg quality
            'image/jpeg', 0.5);
        }), {
            maxWidth: 2600 * scaleFactors.widthFactor,
            maxHeight: 3300 * scaleFactors.heightFactor,
            contain: true,
            canvas: true,
            meta: true,
            orientation: true
        });
    };
    /**
     * Max retry scaling down for maxRetry times.
     */
    /**
     * Max retry scaling down for maxRetry times.
     * @param {?} maxRetry
     * @return {?}
     */
    FileUploaderComponent.prototype.retryStrategy = /**
     * Max retry scaling down for maxRetry times.
     * @param {?} maxRetry
     * @return {?}
     */
    function (maxRetry) {
        return (/**
         * @param {?} errors
         * @return {?}
         */
        function (errors) {
            /**Done: COMPLETE THIS! For some reason can't get scan() to work, types always malformed.*/
            // return errors.pipe(
            //     // scan((acc, curr) => {acc + curr}, 0)
            //     scan((acc, error, index) => {
            //         return acc + error;
            //     }, 0)
            // );
            // Done: Unsure if we have to re-implement this line. It causes errors, but simply removing it may not be appropriate.
            // NOTE: RxJS-compat might be saving us here and "fixing" the errors. See if errors return when we remove rxjs-compat.
            // return errors.pipe(scan((acc, curr) => acc + curr, 0))
            return errors.pipe(scan((
            // return errors.pipe(
            // return errors.pipe(
            /**
             * @param {?} acc
             * @param {?} error
             * @param {?} index
             * @return {?}
             */
            function (acc, error, index) {
                // console.log('Error encountered: %o', error);;
                /**
                 * If the error is about file too big and we have not reach max retry
                 * yet, theyt keep going to scaling down.
                 */
                if (acc < maxRetry && error.errorCode === CommonImageError.TooBig) {
                    // console.log('Progressively scaling down the image, step %d.', index);
                    return acc + 1;
                }
                else {
                    /**
                     * For either conditions terminate the retry, propogate
                     * the error.
                     *
                     * 1. errors such as CannotRead or any other unknown errors
                     * not listed in MspImageError enum
                     * 2. Exceeded maxRetry
                     *
                     */
                    console.log('Re-throw this image process error: %o', error);
                    throw error;
                }
            }), 0), delay(2));
        });
    };
    /**
     * @private
     * @param {?} imageFile
     * @param {?} nextPageNumber
     * @param {?} callback
     * @param {?} invalidImageHanlder
     * @return {?}
     */
    FileUploaderComponent.prototype.readImage = /**
     * @private
     * @param {?} imageFile
     * @param {?} nextPageNumber
     * @param {?} callback
     * @param {?} invalidImageHanlder
     * @return {?}
     */
    function (imageFile, nextPageNumber, callback, invalidImageHanlder) {
        /** @type {?} */
        var reader = new FileReader();
        reader.onload = (/**
         * @param {?} progressEvt
         * @return {?}
         */
        function (progressEvt) {
            console.log('loading image into an img tag: %o', progressEvt);
            // Load into an image element
            /** @type {?} */
            var imgEl = document.createElement('img');
            imgEl.src = ((/** @type {?} */ (reader.result)));
            // Wait for onload so all properties are populated
            imgEl.onload = (/**
             * @param {?} args
             * @return {?}
             */
            function (args) {
                console.log('Completed image loading into an img tag: %o', args);
                return callback(imgEl, imageFile, nextPageNumber);
            });
            imgEl.onerror =
                (/**
                 * @param {?} args
                 * @return {?}
                 */
                function (args) {
                    // log it to the console
                    console.log('This image cannot be opened/read, it is probably an invalid image. %o', args);
                    // throw new Error('This image cannot be opened/read');
                    /** @type {?} */
                    var imageReadError = new CommonImageProcessingError(CommonImageError.CannotOpen);
                    imageReadError.rawImageFile = imageFile;
                    return invalidImageHanlder(imageReadError);
                });
        });
        reader.readAsDataURL(imageFile);
    };
    /**
     * @private
     * @param {?} pdfFile
     * @param {?} pdfScaleFactor
     * @param {?} callback
     * @param {?} error
     * @return {?}
     */
    FileUploaderComponent.prototype.readPDF = /**
     * @private
     * @param {?} pdfFile
     * @param {?} pdfScaleFactor
     * @param {?} callback
     * @param {?} error
     * @return {?}
     */
    function (pdfFile, pdfScaleFactor, callback, error) {
        PDFJS.disableWorker = true;
        PDFJS.disableStream = true;
        /** @type {?} */
        var reader = new FileReader();
        /** @type {?} */
        var currentPage = 1;
        /** @type {?} */
        var canvas = document.createElement('canvas');
        /** @type {?} */
        var imgElsArray = [];
        /** @type {?} */
        var ctx = canvas.getContext('2d');
        reader.onload = (/**
         * @param {?} progressEvt
         * @return {?}
         */
        function (progressEvt) {
            /** @type {?} */
            var docInitParams = { data: reader.result };
            // TODO - The 'as any' was added when porting to common library from MSP
            PDFJS.getDocument(((/** @type {?} */ (docInitParams)))).then((/**
             * @param {?} pdfdoc
             * @return {?}
             */
            function (pdfdoc) {
                /** @type {?} */
                var numPages = pdfdoc.numPages;
                if (currentPage <= pdfdoc.numPages) {
                    getPage();
                }
                /**
                 * @return {?}
                 */
                function getPage() {
                    pdfdoc.getPage(currentPage).then((/**
                     * @param {?} page
                     * @return {?}
                     */
                    function (page) {
                        /** @type {?} */
                        var viewport = page.getViewport(pdfScaleFactor);
                        canvas.height = viewport.height;
                        canvas.width = viewport.width;
                        /** @type {?} */
                        var renderContext = {
                            canvasContext: ctx,
                            viewport: viewport
                        };
                        page.render(renderContext).then((/**
                         * @return {?}
                         */
                        function () {
                            /** @type {?} */
                            var imgEl = document.createElement('img');
                            imgEl.src = canvas.toDataURL();
                            imgElsArray.push(imgEl);
                            if (currentPage < numPages) {
                                currentPage++;
                                getPage();
                            }
                            else {
                                callback(imgElsArray, pdfFile);
                            }
                        }));
                    }), (/**
                     * @param {?} errorReason
                     * @return {?}
                     */
                    function (errorReason) {
                        error(errorReason);
                    }));
                }
            }), (/**
             * @param {?} errorReason
             * @return {?}
             */
            function (errorReason) {
                error(errorReason);
            }));
        });
        reader.readAsArrayBuffer(pdfFile);
    };
    /**
     * Non reversible image filter to take an existing canvas and make it gray scale
     * @param canvas
     */
    /**
     * Non reversible image filter to take an existing canvas and make it gray scale
     * @param {?} canvas
     * @return {?}
     */
    FileUploaderComponent.prototype.makeGrayScale = /**
     * Non reversible image filter to take an existing canvas and make it gray scale
     * @param {?} canvas
     * @return {?}
     */
    function (canvas) {
        /** @type {?} */
        var context = canvas.getContext('2d');
        /** @type {?} */
        var imageData = context.getImageData(0, 0, canvas.width, canvas.height);
        /** @type {?} */
        var data = imageData.data;
        for (var i = 0; i < data.length; i += 4) {
            /** @type {?} */
            var brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
            // red
            data[i] = brightness;
            // green
            data[i + 1] = brightness;
            // blue
            data[i + 2] = brightness;
        }
        // overwrite original image
        context.putImageData(imageData, 0, 0);
    };
    /**
     * @param {?} mspImage
     * @return {?}
     */
    FileUploaderComponent.prototype.handleImageFile = /**
     * @param {?} mspImage
     * @return {?}
     */
    function (mspImage) {
        console.log('image size (bytes) after compression: ' + mspImage.size);
        if (this.images.length >= 50) {
            // log it
            // this.logImageInfo('msp_file-uploader_error', this.dataService.getMspUuid(),
            //     mspImage, `Number of image files exceeds max of ${50}`);
            // log to console
            console.log("Max number of image file you can upload is " + 50 + ".\n      This file " + mspImage.name + " was not uploaded.");
        }
        else {
            this.images.push(mspImage);
            this.imagesChange.emit(this.images);
            this.showError = false;
            this.noIdImage = false;
        }
    };
    /**
     * @param {?} error
     * @param {?} mspImage
     * @param {?=} errorDescription
     * @return {?}
     */
    FileUploaderComponent.prototype.handleError = /**
     * @param {?} error
     * @param {?} mspImage
     * @param {?=} errorDescription
     * @return {?}
     */
    function (error, mspImage, errorDescription) {
        if (!mspImage) {
            mspImage = new CommonImage();
        }
        // just add the error to mspImage
        mspImage.error = error;
        // console.log("error with image: ", mspImage);
        this.errorDocument.emit(mspImage);
    };
    /**
     * Reset input fields so that user can delete a file and
     * immediately upload that file again.
     */
    /**
     * Reset input fields so that user can delete a file and
     * immediately upload that file again.
     * @return {?}
     */
    FileUploaderComponent.prototype.resetInputFields = /**
     * Reset input fields so that user can delete a file and
     * immediately upload that file again.
     * @return {?}
     */
    function () {
        // let brosweFileInputElement = this.browseFileRef.nativeElement;
        // let captureFileInputElement = this.captureFileRef.nativeElement;
        this.browseFileRef.nativeElement.value = '';
        // this.captureFileRef.nativeElement.value = '';
    };
    /**
     * @param {?} mspImage
     * @return {?}
     */
    FileUploaderComponent.prototype.deleteImage = /**
     * @param {?} mspImage
     * @return {?}
     */
    function (mspImage) {
        this.resetInputFields();
        this.images = this.images.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.uuid !== mspImage.uuid; }));
        this.imagesChange.emit(this.images);
        // If there are no images yet, we have to reset the input so it triggers 'required'.
        if (this.required && this.images.length <= 0) {
            console.log('No images, resetting input');
            // this.fileControl.value = '';
            this.fileControl.setErrors({ 'required': true });
        }
    };
    /**
     * Log image attributes
     * @param mspImage
     */
    /**
     * Log image attributes
     * @private
     * @param {?} title
     * @param {?} applicationId
     * @param {?} mspImage
     * @param {?=} additionalInfo
     * @return {?}
     */
    FileUploaderComponent.prototype.logImageInfo = /**
     * Log image attributes
     * @private
     * @param {?} title
     * @param {?} applicationId
     * @param {?} mspImage
     * @param {?=} additionalInfo
     * @return {?}
     */
    function (title, applicationId, mspImage, additionalInfo) {
        // TODO!
        // // create log entry
        // const log: LogEntry = new LogEntry();
        // log.applicationId = applicationId;
        // const now = moment();
        // log.mspTimestamp = now.toISOString();
        // log.applicationPhase = title + ':  mspImageId: ' + mspImage.id
        //     + '  mspImageUuid: ' + mspImage.uuid
        //     + '  mspImageSize: ' + mspImage.size
        //     + '  mspImageWidth: ' + mspImage.naturalWidth
        //     + '  mspImageHeight: ' + mspImage.naturalHeight
        //     + '  mspImageContentType: ' + mspImage.contentType
        //     + (additionalInfo ? '  ' + additionalInfo : '');
        // // send it while subscribing to response
        // this.logService.logIt(log, title).subscribe(
        //     (response) => {
        //         // console.log('log rest service response: ');
        //         // console.log(response);
        //     },
        //     (error) => {
        //         console.log('HTTP error response from logging service: ');
        //         console.log(error);
        //     },
        //     () => {
        //         // console.log('log rest service completed!');
        //     }
        // );
    };
    /**
     * Return true if the image size is within range
     * @param file
     */
    /**
     * Return true if the image size is within range
     * @param {?} file
     * @return {?}
     */
    FileUploaderComponent.prototype.checkImageDimensions = /**
     * Return true if the image size is within range
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (file.naturalHeight < 0 ||
            file.naturalWidth < 0) {
            return false;
        }
        return true;
    };
    /**
     * @return {?}
     */
    FileUploaderComponent.prototype.isValid = /**
     * @return {?}
     */
    function () {
        console.log('isValid', this.images);
        if (this.required) {
            return this.images && this.images.length > 0;
        }
        return true;
    };
    FileUploaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-file-uploader',
                    template: "<div class=\"dropzone\" #dropZone [ngClass]='{\"has-error\": fileControl?.touched && fileControl?.errors?.required}'>\n\n  <div class=\"instruction-zone d-flex align-items-center flex-wrap flex-sm-nowrap flex-column flex-sm-row\">\n    <i class=\"fa fa-cloud-upload fa-4x d-inline-block upload-icon\" aria-hidden=\"true\" #imagePlaceholderRef tabindex=\"0\"></i>\n\n    <input type=\"file\" id=\"fileUploadBrowse-{{id}}\" #browseFileRef ngModel accept=\"image/*,application/pdf\" style=\"display:none;\"\n            tabindex=\"0\" multiple name='fileUploadBrowse-{{id}}' [required]='required && images.length === 0' />\n    <label for=\"fileUploadBrowse-{{id}}\" class=\"file-upload-label d-inline-block ml-3\" #selectFileLabel tabindex=\"0\">\n      <span class='h2 color-body'>Select a file</span>\n      <span class='d-block description'>{{ instructionText }}</span>\n    </label>\n    \n    <!-- TODO - STYLE/ENABLE/TEST THE BELOW FOR MOBILE ONLY! Also need to test on a phone after deploying to OpenShift-->\n    <!-- <span class=\"d-block d-sm-none\">or</span>\n    <input type=\"file\" id=\"fileUploadUseCamera-{{id}}\" #captureFileRef accept=\"image/*,application/pdf\" capture=\"camera\"\n            tabindex=\"0\" multiple />\n    <span class=\"fa fa-camera d-block d-sm-none fa-4x\" aria-hidden=\"true\"></span>\n    <label for=\"fileUploadUseCamera-{{id}}\" class=\"file-upload-label description d-block d-sm-none\" tabindex=\"0\">\n      take a photo\n    </label> -->\n    \n  </div>\n  \n  <div *ngIf=\"fileControl?.touched\" role=\"alert\" class='error-container' aria-live=\"assertive\">\n    <div class=\"text-danger\" *ngIf=\"fileControl?.errors?.required\">\n      {{errorMessages.required}}\n    </div>\n  </div>\n\n  <div class=\"preview-zone\">\n    <div *ngFor=\"let mspImage of images\" class=\"preview-item\">\n      <common-thumbnail [imageObject]=\"mspImage\" (deleteImage)=\"deleteImage($event)\">\n      </common-thumbnail>\n    </div>\n  </div>\n\n  <!-- The sole purpose of this element is to maintain the drop zone to an \n        large size to display on screen.\n      -->\n  <div class=\"preview-zone\">\n    <div class=\"preview-item\">\n    </div>\n  </div>\n\n</div>\n\n<!-- This hidden canvas is used to transform / resize images -->\n<canvas #canvas style=\"display:none;\">\n\n</canvas>\n",
                    viewProviders: [{ provide: ControlContainer, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NgForm; })) }],
                    styles: [".color-body{color:#494949}.description{font-weight:400}.dropzone{border:2px dashed #d3d3d3;margin-bottom:10px;border-radius:8px;padding:2em 4em}.dropzone.has-error{border-color:#a94442}.dropzone .instruction-zone{margin:10px 5px 5px;text-align:left}.dropzone .instruction-zone input{display:none}.dropzone .instruction-zone .file-upload-label{color:#494949}.dropzone .instruction-zone .file-upload-label:hover{text-decoration:none;cursor:pointer}.dropzone .preview-zone{display:flex;flex-wrap:wrap;justify-content:left;align-items:left}.dropzone .preview-zone .preview-item{position:relative;height:120px;text-align:left;margin-left:6rem;margin-bottom:1.5rem}.dropzone .preview-zone .preview-item .icon-upload{opacity:.3;margin:0 auto 15px}.dropzone .preview-zone .preview-item .icon-upload:hover{cursor:pointer;opacity:.6}.dropzone .preview-zone .preview-item .text-upload:hover{cursor:pointer}.dropzone .preview-zone .error-style{color:red;font-weight:700}.dropzone .mobileShow{display:none}@media only screen and (min-device-width:320px) and (max-device-width:480px){.dropzone .mobileShow{display:inline}}"]
                }] }
    ];
    /** @nocollapse */
    FileUploaderComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: ChangeDetectorRef },
        { type: Router },
        { type: ControlContainer }
    ]; };
    FileUploaderComponent.propDecorators = {
        dropZone: [{ type: ViewChild, args: ['dropZone',] }],
        browseFileRef: [{ type: ViewChild, args: ['browseFileRef',] }],
        imagePlaceholderRef: [{ type: ViewChild, args: ['imagePlaceholderRef',] }],
        selectFileLabelRef: [{ type: ViewChild, args: ['selectFileLabel',] }],
        images: [{ type: Input }],
        imagesChange: [{ type: Output }],
        id: [{ type: Input }],
        showError: [{ type: Input }],
        required: [{ type: Input }],
        instructionText: [{ type: Input }],
        errorMessages: [{ type: Input }],
        canvas: [{ type: ViewChild, args: ['canvas',] }],
        errorDocument: [{ type: Output }]
    };
    return FileUploaderComponent;
}(Base));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThumbnailComponent = /** @class */ (function () {
    function ThumbnailComponent(viewContainerRef) {
        this.reviewMode = false;
        this.deleteImage = new EventEmitter();
        this.scaledWidth = 300;
        this.viewContainerRef = viewContainerRef;
    }
    /**
     * @return {?}
     */
    ThumbnailComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var scaledWidthString = (180 * this.imageObject.naturalWidth / this.imageObject.naturalHeight).toFixed(0);
        // console.log('scaled width: ' + scaledWidthString);
        this.scaledWidth = parseInt(scaledWidthString, 10);
        if (this.scaledWidth > 250) {
            // console.log('Scaled width > 250, drop it down to 250');
            this.scaledWidth = 250;
        }
        else if (this.scaledWidth < 30) {
            this.scaledWidth = 100;
        }
        if (isNaN(this.scaledWidth)) {
            this.scaledWidth = 300;
        }
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    ThumbnailComponent.prototype.delete = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        console.log('ThumbnailComponent:Delete from thumbnail: %o', evt);
        console.log('ThumbnailComponent:imageObject:', JSON.stringify(this.imageObject, null, 2));
        this.deleteImage.emit(this.imageObject);
    };
    /**
     * @return {?}
     */
    ThumbnailComponent.prototype.showFullSizeView = /**
     * @return {?}
     */
    function () {
        this.fullSizeViewModal.config.backdrop = false;
        this.fullSizeViewModal.show();
    };
    /**
     * @return {?}
     */
    ThumbnailComponent.prototype.hideFullSizeView = /**
     * @return {?}
     */
    function () {
        this.fullSizeViewModal.hide();
    };
    ThumbnailComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-thumbnail',
                    template: "<div class=\"thumbnail-container\">\n  <img [src]=\"imageObject.fileContent\" alt=\"\" tabindex=\"0\"\n    [ngClass]=\"{'image-thumbnail': scaledWidth <= 300, 'image-thumbnail-width-priority': scaledWidth > 300}\"\n    (click)=\"showFullSizeView()\">\n  <div class=\"action-strip\" *ngIf=\"!reviewMode\">\n    <a href=\"javascript:void(0)\" (click)=\"delete($event)\" class='text-danger' tabindex=\"0\">Remove</a>\n  </div>\n</div>\n\n<div bsModal #fullSizeViewModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myLargeModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-lg\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h4 class=\"modal-title\">{{imageObject.name}}</h4>\n        <button type=\"button\" class=\"close\" (click)=\"hideFullSizeView()\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"row\">\n          <div class=\"col-md-12\" >\n            <img [src]=\"imageObject.fileContent\" alt=\"{{imageObject.name}}\" class=\"center-block img-fluid\">\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>",
                    styles: [".thumbnail-container{transition:.3s;-webkit-transform:translateY(0);transform:translateY(0)}.thumbnail-container .image-thumbnail,.thumbnail-container .image-thumbnail-width-priority{padding:2px 2px 0;border-radius:5px 5px 0 0}.thumbnail-container .image-thumbnail-width-priority:hover,.thumbnail-container .image-thumbnail:hover{cursor:zoom-in}.thumbnail-container .image-thumbnail{max-height:100px;height:auto;max-width:100%}.thumbnail-container .image-thumbnail-width-priority{max-width:270px;width:auto;max-height:100%}.thumbnail-container:hover{box-shadow:0 15px 10px -10px rgba(0,0,0,.1);-webkit-transform:translateY(-5px);transform:translateY(-5px)}.thumbnail-container:hover .action-strip{background:#ececec}.thumbnail-container .action-strip{height:2em;border-radius:0 0 5px 5px;text-align:right;font-size:small;margin:0 2px;color:#a94442;padding:.3em;transition:.3s}.thumbnail-container .action-strip a{text-decoration:none}"]
                }] }
    ];
    /** @nocollapse */
    ThumbnailComponent.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    ThumbnailComponent.propDecorators = {
        imageObject: [{ type: Input }],
        reviewMode: [{ type: Input }],
        deleteImage: [{ type: Output }],
        fullSizeViewModal: [{ type: ViewChild, args: ['fullSizeViewModal',] }]
    };
    return ThumbnailComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * FormSubmitBar is similar to FormActionBar, but it is meant to be used with
 * (ngSubmit) on the form. Make sure to enclose FormSubmitBar inside of the form
 * in question.
 */
var FormSubmitBarComponent = /** @class */ (function () {
    function FormSubmitBarComponent() {
        this.submitLabel = 'Continue';
        this.canContinue = true;
        this.isLoading = false;
        this.defaultColor = true;
        this.btnClick = new EventEmitter();
        /**
         * Is the component nested inside a form, and not properly full-width in a
         * page layout? We add negative margins to space out.
         *
         * Currently tihs only works for the 'blank' layout type for the page
         * framework, but would be easy to extend by adding more negative classes as
         * need be.
         */
        this.increaseWidth = false;
    }
    /**
     * @return {?}
     */
    FormSubmitBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    FormSubmitBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-form-submit-bar',
                    template: "<div class=\"form-action-bar form-bar\" [ngClass]=\"{disabled: !canContinue, 'mx-lg-n5 mx-md-n3 mb-n3 mt-3': increaseWidth}\">\n        <button class=\"btn btn-lg {{defaultColor ? 'btn-primary' : 'btn-secondary' }} submit\"\n                [ngClass]=\"{disabled: !canContinue || isLoading}\"\n                type='submit'>\n          <ng-container *ngIf=\"!isLoading; else loadingSpinner\"> {{submitLabel}} </ng-container>\n          \n        </button>\n    </div>\n    \n    <ng-template #loadingSpinner>\n        <i class=\"fa fa-spinner fa-pulse fa-fw\"></i>\n    </ng-template>",
                    viewProviders: [{ provide: ControlContainer, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NgForm; })) }],
                    styles: [".form-action-bar{display:flex;justify-content:flex-end;padding:1em;background-color:#cdd9e4;transition:background-color .3s;position:-webkit-sticky;position:sticky;bottom:0;z-index:10;left:5rem;right:5rem}.form-action-bar.disabled{background-color:#d5d9dd}@media (max-width:991.98px){.form-action-bar{left:2.5rem;right:2.5rem}}.submit{min-width:240px}@media (max-width:767.98px){.form-action-bar{left:0;right:0}.submit{min-width:100%}}.btn{white-space:normal!important;word-wrap:break-word}"]
                }] }
    ];
    /** @nocollapse */
    FormSubmitBarComponent.ctorParameters = function () { return []; };
    FormSubmitBarComponent.propDecorators = {
        submitLabel: [{ type: Input }],
        canContinue: [{ type: Input }],
        isLoading: [{ type: Input }],
        defaultColor: [{ type: Input }],
        btnClick: [{ type: Output }],
        increaseWidth: [{ type: Input }]
    };
    return FormSubmitBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var LETTER = /[A-Z]/i;
// Ignore case here, then upperCase it via pipe.
/** @type {?} */
var NUMBER = /\d/;
/** @type {?} */
var SPACE = ' ';
var MaskModel = /** @class */ (function (_super) {
    __extends(MaskModel, _super);
    function MaskModel() {
        var _this = _super.call(this) || this;
        _this.valueChange = new EventEmitter();
        _this.disabled = false;
        _this.required = true;
        return _this;
    }
    /**
     * Upper cases letters in string
     */
    /**
     * Upper cases letters in string
     * @param {?} text
     * @return {?}
     */
    MaskModel.prototype.upperCasePipe = /**
     * Upper cases letters in string
     * @param {?} text
     * @return {?}
     */
    function (text) {
        return text.toUpperCase();
    };
    /**
     * Updates the value
     */
    /**
     * Updates the value
     * @param {?} value
     * @return {?}
     */
    MaskModel.prototype.onUpdate = /**
     * Updates the value
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Emit value without spaces
        this.valueChange.emit(value);
    };
    MaskModel.propDecorators = {
        value: [{ type: Input }],
        valueChange: [{ type: Output }],
        disabled: [{ type: Input }],
        required: [{ type: Input }]
    };
    return MaskModel;
}(Base));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PostalCodeComponent = /** @class */ (function (_super) {
    __extends(PostalCodeComponent, _super);
    function PostalCodeComponent() {
        var _this = _super.call(this) || this;
        _this.label = 'Postal Code';
        _this.displayMask = true;
        _this.maxlen = '250';
        _this.placeholder = 'A1A 1A1';
        _this.pcFormat = /^[A-Za-z][0-9][A-Za-z]\s?[0-9][A-Za-z][0-9]$/;
        _this.mask = [LETTER, NUMBER, LETTER, SPACE, NUMBER, LETTER, NUMBER];
        return _this;
    }
    /**
     * @return {?}
     */
    PostalCodeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    PostalCodeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-postal-code',
                    template: "<label class=\"control-label\">{{label}}</label>\n<div *ngIf=\"displayMask; else NoMask\">\n<input #postalRef=\"ngModel\"\n       class=\"form-control\"\n       spellcheck=\"false\"\n       type=\"text\"\n       id=\"postalCode_{{objectId}}\"\n       name=\"postalCode_{{objectId}}\"\n       [placeholder]=\"placeholder\"\n       [ngModel]=\"value\"\n       (ngModelChange)=\"onUpdate($event)\"\n       [textMask]=\"{mask: mask, pipe: upperCasePipe}\"\n       [pattern]='pcFormat'\n       [required]=\"required\"\n       [disabled]=\"disabled\" />\n\n  <!-- Error messages for input -->\n  <div *ngIf=\"!disabled && postalRef.touched\"\n        role=\"alert\"\n        class=\"error-container\"\n        aria-live=\"assertive\">\n    <div class=\"text-danger\" *ngIf=\"postalRef?.errors?.required\">\n      {{label}} is required.\n    </div>\n    <div class=\"text-danger\" *ngIf=\"postalRef?.errors?.pattern\">\n      Must be in the format {{placeholder}}.\n    </div>\n  </div>\n</div>\n\n<ng-template #NoMask>\n  <input class=\"form-control\"\n         #postalRef=\"ngModel\"\n         spellcheck=\"false\"\n         type=\"text\"\n         id=\"postalCode_{{objectId}}\"\n         name=\"postalCode_{{objectId}}\"\n         [ngModel]=\"value\"\n         (ngModelChange)=\"onUpdate($event)\"\n         [required]=\"required\"\n         [disabled]=\"disabled\"\n         maxlength=\"{{maxlen}}\"/>\n\n  <!-- Error messages for input -->\n  <div *ngIf=\"!disabled && postalRef.touched\"\n        role=\"alert\"\n        class=\"error-container\"\n        aria-live=\"assertive\">\n    <div class=\"text-danger\" *ngIf=\"postalRef?.errors?.required\">\n      Postal Code is required.\n    </div>\n  </div>\n</ng-template>\n",
                    // Re-use the same ngForm that it's parent is using. The component will show
                    // up in its parents `this.form`, and will auto-update `this.form.valid`
                    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PostalCodeComponent.ctorParameters = function () { return []; };
    PostalCodeComponent.propDecorators = {
        label: [{ type: Input }],
        displayMask: [{ type: Input }],
        maxlen: [{ type: Input }],
        placeholder: [{ type: Input }]
    };
    return PostalCodeComponent;
}(MaskModel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PageSectionComponent = /** @class */ (function () {
    function PageSectionComponent() {
        this.layout = 'tips';
    }
    /**
     * @return {?}
     */
    PageSectionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    PageSectionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-page-section',
                    template: "<div class=\"row\" [ngSwitch]=\"layout\">\n\n  <ng-container *ngSwitchCase=\"'tips'\">\n    <div class=\"col-md-8\">\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n    </div>\n    <div class=\"col-md-4 aside-col\">\n      <ng-container *ngTemplateOutlet=\"aside\"></ng-container>\n    </div>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"'double'\">\n    <div class=\"col-md-6\">\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n    </div>\n    <div class=\"col-md-6\">\n      <ng-container *ngTemplateOutlet=\"aside\"></ng-container>\n    </div>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"'noTips'\">\n      <div class=\"col-md-12\">\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n    </div>\n  </ng-container>\n\n</div>\n\n<!-- We use ng-template here to get around a bug with having multiple ng-contents in one template. By default, if there are duplicate ng-contents in a template Angular will select the very first one - even if latter ones are 'removed' by ngSwitch or ngIf.-->\n<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>\n\n<ng-template #aside>\n  <ng-content select='aside'></ng-content>\n</ng-template>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["common-page-section{display:block}.h5,h5{font-size:1rem;font-weight:700;margin-bottom:0}p+.h5,p+h5{margin-top:1.5rem}.aside-col aside{background:#f2f2f2;padding:1em;border-radius:5px}@media (min-width:768px){.aside-col aside{margin-top:1rem}}.aside-col aside ul{padding-left:0;list-style-type:none}.aside-col aside ul>li:before{content:\" - \";text-indent:-5px}"]
                }] }
    ];
    /** @nocollapse */
    PageSectionComponent.ctorParameters = function () { return []; };
    PageSectionComponent.propDecorators = {
        layout: [{ type: Input }]
    };
    return PageSectionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DropdownComponent = /** @class */ (function () {
    function DropdownComponent() {
        this.items = [];
        this.label = 'Default label';
        this.addTag = false;
        this.addTagText = 'Add';
        this._onChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { });
        this._onTouched = (/**
         * @return {?}
         */
        function () { });
    }
    /**
     * @return {?}
     */
    DropdownComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DropdownComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.model = value;
        // TODO - is markForCheck() necessary?
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DropdownComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DropdownComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    DropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-dropdown',
                    template: "<ng-select name='{{label}}'\n           labelForId='{{label}}'\n           [ngModel]='model'\n           (ngModelChange)='model=$event;'\n           [items]='items'\n           placeholder='{{ placeholder }}'\n           autoCorrect='{{ autocorrect }}'\n           addTag={{addTag}}\n           addTagText='Add question'\n           [required]='required'\n           (change)='_onChange($event)'\n           (blur)='_onTouched()'\n           (close)='_onTouched()'></ng-select>",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return DropdownComponent; }))
                        }
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DropdownComponent.ctorParameters = function () { return []; };
    DropdownComponent.propDecorators = {
        items: [{ type: Input }],
        label: [{ type: Input }],
        placeholder: [{ type: Input }],
        autocorrect: [{ type: Input }],
        addTag: [{ type: Input }],
        addTagText: [{ type: Input }],
        required: [{ type: Input }]
    };
    return DropdownComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ToggleComponent = /** @class */ (function (_super) {
    __extends(ToggleComponent, _super);
    function ToggleComponent() {
        var _this = _super.call(this) || this;
        _this.dataChange = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    ToggleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    ToggleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-toggle',
                    template: "<fieldset class=\"p-sm-1\">\n   <legend class=\"toggle--legend\">{{label}}</legend>\n   <div class=\"custom-radio custom-control custom-control-inline\">\n      <input class=\"custom-control-input \"\n         type=\"radio\"\n         id=\"no_{{objectId}}\"\n         name=\"selection_{{objectId}}\"\n         value=\"No\"\n         [checked]=\"data === false\"\n         (click)=\"dataChange.emit(false)\">\n      <label class=\"custom-control-label\" for=\"no_{{objectId}}\">No</label>\n   </div>\n   <div class=\"custom-radio custom-control custom-control-inline\">\n      <input class=\"custom-control-input\"\n         type=\"radio\"\n         id=\"yes_{{objectId}}\"\n         name=\"selection_{{objectId}}\"\n         value=\"Yes\"\n         [checked]=\"data === true\"\n         (click)=\"dataChange.emit(true)\">\n      <label class=\"custom-control-label\" for=\"yes_{{objectId}}\">Yes</label>\n   </div>\n</fieldset>\n\n",
                    styles: [".toggle--legend{font-size:inherit;font-weight:700}.custom-control{padding-right:1.5rem;padding-left:0}.custom-control-label{cursor:pointer}.custom-radio .custom-control-label::before{border:1.5px solid #000}.custom-control-label::before{top:0;width:1.3rem;height:1.3rem;background-color:#fcfcfc;left:1.75rem}.custom-control-label::after{top:0;width:1.3rem;height:1.3rem;left:1.75rem}.custom-radio .custom-control-input:checked~.custom-control-label::before{background-color:#fcfcfc;border-color:#036}.custom-control-input:checked~.custom-control-label::before{color:#fcfcfc;background-color:#fcfcfc;border-color:#036}.custom-radio .custom-control-input:checked~.custom-control-label::after{background-image:url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-3.75 -3.75 8.25 8.25'%3E%3Ccircle r='3.5' fill='%23000099'/%3E%3C/svg%3E\")!important}"]
                }] }
    ];
    /** @nocollapse */
    ToggleComponent.ctorParameters = function () { return []; };
    ToggleComponent.propDecorators = {
        data: [{ type: Input }],
        label: [{ type: Input }],
        dataChange: [{ type: Output }]
    };
    return ToggleComponent;
}(Base));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SharedCoreModule = /** @class */ (function () {
    function SharedCoreModule() {
    }
    SharedCoreModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        ProgressbarModule.forRoot(),
                        RouterModule,
                        NgxMyDatePickerModule.forRoot(),
                        ModalModule.forRoot(),
                        TextMaskModule,
                        NgSelectModule
                    ],
                    declarations: [
                        CoreBreadcrumbComponent,
                        FormActionBarComponent,
                        PageFrameworkComponent,
                        PasswordComponent,
                        WizardProgressBarComponent,
                        DateComponent,
                        DayValidationDirective,
                        DateFieldFormatDirective,
                        YearValidateDirective,
                        DatepickerComponent,
                        FileUploaderComponent,
                        ThumbnailComponent,
                        FormSubmitBarComponent,
                        PostalCodeComponent,
                        PageSectionComponent,
                        DropdownComponent,
                        ToggleComponent
                    ],
                    exports: [
                        CoreBreadcrumbComponent,
                        FormActionBarComponent,
                        PageFrameworkComponent,
                        PasswordComponent,
                        WizardProgressBarComponent,
                        DateComponent,
                        DayValidationDirective,
                        DateFieldFormatDirective,
                        YearValidateDirective,
                        DatepickerComponent,
                        FileUploaderComponent,
                        ThumbnailComponent,
                        FormSubmitBarComponent,
                        PostalCodeComponent,
                        PageSectionComponent,
                        DropdownComponent,
                        ToggleComponent
                    ],
                    providers: [
                        NgForm
                    ]
                },] }
    ];
    return SharedCoreModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SharedCoreModule, CoreBreadcrumbComponent as ɵa, DateFieldFormatDirective as ɵi, DateComponent as ɵg, DayValidationDirective as ɵh, YearValidateDirective as ɵj, DatepickerComponent as ɵk, DropdownComponent as ɵr, FileUploaderComponent as ɵl, FormActionBarComponent as ɵb, FormSubmitBarComponent as ɵn, PageFrameworkComponent as ɵc, PageSectionComponent as ɵq, PasswordComponent as ɵd, PostalCodeComponent as ɵo, ThumbnailComponent as ɵm, ToggleComponent as ɵs, WizardProgressBarComponent as ɵf, Base as ɵe, MaskModel as ɵp };

//# sourceMappingURL=moh-common-lib.js.map