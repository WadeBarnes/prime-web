{"version":3,"file":"moh-common-lib-captcha.js.map","sources":["ng://moh-common-lib/captcha/captcha-data.service.ts","ng://moh-common-lib/captcha/captcha.component.ts","ng://moh-common-lib/captcha/captcha.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n// import { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\n\n// payload returned from the server\n@Injectable()\nexport class ServerPayload {\n    nonce: string;\n    captcha: string;\n    validation: string;\n    expiry: string;\n}\n\n@Injectable()\nexport class CaptchaDataService {\n\n    constructor(private httpClient: HttpClient) { }\n    // private http: Http) { }\n\n    public fetchData(apiBaseUrl: string, nonce: string): Observable<HttpResponse<ServerPayload>> {\n        return this.httpClient\n            .post<ServerPayload>(\n                apiBaseUrl + '/captcha',\n                { nonce: nonce },\n                { observe: 'response' });\n    }\n\n    public verifyCaptcha(apiBaseUrl: string,\n                            nonce: string,\n                            answer: string,\n                            encryptedAnswer: string): Observable<HttpResponse<ServerPayload>> {\n        return this.httpClient\n            .post<ServerPayload>(\n                apiBaseUrl + '/verify/captcha',\n                { nonce: nonce, answer: answer, validation: encryptedAnswer },\n                { observe: 'response' });\n    }\n\n    public fetchAudio(apiBaseUrl: string, validation: string, translation?: string) {\n        const payload: any = { validation: validation };\n        if (translation) {\n            payload.translation = translation;\n        }\n        return this.httpClient\n            .post<string>(\n                apiBaseUrl + '/captcha/audio',\n                payload,\n                { observe: 'response' });\n    }\n    /*\n      fetchData(apiBaseUrl: string, nonce: string): Observable<Response> {\n        return this.http.post(apiBaseUrl + '/captcha', {nonce: nonce}, {});\n      }\n\n      verifyCaptcha(apiBaseUrl: string, nonce: string, answer: string, encryptedAnswer: string): Observable<Response> {\n        return this.http.post(apiBaseUrl + '/verify/captcha', {nonce: nonce, answer: answer, validation: encryptedAnswer}, {});\n      }\n\n      fetchAudio(apiBaseUrl: string, validation: string): Observable<Response> {\n        return this.http.post(apiBaseUrl + '/captcha/audio', {validation: validation}, {});\n      }\n    */\n}\n","import {\n  Component, ElementRef, ViewChild, SimpleChanges, NgZone,\n  ChangeDetectorRef, Output, Input, AfterViewInit, OnInit, OnChanges, EventEmitter\n} from '@angular/core';\n// import { Http, Response } from '@angular/http';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { CaptchaDataService, ServerPayload } from './captcha-data.service';\n\n@Component({\n  selector: 'common-captcha',\n  templateUrl: './captcha.component.html',\n  styleUrls: ['./captcha.component.scss']\n})\nexport class CaptchaComponent implements AfterViewInit, OnInit, OnChanges {\n\n  @ViewChild('image') imageContainer: ElementRef;\n  @ViewChild('audioElement') audioElement: ElementRef;\n  // tslint:disable:no-input-rename\n  @Input('apiBaseUrl') apiBaseUrl: string;\n  @Input('nonce') nonce: string;\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() onValidToken = new EventEmitter<string>();\n  @Input('successMessage') successMessage: string;\n  @Input('eagerFetchAudio') eagerFetchAudio: string;\n  @Input('language') language: string = 'en';\n  @Input('userPromptMessage') userPromptMessage: string;\n\n  /**\n   * Http error response for fetching a CAPTCHA image.\n   */\n  errorFetchingImg = null;\n\n  /**\n   * Http error response for verifying user's answer.\n   */\n  errorVerifyAnswer = null;\n\n  private validation = '';\n  public audio = '';\n  public answer = '';\n\n  state: CAPTCHA_STATE;\n  incorrectAnswer: boolean;\n\n  public fetchingAudioInProgress = false;\n\n  constructor(private dataService: CaptchaDataService,\n    private cd: ChangeDetectorRef,\n    private ngZone: NgZone) {\n  }\n\n  ngOnInit() {\n    this.forceRefresh.bind(this);\n    window['ca.bcgov.captchaRefresh'] = this.publicForceRefresh.bind(this);\n\n    // if(!this.userPromptMessage){\n    //   this.userPromptMessage = \"Enter the text you either see in the box or you hear in the audio\";\n    // }\n  }\n  ngAfterViewInit() {\n    this.forceRefresh();\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    // when changing language, if audio is empty then no need to refetch\n    if (!changes.language || !this.audio || this.audio.length === 0) {\n      if (!(changes.reloadCaptcha && (true === changes.reloadCaptcha.previousValue\n        || false === changes.reloadCaptcha.previousValue)\n        && (changes.reloadCaptcha.currentValue !== changes.reloadCaptcha.previousValue))) {\n        return;\n      }\n    }\n    this.getNewCaptcha(false);\n  }\n\n  forceRefresh() {\n    this.getNewCaptcha(false);\n    this.cd.detectChanges();\n  }\n\n  publicForceRefresh() {\n    this.ngZone.run(() => this.forceRefresh());\n  }\n\n  answerChanged(event: any) {\n    if (this.answer.length < 6) {\n      this.incorrectAnswer = null;\n    }\n    if (this.answer.length === 6) {\n      this.state = CAPTCHA_STATE.VERIFYING_ANSWER;\n      this.incorrectAnswer = null;\n      this.dataService.verifyCaptcha(this.apiBaseUrl, this.nonce, this.answer, this.validation).subscribe(response => {\n        const payload = response.body;\n        if (this.isValidPayload(payload)) {\n          this.handleVerify(payload);\n        } else {\n          this.state = CAPTCHA_STATE.ERROR_VERIFY;\n          this.errorVerifyAnswer = this.createErrorTextLine(response);\n        }\n      },\n        (error) => {\n          this.state = CAPTCHA_STATE.ERROR_VERIFY;\n          this.errorVerifyAnswer = this.createErrorTextLine(error);\n          console.log('Error response from verifying user answer: %o', error);\n        }\n      );\n    }\n  }\n\n  // Call the backend to see if our answer is correct\n  private handleVerify(payload: any) {\n    // There could be the rare change where an invalid payload response is received.\n    if (payload.valid === true) {\n      this.state = CAPTCHA_STATE.SUCCESS_VERIFY_ANSWER_CORRECT;\n      this.onValidToken.emit(payload.jwt);\n    } else {\n      this.incorrectAnswer = true;\n      this.answer = '';\n      this.audio = '';\n      // They failed - try a new one.\n      this.getNewCaptcha(true);\n    }\n  }\n\n  /**\n   * Case where HTTP 200 response code is received by the payload is incorrect or corrupt.\n   * The occurance of this type of case should be rare.\n   * @param payload\n   */\n  private isValidPayload(payload) {\n    // console.debug('Response payload: %o', payload);\n    if (!payload) {\n      console.error('payload cannot be null or undefined or 0');\n      return false;\n    } else {\n      const hasValueProp = payload.hasOwnProperty('valid');\n      if (!hasValueProp) {\n        console.error('payload must have its own property named \\'valid\\'');\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  public retryFetchCaptcha() {\n    console.log('Retry captcha');\n    this.state = undefined;\n\n    /**\n     * wait for 0.5 seond before resubmitting\n     */\n    setTimeout(() => {\n      this.getNewCaptcha(false);\n    }, 100);\n  }\n\n  public playAudio() {\n    if (this.audio && this.audio.length > 0) {\n      this.audioElement.nativeElement.play();\n    } else {\n      this.fetchAudio(true);\n    }\n  }\n\n  private fetchAudio(playImmediately: boolean = false) {\n    if (!this.fetchingAudioInProgress) {\n      this.fetchingAudioInProgress = true;\n      this.dataService.fetchAudio(this.apiBaseUrl, this.validation, this.language).subscribe((response: HttpResponse<any>) => {\n        this.fetchingAudioInProgress = false;\n        this.audio = response.body.audio;\n        this.cd.detectChanges();\n        if (playImmediately) {\n          this.audioElement.nativeElement.play();\n        }\n      },\n        (error) => {\n          this.fetchingAudioInProgress = false;\n          console.log('Error response from fetching audio CAPTCHA: %o', error);\n          this.cd.detectChanges();\n        }\n      );\n    }\n  }\n\n  public getNewCaptcha(errorCase: any) {\n    this.state = CAPTCHA_STATE.FETCHING_CAPTCHA_IMG;\n    this.audio = '';\n\n    // Reset things\n    if (!errorCase) {\n      // Let them know they failed instead of wiping out the answer area\n      // Contructing this form on page load/reload will have errorCase = false\n      this.incorrectAnswer = null;\n    }\n\n\n    this.dataService.fetchData(this.apiBaseUrl, this.nonce).subscribe(response => {\n      this.state = CAPTCHA_STATE.SUCCESS_FETCH_IMG;\n\n      const payload = response.body;\n      this.imageContainer.nativeElement.innerHTML = payload.captcha;\n      this.validation = payload.validation;\n      this.cd.detectChanges();\n\n      if (this.eagerFetchAudio === 'true') {\n        // console.log('Fetch audio eagerly');\n        this.fetchAudio();\n      } else {\n        // console.log('Not to fetch audio eagerly');\n      }\n    },\n\n      (error) => {\n        this.state = CAPTCHA_STATE.ERROR_FETCH_IMG;\n        this.errorFetchingImg = this.createErrorTextLine(error);\n        console.log('Error esponse from fetching CAPTCHA text: %o', error);\n        this.cd.detectChanges();\n      }\n    );\n  }\n\n  private createErrorTextLine(error) {\n\n    let line = 'Error status: ' + error.status;\n    if (error.statusText) {\n      line = line + ', status text: ' + error.statusText;\n    }\n    return line;\n  }\n\n  // tslint:disable-next-line:member-ordering\n  public translatedMessages = {\n    playAudio: {\n      en: 'Play Audio',\n      zh: 'æ­æ¾å£°é³',\n      fr: 'Lecture audio',\n      pa: 'à¨à¨¡à©à¨ à¨à¨²à¨¾à¨',\n    },\n    tryAnotherImg: {\n      en: 'Try another image',\n      zh: 'æ¢ä¸ªå¾å',\n      fr: 'Essayez une autre image',\n      pa: 'à¨à©à¨ à¨¹à©à¨° à¨à¨¿à©±à¨¤à¨° à¨à¨à¨¼à¨®à¨¾à¨',\n    },\n    userPromptMessage: {\n      en: 'Enter the text you either see in the box or you hear in the audio',\n      zh: 'è¯·è¾å¥çå°æå¬å°çæå­',\n      fr: 'Entrez le texte que vous voyez dans la case ou que vous entendez dans le son',\n      pa: 'à¨à¨¹ à¨à©à¨à¨¸à¨ à¨¦à¨¾à¨à¨² à¨à¨°à© à¨à© à¨¤à©à¨¸à©à¨ à¨¬à¨à¨¸à© à¨µà¨¿à©±à¨ à¨¦à©à¨à¨¦à© à¨¹à© à¨à¨¾à¨ à¨¤à©à¨¸à©à¨ à¨à¨¡à©à¨ à¨µà¨¿à©±à¨ à¨¸à©à¨£à¨¦à© à¨¹à©',\n    },\n    incorrectAnswer: {\n      en: 'Incorrect answer, please try again.',\n      zh: 'ç­æ¡ä¸å¯¹ãè¯·éè¯ã',\n      fr: 'Mauvaise rÃ©ponse, veuillez rÃ©essayer.',\n      pa: 'à¨à¨²à¨¤ à¨à¨µà¨¾à¨¬, à¨à¨¿à¨°à¨ªà¨¾ à¨à¨°à¨à© à¨¦à©à¨¬à¨¾à¨°à¨¾ à¨à©à¨¸à¨¼à¨¿à¨¸à¨¼ à¨à¨°à©.',\n    },\n    successMessage: {\n      en: 'You can submit your application now.',\n      zh: 'ä½ ç°å¨å¯ä»¥æäº¤ç³è¯·äºã',\n      fr: 'Vous pouvez soumettre votre candidature maintenant.',\n      pa: 'à¨¤à©à¨¸à©à¨ à¨à¨ªà¨£à© à¨à¨°à¨à¨¼à© à¨¹à©à¨£à© à¨ªà©à¨¸à¨¼ à¨à¨° à¨¸à¨à¨¦à© à¨¹à©',\n    },\n    correct: {\n      en: 'Correct.',\n      zh: 'æ­£ç¡®ã',\n      fr: 'Correct.',\n      pa: 'à¨¸à¨¹à© à¨à¨°à©',\n    },\n    loadingImage: {\n      en: 'Loading CAPTCHA image',\n      zh: 'æ­£å¨ä¸è½½éªè¯ç ',\n      fr: 'Chargement de l\\'image CAPTCHA',\n      pa: 'à¨à©à¨ªà¨à¨à¨¾ à¨à¨¿à©±à¨¤à¨° à¨²à©à¨¡ à¨à¨° à¨°à¨¿à¨¹à¨¾ à¨¹à©',\n    },\n    browserNotSupportAudio: {\n      en: 'Your browser does not support the audio element.',\n      zh: 'ä½ çæµè§å¨ä¸æ¯ææ­é³',\n      fr: 'Votre navigateur ne supporte pas l\\'Ã©lÃ©ment audio.',\n      pa: 'à¨¤à©à¨¹à¨¾à¨¡à¨¾ à¨¬à©à¨°à¨¾à¨à¨à¨¼à¨° à¨à¨¡à©à¨ à¨à¨²à©à¨®à©à¨à¨ à¨¦à¨¾ à¨¸à¨®à¨°à¨¥à¨¨ à¨¨à¨¹à©à¨ à¨à¨°à¨¦à¨¾.',\n    },\n    verifyingAnswer: {\n      en: 'Verifying your answer...',\n      zh: 'æ­£å¨éªè¯ç­æ¡...',\n      fr: 'VÃ©rification de votre rÃ©ponse ...',\n      pa: 'à¨¤à©à¨¹à¨¾à¨¡à¨¾ à¨à¨µà¨¾à¨¬ à¨¤à¨¸à¨¦à©à¨ à¨à¨° à¨°à¨¿à¨¹à¨¾ à¨¹à© ...',\n    },\n    errorRetrievingImg: {\n      en: 'Error happened while retrieving CAPTCHA image. please {{click here}} to try again',\n      zh: 'éªè¯ç ä¸è½½éè¯¯ãè¯·{{ç¹å»è¿é}}éè¯',\n      fr: 'Une erreur s\\'est produite lors de la rÃ©cupÃ©ration de l\\'image CAPTCHA. s\\'il vous plaÃ®t {{cliquez ici}} pour rÃ©essayer',\n      pa: 'à¨à©à¨ªà¨à¨à¨¾ à¨à¨¿à©±à¨¤à¨° à¨¨à©à©° à¨ªà©à¨°à¨¾à¨ªà¨¤ à¨à¨°à¨¦à© à¨¸à¨®à©à¨ à¨¤à¨°à©à©±à¨à© à¨à¨¤à¨ªà©°à¨¨ à¨¹à©à¨. à¨à¨¿à¨°à¨ªà¨¾ à¨à¨°à¨à© à¨¦à©à¨¬à¨¾à¨°à¨¾ à¨à©à¨¸à¨¼à¨¿à¨¸à¨¼ à¨à¨°à¨¨ à¨²à¨ {{à¨à©±à¨¥à© à¨à¨²à¨¿à¨ à¨à¨°à©}}',\n    },\n    errorVerifyingAnswer: {\n      en: 'Error happened while verifying your answer. please {{click here}} to try again',\n      zh: 'éªè¯ç­æ¡è¿ç¨åçéè¯¯ãè¯·{{ç¹å»è¿é}}éè¯',\n      fr: 'Une erreur s\\'est produite lors de la vÃ©rification de votre rÃ©ponse. s\\'il vous plaÃ®t {{cliquez ici}} pour rÃ©essayer',\n      pa: 'à¨¤à©à¨¹à¨¾à¨¡à¨¾ à¨à¨µà¨¾à¨¬ à¨¤à¨¸à¨¦à©à¨ à¨à¨°à¨¨ à¨µà©à¨²à© à¨à¨²à¨¤à© à¨à¨ à¨à¨¿à¨°à¨ªà¨¾ à¨à¨°à¨à© à¨¦à©à¨¬à¨¾à¨°à¨¾ à¨à©à¨¸à¨¼à¨¿à¨¸à¨¼ à¨à¨°à¨¨ à¨²à¨ {{à¨à©±à¨¥à© à¨à¨²à¨¿à¨ à¨à¨°à©}}',\n    },\n  };\n}\n\n/**\n * 7 mutually exclusive states, the program can only be in one of these state\n * at any given point..\n */\nenum CAPTCHA_STATE {\n  FETCHING_CAPTCHA_IMG = 1,\n  SUCCESS_FETCH_IMG = 2,\n  ERROR_FETCH_IMG = 3,\n  VERIFYING_ANSWER = 4,\n  SUCCESS_VERIFY_ANSWER_CORRECT = 5,\n  // http error during verification call.\n  ERROR_VERIFY = 6,\n  // SUCCESS_VERIFY_ANSWER_INCORRECT = 6,\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { CaptchaComponent } from './captcha.component';\nimport { CaptchaDataService } from './captcha-data.service';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    CaptchaComponent\n  ],\n  imports: [\n    HttpClientModule,\n    CommonModule,\n    FormsModule\n  ],\n  providers: [\n    CaptchaDataService\n  ],\n  exports: [\n    CaptchaComponent\n  ],\n})\nexport class CaptchaModule { \n  static forRoot(): ModuleWithProviders<CaptchaModule> {\n    return {\n      ngModule: CaptchaModule,\n      providers: [CaptchaDataService]\n    }\n  }\n}\n"],"names":[],"mappings":"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"}
