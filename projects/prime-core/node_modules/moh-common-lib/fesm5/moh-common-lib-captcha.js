import { FormsModule } from '@angular/forms';
import { Injectable, Component, ViewChild, NgZone, ChangeDetectorRef, Output, Input, EventEmitter, NgModule } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CaptchaDataService = /** @class */ (function () {
    function CaptchaDataService(httpClient) {
        this.httpClient = httpClient;
    }
    // private http: Http) { }
    // private http: Http) { }
    /**
     * @param {?} apiBaseUrl
     * @param {?} nonce
     * @return {?}
     */
    CaptchaDataService.prototype.fetchData = 
    // private http: Http) { }
    /**
     * @param {?} apiBaseUrl
     * @param {?} nonce
     * @return {?}
     */
    function (apiBaseUrl, nonce) {
        return this.httpClient
            .post(apiBaseUrl + '/captcha', { nonce: nonce }, { observe: 'response' });
    };
    /**
     * @param {?} apiBaseUrl
     * @param {?} nonce
     * @param {?} answer
     * @param {?} encryptedAnswer
     * @return {?}
     */
    CaptchaDataService.prototype.verifyCaptcha = /**
     * @param {?} apiBaseUrl
     * @param {?} nonce
     * @param {?} answer
     * @param {?} encryptedAnswer
     * @return {?}
     */
    function (apiBaseUrl, nonce, answer, encryptedAnswer) {
        return this.httpClient
            .post(apiBaseUrl + '/verify/captcha', { nonce: nonce, answer: answer, validation: encryptedAnswer }, { observe: 'response' });
    };
    /**
     * @param {?} apiBaseUrl
     * @param {?} validation
     * @param {?=} translation
     * @return {?}
     */
    CaptchaDataService.prototype.fetchAudio = /**
     * @param {?} apiBaseUrl
     * @param {?} validation
     * @param {?=} translation
     * @return {?}
     */
    function (apiBaseUrl, validation, translation) {
        /** @type {?} */
        var payload = { validation: validation };
        if (translation) {
            payload.translation = translation;
        }
        return this.httpClient
            .post(apiBaseUrl + '/captcha/audio', payload, { observe: 'response' });
    };
    CaptchaDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CaptchaDataService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return CaptchaDataService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CaptchaComponent = /** @class */ (function () {
    function CaptchaComponent(dataService, cd, ngZone) {
        this.dataService = dataService;
        this.cd = cd;
        this.ngZone = ngZone;
        // tslint:disable-next-line:no-output-on-prefix
        this.onValidToken = new EventEmitter();
        this.language = 'en';
        /**
         * Http error response for fetching a CAPTCHA image.
         */
        this.errorFetchingImg = null;
        /**
         * Http error response for verifying user's answer.
         */
        this.errorVerifyAnswer = null;
        this.validation = '';
        this.audio = '';
        this.answer = '';
        this.fetchingAudioInProgress = false;
        // tslint:disable-next-line:member-ordering
        this.translatedMessages = {
            playAudio: {
                en: 'Play Audio',
                zh: '播放声音',
                fr: 'Lecture audio',
                pa: 'ਆਡੀਓ ਚਲਾਓ',
            },
            tryAnotherImg: {
                en: 'Try another image',
                zh: '换个图像',
                fr: 'Essayez une autre image',
                pa: 'ਕੋਈ ਹੋਰ ਚਿੱਤਰ ਅਜ਼ਮਾਓ',
            },
            userPromptMessage: {
                en: 'Enter the text you either see in the box or you hear in the audio',
                zh: '请输入看到或听到的文字',
                fr: 'Entrez le texte que vous voyez dans la case ou que vous entendez dans le son',
                pa: 'ਉਹ ਟੈਕਸਟ ਦਾਖਲ ਕਰੋ ਜੋ ਤੁਸੀਂ ਬਕਸੇ ਵਿੱਚ ਦੇਖਦੇ ਹੋ ਜਾਂ ਤੁਸੀਂ ਆਡੀਓ ਵਿੱਚ ਸੁਣਦੇ ਹੋ',
            },
            incorrectAnswer: {
                en: 'Incorrect answer, please try again.',
                zh: '答案不对。请重试。',
                fr: 'Mauvaise réponse, veuillez réessayer.',
                pa: 'ਗਲਤ ਜਵਾਬ, ਕਿਰਪਾ ਕਰਕੇ ਦੁਬਾਰਾ ਕੋਸ਼ਿਸ਼ ਕਰੋ.',
            },
            successMessage: {
                en: 'You can submit your application now.',
                zh: '你现在可以提交申请了。',
                fr: 'Vous pouvez soumettre votre candidature maintenant.',
                pa: 'ਤੁਸੀਂ ਆਪਣੀ ਅਰਜ਼ੀ ਹੁਣੇ ਪੇਸ਼ ਕਰ ਸਕਦੇ ਹੋ',
            },
            correct: {
                en: 'Correct.',
                zh: '正确。',
                fr: 'Correct.',
                pa: 'ਸਹੀ ਕਰੋ',
            },
            loadingImage: {
                en: 'Loading CAPTCHA image',
                zh: '正在下载验证码',
                fr: 'Chargement de l\'image CAPTCHA',
                pa: 'ਕੈਪਟਚਾ ਚਿੱਤਰ ਲੋਡ ਕਰ ਰਿਹਾ ਹੈ',
            },
            browserNotSupportAudio: {
                en: 'Your browser does not support the audio element.',
                zh: '你的浏览器不支持播音',
                fr: 'Votre navigateur ne supporte pas l\'élément audio.',
                pa: 'ਤੁਹਾਡਾ ਬ੍ਰਾਉਜ਼ਰ ਆਡੀਓ ਐਲੀਮੈਂਟ ਦਾ ਸਮਰਥਨ ਨਹੀਂ ਕਰਦਾ.',
            },
            verifyingAnswer: {
                en: 'Verifying your answer...',
                zh: '正在验证答案...',
                fr: 'Vérification de votre réponse ...',
                pa: 'ਤੁਹਾਡਾ ਜਵਾਬ ਤਸਦੀਕ ਕਰ ਰਿਹਾ ਹੈ ...',
            },
            errorRetrievingImg: {
                en: 'Error happened while retrieving CAPTCHA image. please {{click here}} to try again',
                zh: '验证码下载错误。请{{点击这里}}重试',
                fr: 'Une erreur s\'est produite lors de la récupération de l\'image CAPTCHA. s\'il vous plaît {{cliquez ici}} pour réessayer',
                pa: 'ਕੈਪਟਚਾ ਚਿੱਤਰ ਨੂੰ ਪ੍ਰਾਪਤ ਕਰਦੇ ਸਮੇਂ ਤਰੁੱਟੀ ਉਤਪੰਨ ਹੋਈ. ਕਿਰਪਾ ਕਰਕੇ ਦੁਬਾਰਾ ਕੋਸ਼ਿਸ਼ ਕਰਨ ਲਈ {{ਇੱਥੇ ਕਲਿਕ ਕਰੋ}}',
            },
            errorVerifyingAnswer: {
                en: 'Error happened while verifying your answer. please {{click here}} to try again',
                zh: '验证答案过程发生错误。请{{点击这里}}重试',
                fr: 'Une erreur s\'est produite lors de la vérification de votre réponse. s\'il vous plaît {{cliquez ici}} pour réessayer',
                pa: 'ਤੁਹਾਡਾ ਜਵਾਬ ਤਸਦੀਕ ਕਰਨ ਵੇਲੇ ਗਲਤੀ ਆਈ ਕਿਰਪਾ ਕਰਕੇ ਦੁਬਾਰਾ ਕੋਸ਼ਿਸ਼ ਕਰਨ ਲਈ {{ਇੱਥੇ ਕਲਿਕ ਕਰੋ}}',
            },
        };
    }
    /**
     * @return {?}
     */
    CaptchaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.forceRefresh.bind(this);
        window['ca.bcgov.captchaRefresh'] = this.publicForceRefresh.bind(this);
        // if(!this.userPromptMessage){
        //   this.userPromptMessage = "Enter the text you either see in the box or you hear in the audio";
        // }
    };
    /**
     * @return {?}
     */
    CaptchaComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.forceRefresh();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CaptchaComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // when changing language, if audio is empty then no need to refetch
        if (!changes.language || !this.audio || this.audio.length === 0) {
            if (!(changes.reloadCaptcha && (true === changes.reloadCaptcha.previousValue
                || false === changes.reloadCaptcha.previousValue)
                && (changes.reloadCaptcha.currentValue !== changes.reloadCaptcha.previousValue))) {
                return;
            }
        }
        this.getNewCaptcha(false);
    };
    /**
     * @return {?}
     */
    CaptchaComponent.prototype.forceRefresh = /**
     * @return {?}
     */
    function () {
        this.getNewCaptcha(false);
        this.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    CaptchaComponent.prototype.publicForceRefresh = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.run((/**
         * @return {?}
         */
        function () { return _this.forceRefresh(); }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CaptchaComponent.prototype.answerChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.answer.length < 6) {
            this.incorrectAnswer = null;
        }
        if (this.answer.length === 6) {
            this.state = CAPTCHA_STATE.VERIFYING_ANSWER;
            this.incorrectAnswer = null;
            this.dataService.verifyCaptcha(this.apiBaseUrl, this.nonce, this.answer, this.validation).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                /** @type {?} */
                var payload = response.body;
                if (_this.isValidPayload(payload)) {
                    _this.handleVerify(payload);
                }
                else {
                    _this.state = CAPTCHA_STATE.ERROR_VERIFY;
                    _this.errorVerifyAnswer = _this.createErrorTextLine(response);
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.state = CAPTCHA_STATE.ERROR_VERIFY;
                _this.errorVerifyAnswer = _this.createErrorTextLine(error);
                console.log('Error response from verifying user answer: %o', error);
            }));
        }
    };
    // Call the backend to see if our answer is correct
    // Call the backend to see if our answer is correct
    /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    CaptchaComponent.prototype.handleVerify = 
    // Call the backend to see if our answer is correct
    /**
     * @private
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        // There could be the rare change where an invalid payload response is received.
        if (payload.valid === true) {
            this.state = CAPTCHA_STATE.SUCCESS_VERIFY_ANSWER_CORRECT;
            this.onValidToken.emit(payload.jwt);
        }
        else {
            this.incorrectAnswer = true;
            this.answer = '';
            this.audio = '';
            // They failed - try a new one.
            this.getNewCaptcha(true);
        }
    };
    /**
     * Case where HTTP 200 response code is received by the payload is incorrect or corrupt.
     * The occurance of this type of case should be rare.
     * @param payload
     */
    /**
     * Case where HTTP 200 response code is received by the payload is incorrect or corrupt.
     * The occurance of this type of case should be rare.
     * @private
     * @param {?} payload
     * @return {?}
     */
    CaptchaComponent.prototype.isValidPayload = /**
     * Case where HTTP 200 response code is received by the payload is incorrect or corrupt.
     * The occurance of this type of case should be rare.
     * @private
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        // console.debug('Response payload: %o', payload);
        if (!payload) {
            console.error('payload cannot be null or undefined or 0');
            return false;
        }
        else {
            /** @type {?} */
            var hasValueProp = payload.hasOwnProperty('valid');
            if (!hasValueProp) {
                console.error('payload must have its own property named \'valid\'');
                return false;
            }
            else {
                return true;
            }
        }
    };
    /**
     * @return {?}
     */
    CaptchaComponent.prototype.retryFetchCaptcha = /**
     * @return {?}
     */
    function () {
        var _this = this;
        console.log('Retry captcha');
        this.state = undefined;
        /**
         * wait for 0.5 seond before resubmitting
         */
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.getNewCaptcha(false);
        }), 100);
    };
    /**
     * @return {?}
     */
    CaptchaComponent.prototype.playAudio = /**
     * @return {?}
     */
    function () {
        if (this.audio && this.audio.length > 0) {
            this.audioElement.nativeElement.play();
        }
        else {
            this.fetchAudio(true);
        }
    };
    /**
     * @private
     * @param {?=} playImmediately
     * @return {?}
     */
    CaptchaComponent.prototype.fetchAudio = /**
     * @private
     * @param {?=} playImmediately
     * @return {?}
     */
    function (playImmediately) {
        var _this = this;
        if (playImmediately === void 0) { playImmediately = false; }
        if (!this.fetchingAudioInProgress) {
            this.fetchingAudioInProgress = true;
            this.dataService.fetchAudio(this.apiBaseUrl, this.validation, this.language).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.fetchingAudioInProgress = false;
                _this.audio = response.body.audio;
                _this.cd.detectChanges();
                if (playImmediately) {
                    _this.audioElement.nativeElement.play();
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.fetchingAudioInProgress = false;
                console.log('Error response from fetching audio CAPTCHA: %o', error);
                _this.cd.detectChanges();
            }));
        }
    };
    /**
     * @param {?} errorCase
     * @return {?}
     */
    CaptchaComponent.prototype.getNewCaptcha = /**
     * @param {?} errorCase
     * @return {?}
     */
    function (errorCase) {
        var _this = this;
        this.state = CAPTCHA_STATE.FETCHING_CAPTCHA_IMG;
        this.audio = '';
        // Reset things
        if (!errorCase) {
            // Let them know they failed instead of wiping out the answer area
            // Contructing this form on page load/reload will have errorCase = false
            this.incorrectAnswer = null;
        }
        this.dataService.fetchData(this.apiBaseUrl, this.nonce).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            _this.state = CAPTCHA_STATE.SUCCESS_FETCH_IMG;
            /** @type {?} */
            var payload = response.body;
            _this.imageContainer.nativeElement.innerHTML = payload.captcha;
            _this.validation = payload.validation;
            _this.cd.detectChanges();
            if (_this.eagerFetchAudio === 'true') {
                // console.log('Fetch audio eagerly');
                _this.fetchAudio();
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.state = CAPTCHA_STATE.ERROR_FETCH_IMG;
            _this.errorFetchingImg = _this.createErrorTextLine(error);
            console.log('Error esponse from fetching CAPTCHA text: %o', error);
            _this.cd.detectChanges();
        }));
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    CaptchaComponent.prototype.createErrorTextLine = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        /** @type {?} */
        var line = 'Error status: ' + error.status;
        if (error.statusText) {
            line = line + ', status text: ' + error.statusText;
        }
        return line;
    };
    CaptchaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-captcha',
                    template: "<div class=\"bcgov-captcha\">\n\n\n  <svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <defs>\n        <symbol id=\"icon-play-def\" viewBox=\"0 0 32 32\">\n            <path d=\"M16 0c-8.837 0-16 7.163-16 16s7.163 16 16 16 16-7.163 16-16-7.163-16-16-16zM16 29c-7.18 0-13-5.82-13-13s5.82-13 13-13 13 5.82 13 13-5.82 13-13 13zM12 9l12 7-12 7z\"></path>\n        </symbol>  \n\n        <symbol id=\"icon-loop-def\" viewBox=\"0 0 32 32\">\n          <path d=\"M27.802 5.197c-2.925-3.194-7.13-5.197-11.803-5.197-8.837 0-16 7.163-16 16h3c0-7.18 5.82-13 13-13 3.844 0 7.298 1.669 9.678 4.322l-4.678 4.678h11v-11l-4.198 4.197z\"></path>\n          <path d=\"M29 16c0 7.18-5.82 13-13 13-3.844 0-7.298-1.669-9.678-4.322l4.678-4.678h-11v11l4.197-4.197c2.925 3.194 7.13 5.197 11.803 5.197 8.837 0 16-7.163 16-16h-3z\"></path>\n        </symbol>  \n        \n        <symbol id=\"icon-check-def\" viewBox=\"0 0 24 24\">\n          <path d=\"M9 16.172l10.594-10.594 1.406 1.406-12 12-5.578-5.578 1.406-1.406z\"></path>\n        </symbol>    \n        \n        <symbol id=\"icon-exclamation-triangle-def\" viewBox=\"0 0 28 28\">\n            <path d=\"M16 21.484v-2.969c0-0.281-0.219-0.516-0.5-0.516h-3c-0.281 0-0.5 0.234-0.5 0.516v2.969c0 0.281 0.219 0.516 0.5 0.516h3c0.281 0 0.5-0.234 0.5-0.516zM15.969 15.641l0.281-7.172c0-0.094-0.047-0.219-0.156-0.297-0.094-0.078-0.234-0.172-0.375-0.172h-3.437c-0.141 0-0.281 0.094-0.375 0.172-0.109 0.078-0.156 0.234-0.156 0.328l0.266 7.141c0 0.203 0.234 0.359 0.531 0.359h2.891c0.281 0 0.516-0.156 0.531-0.359zM15.75 1.047l12 22c0.344 0.609 0.328 1.359-0.031 1.969s-1.016 0.984-1.719 0.984h-24c-0.703 0-1.359-0.375-1.719-0.984s-0.375-1.359-0.031-1.969l12-22c0.344-0.641 1.016-1.047 1.75-1.047s1.406 0.406 1.75 1.047z\"></path>\n        </symbol>\n        \n    </defs>\n  </svg>\n\n\n\n  <form style=\"clear:both\" #formRef=\"ngForm\">\n    <div [ngClass]=\"{'has-error': !!incorrectAnswer}\">\n      <div>\n        \n        <div class=\"spinner-box\" *ngIf=\"!state || state === 1\">\n         <div style=\"float:left; margin: 2px 0 1px 8px\">\n            <svg class=\"lds-spinner\" width=\"45px\"  height=\"45px\"  xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\" style=\"background: none;\"><g transform=\"rotate(0 50 50)\">\n                <rect x=\"47\" y=\"22\" rx=\"9.4\" ry=\"4.4\" width=\"6\" height=\"16\" fill=\"#1d3f72\">\n                  <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.8888888888888888s\" repeatCount=\"indefinite\"></animate>\n                </rect>\n              </g><g transform=\"rotate(40 50 50)\">\n                <rect x=\"47\" y=\"22\" rx=\"9.4\" ry=\"4.4\" width=\"6\" height=\"16\" fill=\"#1d3f72\">\n                  <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.7777777777777778s\" repeatCount=\"indefinite\"></animate>\n                </rect>\n              </g><g transform=\"rotate(80 50 50)\">\n                <rect x=\"47\" y=\"22\" rx=\"9.4\" ry=\"4.4\" width=\"6\" height=\"16\" fill=\"#1d3f72\">\n                  <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.6666666666666666s\" repeatCount=\"indefinite\"></animate>\n                </rect>\n              </g><g transform=\"rotate(120 50 50)\">\n                <rect x=\"47\" y=\"22\" rx=\"9.4\" ry=\"4.4\" width=\"6\" height=\"16\" fill=\"#1d3f72\">\n                  <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.5555555555555556s\" repeatCount=\"indefinite\"></animate>\n                </rect>\n              </g><g transform=\"rotate(160 50 50)\">\n                <rect x=\"47\" y=\"22\" rx=\"9.4\" ry=\"4.4\" width=\"6\" height=\"16\" fill=\"#1d3f72\">\n                  <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.4444444444444444s\" repeatCount=\"indefinite\"></animate>\n                </rect>\n              </g><g transform=\"rotate(200 50 50)\">\n                <rect x=\"47\" y=\"22\" rx=\"9.4\" ry=\"4.4\" width=\"6\" height=\"16\" fill=\"#1d3f72\">\n                  <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.3333333333333333s\" repeatCount=\"indefinite\"></animate>\n                </rect>\n              </g><g transform=\"rotate(240 50 50)\">\n                <rect x=\"47\" y=\"22\" rx=\"9.4\" ry=\"4.4\" width=\"6\" height=\"16\" fill=\"#1d3f72\">\n                  <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.2222222222222222s\" repeatCount=\"indefinite\"></animate>\n                </rect>\n              </g><g transform=\"rotate(280 50 50)\">\n                <rect x=\"47\" y=\"22\" rx=\"9.4\" ry=\"4.4\" width=\"6\" height=\"16\" fill=\"#1d3f72\">\n                  <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.1111111111111111s\" repeatCount=\"indefinite\"></animate>\n                </rect>\n              </g><g transform=\"rotate(320 50 50)\">\n                <rect x=\"47\" y=\"22\" rx=\"9.4\" ry=\"4.4\" width=\"6\" height=\"16\" fill=\"#1d3f72\">\n                  <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"0s\" repeatCount=\"indefinite\"></animate>\n                </rect>\n              </g></svg>\n         </div>\n         <div style=\"float:left; margin: 16px 0 1px 3px\">\n            {{translatedMessages.loadingImage[language]}}\n         </div>\n         <div style=\"clear:both\"></div>\n        </div>\n        \n        <div [ngClass]=\"{'captcha-box-visible': state === 2, 'captcha-box-invisible': state !== 2}\">\n          <div>\n            <div style=\"float: left;\" #image class=\"captcha-image\"></div>\n            <audio #audioElement *ngIf=\"audio && audio.length > 0\" id=\"audioElement\" [src]=\"audio\">\n                {{translatedMessages.browserNotSupportAudio[language]}}\n            </audio>\n            <div style=\"float: left; margin-top: 8px\">\n              <a class=\"play-audio\" href=\"javascript:void(0)\" (click)=\"playAudio()\" role=\"button\">\n                <svg *ngIf=\"!fetchingAudioInProgress\" class=\"icon-play\"><use xlink:href=\"#icon-play-def\"></use></svg>\n                \n                <svg *ngIf=\"fetchingAudioInProgress\" class=\"lds-spinner\" width=\"15px\"  height=\"15px\"  xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\" style=\"background: none;\"><g transform=\"rotate(0 50 50)\">\n                  <rect x=\"45\" y=\"9\" rx=\"2.7\" ry=\"0.54\" width=\"10\" height=\"22\" fill=\"#1d3f72\">\n                    <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.8888888888888888s\" repeatCount=\"indefinite\"></animate>\n                  </rect>\n                </g><g transform=\"rotate(40 50 50)\">\n                  <rect x=\"45\" y=\"9\" rx=\"2.7\" ry=\"0.54\" width=\"10\" height=\"22\" fill=\"#1d3f72\">\n                    <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.7777777777777778s\" repeatCount=\"indefinite\"></animate>\n                  </rect>\n                </g><g transform=\"rotate(80 50 50)\">\n                  <rect x=\"45\" y=\"9\" rx=\"2.7\" ry=\"0.54\" width=\"10\" height=\"22\" fill=\"#1d3f72\">\n                    <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.6666666666666666s\" repeatCount=\"indefinite\"></animate>\n                  </rect>\n                </g><g transform=\"rotate(120 50 50)\">\n                  <rect x=\"45\" y=\"9\" rx=\"2.7\" ry=\"0.54\" width=\"10\" height=\"22\" fill=\"#1d3f72\">\n                    <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.5555555555555556s\" repeatCount=\"indefinite\"></animate>\n                  </rect>\n                </g><g transform=\"rotate(160 50 50)\">\n                  <rect x=\"45\" y=\"9\" rx=\"2.7\" ry=\"0.54\" width=\"10\" height=\"22\" fill=\"#1d3f72\">\n                    <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.4444444444444444s\" repeatCount=\"indefinite\"></animate>\n                  </rect>\n                </g><g transform=\"rotate(200 50 50)\">\n                  <rect x=\"45\" y=\"9\" rx=\"2.7\" ry=\"0.54\" width=\"10\" height=\"22\" fill=\"#1d3f72\">\n                    <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.3333333333333333s\" repeatCount=\"indefinite\"></animate>\n                  </rect>\n                </g><g transform=\"rotate(240 50 50)\">\n                  <rect x=\"45\" y=\"9\" rx=\"2.7\" ry=\"0.54\" width=\"10\" height=\"22\" fill=\"#1d3f72\">\n                    <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.2222222222222222s\" repeatCount=\"indefinite\"></animate>\n                  </rect>\n                </g><g transform=\"rotate(280 50 50)\">\n                  <rect x=\"45\" y=\"9\" rx=\"2.7\" ry=\"0.54\" width=\"10\" height=\"22\" fill=\"#1d3f72\">\n                    <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"-0.1111111111111111s\" repeatCount=\"indefinite\"></animate>\n                  </rect>\n                </g><g transform=\"rotate(320 50 50)\">\n                  <rect x=\"45\" y=\"9\" rx=\"2.7\" ry=\"0.54\" width=\"10\" height=\"22\" fill=\"#1d3f72\">\n                    <animate attributeName=\"opacity\" values=\"1;0\" times=\"0;1\" dur=\"1s\" begin=\"0s\" repeatCount=\"indefinite\"></animate>\n                  </rect>\n                </g></svg>\n\n                {{translatedMessages.playAudio[language]}}\n              </a>\n              <div style=\"clear:both;\"></div>\n              \n              <a class=\"try-another-image\" href=\"javascript:void(0)\" (click)=\"retryFetchCaptcha()\" role=\"button\">\n                  <svg class=\"icon-loop icon-loop-def\"><use xlink:href=\"#icon-loop-def\"></use></svg>                \n                  {{translatedMessages.tryAnotherImg[language]}}\n              </a>\n            </div>\n          </div>\n          <div style=\"clear:both; margin-bottom: 8px;\"></div>\n          <div style=\"float:left;\">\n            <label for=\"answer\">\n                {{userPromptMessage || translatedMessages.userPromptMessage[language]}}\n              <input id=\"answer\" type=\"text\"\n                #userAnswerRef = \"ngModel\"\n                [(ngModel)]=\"answer\"\n                (input)=\"answerChanged($event)\"\n                [ngClass]=\"{'captcha-wrong-answer': userAnswerRef.dirty && incorrectAnswer}\"\n                name=\"answer\"\n                maxlength=\"6\"\n                required\n                autocorrect=\"off\" \n                autocapitalize=\"none\">\n            </label>\n          </div>\n        </div>\n        <div style=\"clear:both;\"></div>\n        <div style=\"float:left;\">\n\n        <div class=\"error-captcha\" *ngIf=\"state === 3\" role=\"alert\" aria-live=\"assertive\">\n          <div style=\"float:left; margin-left: 5px;\">\n            <svg class=\"icon-exclamation-triangle\"><use xlink:href=\"#icon-exclamation-triangle-def\"></use></svg>\n  \n            <span> {{translatedMessages.errorRetrievingImg[language].substring(0,translatedMessages.errorRetrievingImg[language].indexOf('{'))}} \n              <a href=\"javascript:void(0)\" (click)=\"retryFetchCaptcha()\">{{translatedMessages.errorRetrievingImg[language].substring(translatedMessages.errorRetrievingImg[language].lastIndexOf('{')+1,translatedMessages.errorRetrievingImg[language].indexOf('}'))}}</a> \n              {{translatedMessages.errorRetrievingImg[language].substring(translatedMessages.errorRetrievingImg[language].lastIndexOf('}')+1)}} \n            </span>\n          </div>\n          <div style=\"clear:both\"></div>\n          \n          <div style=\"float:left; margin-left: 25px;\">\n              {{errorFetchingImg}}\n          </div>\n          <div style=\"clear:both\"></div>\n        </div>\n        \n        <div class=\"spinner-box\" *ngIf=\"state == 4\" role=\"alert\" aria-live=\"assertive\">\n          <span>{{translatedMessages.verifyingAnswer[language]}}</span>\n        </div>\n        <div class=\"error-captcha\" *ngIf=\"state === 6\"  role=\"alert\" aria-live=\"assertive\">\n          <svg class=\"icon-exclamation-triangle\"><use xlink:href=\"#icon-exclamation-triangle-def\"></use></svg>\n          <span>{{translatedMessages.errorVerifyingAnswer[language].substring(0,translatedMessages.errorVerifyingAnswer[language].indexOf('{'))}} \n              <a href=\"javascript:void(0)\" (click)=\"retryFetchCaptcha()\">{{translatedMessages.errorVerifyingAnswer[language].substring(translatedMessages.errorVerifyingAnswer[language].lastIndexOf('{')+1,translatedMessages.errorVerifyingAnswer[language].indexOf('}'))}}</a> \n              {{translatedMessages.errorVerifyingAnswer[language].substring(translatedMessages.errorVerifyingAnswer[language].lastIndexOf('}')+1)}} \n          </span>\n          <p>\n          </p>\n        </div>\n        \n        <div class=\"captcha-error\" style=\"margin-top: 2px\" *ngIf=\"incorrectAnswer === true\" role=\"alert\" aria-live=\"assertive\">\n          {{translatedMessages.incorrectAnswer[language]}}\n        </div>\n      </div>\n      \n      </div>\n    </div>\n  </form>\n\n  <div class=\"confirm-correct-answer\" style=\"float:left\" *ngIf=\"state === 5\" role=\"alert\" aria-live=\"assertive\">\n    <svg class=\"icon-check\"><use xlink:href=\"#icon-check-def\"></use></svg>\n    {{translatedMessages.correct[language]}} <span>{{successMessage || translatedMessages.successMessage[language]}}</span>\n  </div>\n  <div style=\"clear:both;\"></div>\n</div>\n",
                    styles: [".bcgov-captcha .confirm-correct-answer{display:block;color:green}.bcgov-captcha .confirm-correct-answer i{color:green}.bcgov-captcha .spinner-box{height:60px;margin:2px 10px 6px;padding:5px 10px 5px 18px}.bcgov-captcha .error-captcha{margin-left:10px}.bcgov-captcha .error-captcha svg{color:#ff8c00}.bcgov-captcha .error-captcha p{margin-left:32px}.bcgov-captcha .captcha-box-visible{display:block}.bcgov-captcha .captcha-box-invisible{display:none}.bcgov-captcha .captcha-image{display:inline-block;border:1px solid gray}.bcgov-captcha .play-audio{float:left;display:block;margin-left:5px;margin-bottom:3px}.bcgov-captcha .try-another-image{display:inline-block;margin-left:5px}.bcgov-captcha .has-error{border-color:#dc3545}.bcgov-captcha .has-error:focus{box-shadow:0 0 0 .2rem rgba(220,53,69,.25)}.bcgov-captcha input[type=text]{display:block;margin:0;width:100%;font-size:20px;box-shadow:none;border-radius:none;padding:6px;border:1px solid #ccc;transition:box-shadow .3s,border .3s}.bcgov-captcha input[type=text]:focus{border:1px solid #fff;box-shadow:0 0 1px 1px #2196f3;outline:0}.bcgov-captcha input[type=text].captcha-wrong-answer{border:1px solid #a94442}.bcgov-captcha .captcha-error{color:#a94442}.bcgov-captcha .icon-check,.bcgov-captcha .icon-exclamation-triangle,.bcgov-captcha .icon-loop,.bcgov-captcha .icon-play{display:inline-block;width:1em;height:1em;stroke-width:0;stroke:currentColor;fill:currentColor}.bcgov-captcha .spinner{-webkit-animation:1.4s linear infinite rotator;animation:1.4s linear infinite rotator}@-webkit-keyframes rotator{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(270deg);transform:rotate(270deg)}}@keyframes rotator{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(270deg);transform:rotate(270deg)}}.bcgov-captcha .path{stroke-dasharray:187;stroke-dashoffset:0;-webkit-transform-origin:center;transform-origin:center;-webkit-animation:1.4s ease-in-out infinite dash,5.6s ease-in-out infinite colors;animation:1.4s ease-in-out infinite dash,5.6s ease-in-out infinite colors}@-webkit-keyframes colors{0%{stroke:#9e9e9e}25%{stroke:#757575}50%{stroke:#616161}75%{stroke:#424242}100%{stroke:#212121}}@keyframes colors{0%{stroke:#9e9e9e}25%{stroke:#757575}50%{stroke:#616161}75%{stroke:#424242}100%{stroke:#212121}}@-webkit-keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:187;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}@keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;-webkit-transform:rotate(135deg);transform:rotate(135deg)}100%{stroke-dashoffset:187;-webkit-transform:rotate(450deg);transform:rotate(450deg)}}"]
                }] }
    ];
    /** @nocollapse */
    CaptchaComponent.ctorParameters = function () { return [
        { type: CaptchaDataService },
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    CaptchaComponent.propDecorators = {
        imageContainer: [{ type: ViewChild, args: ['image',] }],
        audioElement: [{ type: ViewChild, args: ['audioElement',] }],
        apiBaseUrl: [{ type: Input, args: ['apiBaseUrl',] }],
        nonce: [{ type: Input, args: ['nonce',] }],
        onValidToken: [{ type: Output }],
        successMessage: [{ type: Input, args: ['successMessage',] }],
        eagerFetchAudio: [{ type: Input, args: ['eagerFetchAudio',] }],
        language: [{ type: Input, args: ['language',] }],
        userPromptMessage: [{ type: Input, args: ['userPromptMessage',] }]
    };
    return CaptchaComponent;
}());
/** @enum {number} */
var CAPTCHA_STATE = {
    FETCHING_CAPTCHA_IMG: 1,
    SUCCESS_FETCH_IMG: 2,
    ERROR_FETCH_IMG: 3,
    VERIFYING_ANSWER: 4,
    SUCCESS_VERIFY_ANSWER_CORRECT: 5,
    // http error during verification call.
    ERROR_VERIFY: 6,
};
CAPTCHA_STATE[CAPTCHA_STATE.FETCHING_CAPTCHA_IMG] = 'FETCHING_CAPTCHA_IMG';
CAPTCHA_STATE[CAPTCHA_STATE.SUCCESS_FETCH_IMG] = 'SUCCESS_FETCH_IMG';
CAPTCHA_STATE[CAPTCHA_STATE.ERROR_FETCH_IMG] = 'ERROR_FETCH_IMG';
CAPTCHA_STATE[CAPTCHA_STATE.VERIFYING_ANSWER] = 'VERIFYING_ANSWER';
CAPTCHA_STATE[CAPTCHA_STATE.SUCCESS_VERIFY_ANSWER_CORRECT] = 'SUCCESS_VERIFY_ANSWER_CORRECT';
CAPTCHA_STATE[CAPTCHA_STATE.ERROR_VERIFY] = 'ERROR_VERIFY';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CaptchaModule = /** @class */ (function () {
    function CaptchaModule() {
    }
    /**
     * @return {?}
     */
    CaptchaModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: CaptchaModule,
            providers: [CaptchaDataService]
        };
    };
    CaptchaModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        CaptchaComponent
                    ],
                    imports: [
                        HttpClientModule,
                        CommonModule,
                        FormsModule
                    ],
                    providers: [
                        CaptchaDataService
                    ],
                    exports: [
                        CaptchaComponent
                    ],
                },] }
    ];
    return CaptchaModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CaptchaModule, CaptchaDataService as ɵb, CaptchaComponent as ɵa };

//# sourceMappingURL=moh-common-lib-captcha.js.map