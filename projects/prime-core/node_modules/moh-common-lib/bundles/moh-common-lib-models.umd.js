(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('angular2-uuid'), require('moment'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('moh-common-lib/models', ['exports', 'angular2-uuid', 'moment', '@angular/core'], factory) :
    (factory((global['moh-common-lib'] = global['moh-common-lib'] || {}, global['moh-common-lib'].models = {}),global.angular2Uuid,global.moment_,global.ng.core));
}(this, (function (exports,angular2Uuid,moment_,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Base functionality for container that is used to display bread crumbs
     */
    var /**
     * Base functionality for container that is used to display bread crumbs
     */ Container = /** @class */ (function () {
        function Container() {
        }
        /**
         * Converts a lower case string of a route in a user readable title.  e.g.
         * "personal-info" -> "Personal Info"
         */
        /**
         * Converts a lower case string of a route in a user readable title.  e.g.
         * "personal-info" -> "Personal Info"
         * @param {?} routePath
         * @return {?}
         */
        Container.prototype.convertRouteToTitle = /**
         * Converts a lower case string of a route in a user readable title.  e.g.
         * "personal-info" -> "Personal Info"
         * @param {?} routePath
         * @return {?}
         */
            function (routePath) {
                return routePath.split('-').map(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) { return x[0].toUpperCase() + x.slice(1); })).join(' ');
            };
        /**
         * @protected
         * @param {?} pageRoutes
         * @return {?}
         */
        Container.prototype.setProgressSteps = /**
         * @protected
         * @param {?} pageRoutes
         * @return {?}
         */
            function (pageRoutes) {
                var _this = this;
                // Interface for wizard progress items
                this.progressSteps = pageRoutes.map(( /**
                 * @param {?} page
                 * @return {?}
                 */function (page) {
                    if (page.path !== '') {
                        return {
                            title: _this.convertRouteToTitle(page.path),
                            route: page.path
                        };
                    }
                })).filter(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) { return x; }));
            };
        return Container;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     *
     * @abstract
     */
    var AbstractForm = /** @class */ (function () {
        /**
         * Constructor
         */
        function AbstractForm(router) {
            this.router = router;
            /**
             * Show or hide the loading spinner as required, should be passed to form action bar.
             */
            this.loading = false;
            this.router = router;
        }
        /**
         * Determines if the Continue button is disabled on the form action bar
         */
        /**
         * Determines if the Continue button is disabled on the form action bar
         * @return {?}
         */
        AbstractForm.prototype.canContinue = /**
         * Determines if the Continue button is disabled on the form action bar
         * @return {?}
         */
            function () {
                // Returns true if form is valid
                return this.form.valid;
            };
        /** Navigates to a route then automatically scrolls to the top of the page. */
        /**
         * Navigates to a route then automatically scrolls to the top of the page.
         * @protected
         * @param {?} url
         * @return {?}
         */
        AbstractForm.prototype.navigate = /**
         * Navigates to a route then automatically scrolls to the top of the page.
         * @protected
         * @param {?} url
         * @return {?}
         */
            function (url) {
                this.router.navigate([url])
                    .then(( /**
             * @param {?} data
             * @return {?}
             */function (data) {
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                }));
            };
        /** Runs the angular 'markAsTouched()' on all form inputs. */
        /**
         * Runs the angular 'markAsTouched()' on all form inputs.
         * @protected
         * @return {?}
         */
        AbstractForm.prototype.markAllInputsTouched = /**
         * Runs the angular 'markAsTouched()' on all form inputs.
         * @protected
         * @return {?}
         */
            function () {
                var _this = this;
                Object.keys(this.form.form.controls).forEach(( /**
                 * @param {?} x
                 * @return {?}
                 */function (x) {
                    _this.form.form.get(x).markAsTouched();
                }));
            };
        AbstractForm.propDecorators = {
            form: [{ type: core.ViewChild, args: ['formRef',] }]
        };
        return AbstractForm;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Address class, each project can extend this address class
     */
    var Address = /** @class */ (function () {
        function Address() {
        }
        /** Overwrite the native JavaScript toString method to determine how the
         * object should be printed, instead of [object Object].  This provides a
         * standard way to print out an address. If you need something specific you
         * should access the properties directly. We omit Province/Country because of
         * PharmaCare's BC focus. */
        /**
         * Overwrite the native JavaScript toString method to determine how the
         * object should be printed, instead of [object Object].  This provides a
         * standard way to print out an address. If you need something specific you
         * should access the properties directly. We omit Province/Country because of
         * PharmaCare's BC focus.
         * @return {?}
         */
        Address.prototype.toString = /**
         * Overwrite the native JavaScript toString method to determine how the
         * object should be printed, instead of [object Object].  This provides a
         * standard way to print out an address. If you need something specific you
         * should access the properties directly. We omit Province/Country because of
         * PharmaCare's BC focus.
         * @return {?}
         */
            function () {
                return this.street + ", " + this.city;
            };
        /**
         * Address must have all fields filled out to be considered
         * complete
         */
        /**
         * Address must have all fields filled out to be considered
         * complete
         * @return {?}
         */
        Address.prototype.isComplete = /**
         * Address must have all fields filled out to be considered
         * complete
         * @return {?}
         */
            function () {
                // All fields have data - not empty
                return !!(this.street && this.city && this.country &&
                    this.province && this.postal);
            };
        /* Copy function */
        /* Copy function */
        /**
         * @param {?} object
         * @return {?}
         */
        Address.prototype.copy = /* Copy function */
            /**
             * @param {?} object
             * @return {?}
             */
            function (object) {
                this.street = object.street;
                this.city = object.city;
                this.country = object.country;
                this.postal = object.postal;
                this.province = object.province;
            };
        return Address;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Base class.  Components extend this class to have object IDs.
     * NPM package dependencies:
     *  a) moment
     */
    var /**
     * Base class.  Components extend this class to have object IDs.
     * NPM package dependencies:
     *  a) moment
     */ Base = /** @class */ (function () {
        function Base() {
            /**
             * An identifier for parents to keep track of components
             */
            this.objectId = angular2Uuid.UUID.UUID().toString();
        }
        return Base;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment = moment_;
    /**
     * Person, each project can extend this person class
     * NPM package dependencies:
     *  a) moment
     */
    var /**
     * Person, each project can extend this person class
     * NPM package dependencies:
     *  a) moment
     */ Person = /** @class */ (function (_super) {
        __extends(Person, _super);
        function Person() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * Format to display birthdate
             */
            _this.dobFormat = 'YYYY/MM/DD';
            // Initialize dob to nulls
            _this.dateOfBirth = { year: null, month: null, day: null };
            return _this;
        }
        Object.defineProperty(Person.prototype, "dateOfBirthShort", {
            /** Returns DoB in YYYYMMDD format, used by API. */
            get: /**
             * Returns DoB in YYYYMMDD format, used by API.
             * @return {?}
             */ function () {
                return this.isDobEmpty() ? null :
                    moment({
                        year: this.dateOfBirth.year,
                        month: this.dateOfBirth.month - 1,
                        day: this.dateOfBirth.day
                    }).format('YYYYMMDD');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Person.prototype, "formatDateOfBirth", {
            /** Returns DoB in dobFormat (default: YYYY/MM/DD), for display purposes */
            get: /**
             * Returns DoB in dobFormat (default: YYYY/MM/DD), for display purposes
             * @return {?}
             */ function () {
                return this.isDobEmpty() ? null :
                    moment({
                        year: this.dateOfBirth.year,
                        month: this.dateOfBirth.month - 1,
                        day: this.dateOfBirth.day
                    }).format(this.dobFormat);
            },
            enumerable: true,
            configurable: true
        });
        /** Indicates whether or not the date of birth is empty */
        /**
         * Indicates whether or not the date of birth is empty
         * @return {?}
         */
        Person.prototype.isDobEmpty = /**
         * Indicates whether or not the date of birth is empty
         * @return {?}
         */
            function () {
                var _this = this;
                return Object.keys(this.dateOfBirth)
                    .map(( /**
             * @param {?} key
             * @return {?}
             */function (key) { return _this.dateOfBirth[key]; }))
                    .filter(( /**
             * @param {?} x
             * @return {?}
             */function (x) { return x; })) // Filter out null/undefined
                    .length !== 3;
            };
        Object.defineProperty(Person.prototype, "name", {
            /** Concatenates the first and last name together */
            get: /**
             * Concatenates the first and last name together
             * @return {?}
             */ function () {
                /** @type {?} */
                var _name = null;
                if (this.firstName) {
                    _name = this.firstName;
                }
                if (this.lastName) {
                    _name = _name ? _name.concat(' ' + this.lastName) : this.lastName;
                }
                return _name;
            },
            /**
             * Sets the full name for the person (first, middle and last names)
             * NOTE: Just for development with dummy data and unit tests
             */
            set: /**
             * Sets the full name for the person (first, middle and last names)
             * NOTE: Just for development with dummy data and unit tests
             * @param {?} fullName
             * @return {?}
             */ function (fullName) {
                /** @type {?} */
                var names = fullName.split(' ');
                this.firstName = names[0];
                if (names.length === 2) {
                    this.lastName = names[1];
                }
                else if (names.length === 3) {
                    this.middleName = names[1];
                    this.lastName = names[2];
                }
            },
            enumerable: true,
            configurable: true
        });
        /** Calculates the age from date of birth */
        /**
         * Calculates the age from date of birth
         * @return {?}
         */
        Person.prototype.getAge = /**
         * Calculates the age from date of birth
         * @return {?}
         */
            function () {
                /** @type {?} */
                var dobDt = new Date(this.dateOfBirth.year, this.dateOfBirth.month, this.dateOfBirth.day);
                return Math.ceil(moment().diff(dobDt, 'year', true));
            };
        /* Copy function */
        /* Copy function */
        /**
         * @param {?} object
         * @return {?}
         */
        Person.prototype.copy = /* Copy function */
            /**
             * @param {?} object
             * @return {?}
             */
            function (object) {
                this.firstName = object.firstName;
                this.middleName = object.middleName;
                this.lastName = object.lastName;
                this.dateOfBirth.month = object.dateOfBirth.month;
                this.dateOfBirth.day = object.dateOfBirth.day;
                this.dateOfBirth.year = object.dateOfBirth.year;
            };
        return Person;
    }(Base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LETTER = /[A-Z]/i;
    // Ignore case here, then upperCase it via pipe.
    /** @type {?} */
    var NUMBER = /\d/;
    /** @type {?} */
    var SPACE = ' ';
    var MaskModel = /** @class */ (function (_super) {
        __extends(MaskModel, _super);
        function MaskModel() {
            var _this = _super.call(this) || this;
            _this.valueChange = new core.EventEmitter();
            _this.disabled = false;
            _this.required = true;
            return _this;
        }
        /**
         * Upper cases letters in string
         */
        /**
         * Upper cases letters in string
         * @param {?} text
         * @return {?}
         */
        MaskModel.prototype.upperCasePipe = /**
         * Upper cases letters in string
         * @param {?} text
         * @return {?}
         */
            function (text) {
                return text.toUpperCase();
            };
        /**
         * Updates the value
         */
        /**
         * Updates the value
         * @param {?} value
         * @return {?}
         */
        MaskModel.prototype.onUpdate = /**
         * Updates the value
         * @param {?} value
         * @return {?}
         */
            function (value) {
                // Emit value without spaces
                this.valueChange.emit(value);
            };
        MaskModel.propDecorators = {
            value: [{ type: core.Input }],
            valueChange: [{ type: core.Output }],
            disabled: [{ type: core.Input }],
            required: [{ type: core.Input }]
        };
        return MaskModel;
    }(Base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.AbstractForm = AbstractForm;
    exports.Address = Address;
    exports.Base = Base;
    exports.Person = Person;
    exports.MaskModel = MaskModel;
    exports.LETTER = LETTER;
    exports.NUMBER = NUMBER;
    exports.SPACE = SPACE;
    exports.Container = Container;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=moh-common-lib-models.umd.js.map