(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('angular2-uuid')) :
    typeof define === 'function' && define.amd ? define('moh-common-lib/images', ['exports', 'angular2-uuid'], factory) :
    (factory((global['moh-common-lib'] = global['moh-common-lib'] || {}, global['moh-common-lib'].images = {}),global.angular2Uuid));
}(this, (function (exports,angular2Uuid) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var CommonImageError = {
        WrongType: 0,
        TooSmall: 1,
        TooBig: 2,
        AlreadyExists: 3,
        Unknown: 4,
        CannotOpen: 5,
        PDFnotSupported: 6,
        CannotOpenPDF: 7,
    };
    CommonImageError[CommonImageError.WrongType] = 'WrongType';
    CommonImageError[CommonImageError.TooSmall] = 'TooSmall';
    CommonImageError[CommonImageError.TooBig] = 'TooBig';
    CommonImageError[CommonImageError.AlreadyExists] = 'AlreadyExists';
    CommonImageError[CommonImageError.Unknown] = 'Unknown';
    CommonImageError[CommonImageError.CannotOpen] = 'CannotOpen';
    CommonImageError[CommonImageError.PDFnotSupported] = 'PDFnotSupported';
    CommonImageError[CommonImageError.CannotOpenPDF] = 'CannotOpenPDF';
    var CommonImageProcessingError = /** @class */ (function () {
        // added errorDescription.PDF.JS gives proper error messages as invalid pdf structure or password protected pdf.Good for splunk tracking
        function CommonImageProcessingError(errorCode, errorDescription) {
            this.errorCode = errorCode;
            this.errorDescription = errorDescription;
        }
        return CommonImageProcessingError;
    }());
    /**
     * Image as uploaded by user
     */
    var /**
     * Image as uploaded by user
     */ CommonImage = /** @class */ (function () {
        function CommonImage() {
            this.attachmentOrder = 0;
            this.uuid = angular2Uuid.UUID.UUID();
        }
        return CommonImage;
    }());
    var CommonImageScaleFactorsImpl = /** @class */ (function () {
        function CommonImageScaleFactorsImpl(wFactor, hFactor) {
            this.widthFactor = wFactor;
            this.heightFactor = hFactor;
        }
        /**
         * @param {?} scale
         * @return {?}
         */
        CommonImageScaleFactorsImpl.prototype.scaleDown = /**
         * @param {?} scale
         * @return {?}
         */
            function (scale) {
                return new CommonImageScaleFactorsImpl(this.widthFactor * scale, this.heightFactor * scale);
            };
        return CommonImageScaleFactorsImpl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.CommonImageError = CommonImageError;
    exports.CommonImageProcessingError = CommonImageProcessingError;
    exports.CommonImage = CommonImage;
    exports.CommonImageScaleFactorsImpl = CommonImageScaleFactorsImpl;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=moh-common-lib-images.umd.js.map