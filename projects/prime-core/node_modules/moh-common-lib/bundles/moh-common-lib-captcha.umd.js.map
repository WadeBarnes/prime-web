{"version":3,"file":"moh-common-lib-captcha.umd.js.map","sources":["ng://moh-common-lib/captcha/captcha-data.service.ts","ng://moh-common-lib/captcha/captcha.component.ts","ng://moh-common-lib/captcha/captcha.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n// import { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\n\n// payload returned from the server\n@Injectable()\nexport class ServerPayload {\n    nonce: string;\n    captcha: string;\n    validation: string;\n    expiry: string;\n}\n\n@Injectable()\nexport class CaptchaDataService {\n\n    constructor(private httpClient: HttpClient) { }\n    // private http: Http) { }\n\n    public fetchData(apiBaseUrl: string, nonce: string): Observable<HttpResponse<ServerPayload>> {\n        return this.httpClient\n            .post<ServerPayload>(\n                apiBaseUrl + '/captcha',\n                { nonce: nonce },\n                { observe: 'response' });\n    }\n\n    public verifyCaptcha(apiBaseUrl: string,\n                            nonce: string,\n                            answer: string,\n                            encryptedAnswer: string): Observable<HttpResponse<ServerPayload>> {\n        return this.httpClient\n            .post<ServerPayload>(\n                apiBaseUrl + '/verify/captcha',\n                { nonce: nonce, answer: answer, validation: encryptedAnswer },\n                { observe: 'response' });\n    }\n\n    public fetchAudio(apiBaseUrl: string, validation: string, translation?: string) {\n        const payload: any = { validation: validation };\n        if (translation) {\n            payload.translation = translation;\n        }\n        return this.httpClient\n            .post<string>(\n                apiBaseUrl + '/captcha/audio',\n                payload,\n                { observe: 'response' });\n    }\n    /*\n      fetchData(apiBaseUrl: string, nonce: string): Observable<Response> {\n        return this.http.post(apiBaseUrl + '/captcha', {nonce: nonce}, {});\n      }\n\n      verifyCaptcha(apiBaseUrl: string, nonce: string, answer: string, encryptedAnswer: string): Observable<Response> {\n        return this.http.post(apiBaseUrl + '/verify/captcha', {nonce: nonce, answer: answer, validation: encryptedAnswer}, {});\n      }\n\n      fetchAudio(apiBaseUrl: string, validation: string): Observable<Response> {\n        return this.http.post(apiBaseUrl + '/captcha/audio', {validation: validation}, {});\n      }\n    */\n}\n","import {\n  Component, ElementRef, ViewChild, SimpleChanges, NgZone,\n  ChangeDetectorRef, Output, Input, AfterViewInit, OnInit, OnChanges, EventEmitter\n} from '@angular/core';\n// import { Http, Response } from '@angular/http';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { CaptchaDataService, ServerPayload } from './captcha-data.service';\n\n@Component({\n  selector: 'common-captcha',\n  templateUrl: './captcha.component.html',\n  styleUrls: ['./captcha.component.scss']\n})\nexport class CaptchaComponent implements AfterViewInit, OnInit, OnChanges {\n\n  @ViewChild('image') imageContainer: ElementRef;\n  @ViewChild('audioElement') audioElement: ElementRef;\n  // tslint:disable:no-input-rename\n  @Input('apiBaseUrl') apiBaseUrl: string;\n  @Input('nonce') nonce: string;\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() onValidToken = new EventEmitter<string>();\n  @Input('successMessage') successMessage: string;\n  @Input('eagerFetchAudio') eagerFetchAudio: string;\n  @Input('language') language: string = 'en';\n  @Input('userPromptMessage') userPromptMessage: string;\n\n  /**\n   * Http error response for fetching a CAPTCHA image.\n   */\n  errorFetchingImg = null;\n\n  /**\n   * Http error response for verifying user's answer.\n   */\n  errorVerifyAnswer = null;\n\n  private validation = '';\n  public audio = '';\n  public answer = '';\n\n  state: CAPTCHA_STATE;\n  incorrectAnswer: boolean;\n\n  public fetchingAudioInProgress = false;\n\n  constructor(private dataService: CaptchaDataService,\n    private cd: ChangeDetectorRef,\n    private ngZone: NgZone) {\n  }\n\n  ngOnInit() {\n    this.forceRefresh.bind(this);\n    window['ca.bcgov.captchaRefresh'] = this.publicForceRefresh.bind(this);\n\n    // if(!this.userPromptMessage){\n    //   this.userPromptMessage = \"Enter the text you either see in the box or you hear in the audio\";\n    // }\n  }\n  ngAfterViewInit() {\n    this.forceRefresh();\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    // when changing language, if audio is empty then no need to refetch\n    if (!changes.language || !this.audio || this.audio.length === 0) {\n      if (!(changes.reloadCaptcha && (true === changes.reloadCaptcha.previousValue\n        || false === changes.reloadCaptcha.previousValue)\n        && (changes.reloadCaptcha.currentValue !== changes.reloadCaptcha.previousValue))) {\n        return;\n      }\n    }\n    this.getNewCaptcha(false);\n  }\n\n  forceRefresh() {\n    this.getNewCaptcha(false);\n    this.cd.detectChanges();\n  }\n\n  publicForceRefresh() {\n    this.ngZone.run(() => this.forceRefresh());\n  }\n\n  answerChanged(event: any) {\n    if (this.answer.length < 6) {\n      this.incorrectAnswer = null;\n    }\n    if (this.answer.length === 6) {\n      this.state = CAPTCHA_STATE.VERIFYING_ANSWER;\n      this.incorrectAnswer = null;\n      this.dataService.verifyCaptcha(this.apiBaseUrl, this.nonce, this.answer, this.validation).subscribe(response => {\n        const payload = response.body;\n        if (this.isValidPayload(payload)) {\n          this.handleVerify(payload);\n        } else {\n          this.state = CAPTCHA_STATE.ERROR_VERIFY;\n          this.errorVerifyAnswer = this.createErrorTextLine(response);\n        }\n      },\n        (error) => {\n          this.state = CAPTCHA_STATE.ERROR_VERIFY;\n          this.errorVerifyAnswer = this.createErrorTextLine(error);\n          console.log('Error response from verifying user answer: %o', error);\n        }\n      );\n    }\n  }\n\n  // Call the backend to see if our answer is correct\n  private handleVerify(payload: any) {\n    // There could be the rare change where an invalid payload response is received.\n    if (payload.valid === true) {\n      this.state = CAPTCHA_STATE.SUCCESS_VERIFY_ANSWER_CORRECT;\n      this.onValidToken.emit(payload.jwt);\n    } else {\n      this.incorrectAnswer = true;\n      this.answer = '';\n      this.audio = '';\n      // They failed - try a new one.\n      this.getNewCaptcha(true);\n    }\n  }\n\n  /**\n   * Case where HTTP 200 response code is received by the payload is incorrect or corrupt.\n   * The occurance of this type of case should be rare.\n   * @param payload\n   */\n  private isValidPayload(payload) {\n    // console.debug('Response payload: %o', payload);\n    if (!payload) {\n      console.error('payload cannot be null or undefined or 0');\n      return false;\n    } else {\n      const hasValueProp = payload.hasOwnProperty('valid');\n      if (!hasValueProp) {\n        console.error('payload must have its own property named \\'valid\\'');\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  public retryFetchCaptcha() {\n    console.log('Retry captcha');\n    this.state = undefined;\n\n    /**\n     * wait for 0.5 seond before resubmitting\n     */\n    setTimeout(() => {\n      this.getNewCaptcha(false);\n    }, 100);\n  }\n\n  public playAudio() {\n    if (this.audio && this.audio.length > 0) {\n      this.audioElement.nativeElement.play();\n    } else {\n      this.fetchAudio(true);\n    }\n  }\n\n  private fetchAudio(playImmediately: boolean = false) {\n    if (!this.fetchingAudioInProgress) {\n      this.fetchingAudioInProgress = true;\n      this.dataService.fetchAudio(this.apiBaseUrl, this.validation, this.language).subscribe((response: HttpResponse<any>) => {\n        this.fetchingAudioInProgress = false;\n        this.audio = response.body.audio;\n        this.cd.detectChanges();\n        if (playImmediately) {\n          this.audioElement.nativeElement.play();\n        }\n      },\n        (error) => {\n          this.fetchingAudioInProgress = false;\n          console.log('Error response from fetching audio CAPTCHA: %o', error);\n          this.cd.detectChanges();\n        }\n      );\n    }\n  }\n\n  public getNewCaptcha(errorCase: any) {\n    this.state = CAPTCHA_STATE.FETCHING_CAPTCHA_IMG;\n    this.audio = '';\n\n    // Reset things\n    if (!errorCase) {\n      // Let them know they failed instead of wiping out the answer area\n      // Contructing this form on page load/reload will have errorCase = false\n      this.incorrectAnswer = null;\n    }\n\n\n    this.dataService.fetchData(this.apiBaseUrl, this.nonce).subscribe(response => {\n      this.state = CAPTCHA_STATE.SUCCESS_FETCH_IMG;\n\n      const payload = response.body;\n      this.imageContainer.nativeElement.innerHTML = payload.captcha;\n      this.validation = payload.validation;\n      this.cd.detectChanges();\n\n      if (this.eagerFetchAudio === 'true') {\n        // console.log('Fetch audio eagerly');\n        this.fetchAudio();\n      } else {\n        // console.log('Not to fetch audio eagerly');\n      }\n    },\n\n      (error) => {\n        this.state = CAPTCHA_STATE.ERROR_FETCH_IMG;\n        this.errorFetchingImg = this.createErrorTextLine(error);\n        console.log('Error esponse from fetching CAPTCHA text: %o', error);\n        this.cd.detectChanges();\n      }\n    );\n  }\n\n  private createErrorTextLine(error) {\n\n    let line = 'Error status: ' + error.status;\n    if (error.statusText) {\n      line = line + ', status text: ' + error.statusText;\n    }\n    return line;\n  }\n\n  // tslint:disable-next-line:member-ordering\n  public translatedMessages = {\n    playAudio: {\n      en: 'Play Audio',\n      zh: 'æ­æ¾å£°é³',\n      fr: 'Lecture audio',\n      pa: 'à¨à¨¡à©à¨ à¨à¨²à¨¾à¨',\n    },\n    tryAnotherImg: {\n      en: 'Try another image',\n      zh: 'æ¢ä¸ªå¾å',\n      fr: 'Essayez une autre image',\n      pa: 'à¨à©à¨ à¨¹à©à¨° à¨à¨¿à©±à¨¤à¨° à¨à¨à¨¼à¨®à¨¾à¨',\n    },\n    userPromptMessage: {\n      en: 'Enter the text you either see in the box or you hear in the audio',\n      zh: 'è¯·è¾å¥çå°æå¬å°çæå­',\n      fr: 'Entrez le texte que vous voyez dans la case ou que vous entendez dans le son',\n      pa: 'à¨à¨¹ à¨à©à¨à¨¸à¨ à¨¦à¨¾à¨à¨² à¨à¨°à© à¨à© à¨¤à©à¨¸à©à¨ à¨¬à¨à¨¸à© à¨µà¨¿à©±à¨ à¨¦à©à¨à¨¦à© à¨¹à© à¨à¨¾à¨ à¨¤à©à¨¸à©à¨ à¨à¨¡à©à¨ à¨µà¨¿à©±à¨ à¨¸à©à¨£à¨¦à© à¨¹à©',\n    },\n    incorrectAnswer: {\n      en: 'Incorrect answer, please try again.',\n      zh: 'ç­æ¡ä¸å¯¹ãè¯·éè¯ã',\n      fr: 'Mauvaise rÃ©ponse, veuillez rÃ©essayer.',\n      pa: 'à¨à¨²à¨¤ à¨à¨µà¨¾à¨¬, à¨à¨¿à¨°à¨ªà¨¾ à¨à¨°à¨à© à¨¦à©à¨¬à¨¾à¨°à¨¾ à¨à©à¨¸à¨¼à¨¿à¨¸à¨¼ à¨à¨°à©.',\n    },\n    successMessage: {\n      en: 'You can submit your application now.',\n      zh: 'ä½ ç°å¨å¯ä»¥æäº¤ç³è¯·äºã',\n      fr: 'Vous pouvez soumettre votre candidature maintenant.',\n      pa: 'à¨¤à©à¨¸à©à¨ à¨à¨ªà¨£à© à¨à¨°à¨à¨¼à© à¨¹à©à¨£à© à¨ªà©à¨¸à¨¼ à¨à¨° à¨¸à¨à¨¦à© à¨¹à©',\n    },\n    correct: {\n      en: 'Correct.',\n      zh: 'æ­£ç¡®ã',\n      fr: 'Correct.',\n      pa: 'à¨¸à¨¹à© à¨à¨°à©',\n    },\n    loadingImage: {\n      en: 'Loading CAPTCHA image',\n      zh: 'æ­£å¨ä¸è½½éªè¯ç ',\n      fr: 'Chargement de l\\'image CAPTCHA',\n      pa: 'à¨à©à¨ªà¨à¨à¨¾ à¨à¨¿à©±à¨¤à¨° à¨²à©à¨¡ à¨à¨° à¨°à¨¿à¨¹à¨¾ à¨¹à©',\n    },\n    browserNotSupportAudio: {\n      en: 'Your browser does not support the audio element.',\n      zh: 'ä½ çæµè§å¨ä¸æ¯ææ­é³',\n      fr: 'Votre navigateur ne supporte pas l\\'Ã©lÃ©ment audio.',\n      pa: 'à¨¤à©à¨¹à¨¾à¨¡à¨¾ à¨¬à©à¨°à¨¾à¨à¨à¨¼à¨° à¨à¨¡à©à¨ à¨à¨²à©à¨®à©à¨à¨ à¨¦à¨¾ à¨¸à¨®à¨°à¨¥à¨¨ à¨¨à¨¹à©à¨ à¨à¨°à¨¦à¨¾.',\n    },\n    verifyingAnswer: {\n      en: 'Verifying your answer...',\n      zh: 'æ­£å¨éªè¯ç­æ¡...',\n      fr: 'VÃ©rification de votre rÃ©ponse ...',\n      pa: 'à¨¤à©à¨¹à¨¾à¨¡à¨¾ à¨à¨µà¨¾à¨¬ à¨¤à¨¸à¨¦à©à¨ à¨à¨° à¨°à¨¿à¨¹à¨¾ à¨¹à© ...',\n    },\n    errorRetrievingImg: {\n      en: 'Error happened while retrieving CAPTCHA image. please {{click here}} to try again',\n      zh: 'éªè¯ç ä¸è½½éè¯¯ãè¯·{{ç¹å»è¿é}}éè¯',\n      fr: 'Une erreur s\\'est produite lors de la rÃ©cupÃ©ration de l\\'image CAPTCHA. s\\'il vous plaÃ®t {{cliquez ici}} pour rÃ©essayer',\n      pa: 'à¨à©à¨ªà¨à¨à¨¾ à¨à¨¿à©±à¨¤à¨° à¨¨à©à©° à¨ªà©à¨°à¨¾à¨ªà¨¤ à¨à¨°à¨¦à© à¨¸à¨®à©à¨ à¨¤à¨°à©à©±à¨à© à¨à¨¤à¨ªà©°à¨¨ à¨¹à©à¨. à¨à¨¿à¨°à¨ªà¨¾ à¨à¨°à¨à© à¨¦à©à¨¬à¨¾à¨°à¨¾ à¨à©à¨¸à¨¼à¨¿à¨¸à¨¼ à¨à¨°à¨¨ à¨²à¨ {{à¨à©±à¨¥à© à¨à¨²à¨¿à¨ à¨à¨°à©}}',\n    },\n    errorVerifyingAnswer: {\n      en: 'Error happened while verifying your answer. please {{click here}} to try again',\n      zh: 'éªè¯ç­æ¡è¿ç¨åçéè¯¯ãè¯·{{ç¹å»è¿é}}éè¯',\n      fr: 'Une erreur s\\'est produite lors de la vÃ©rification de votre rÃ©ponse. s\\'il vous plaÃ®t {{cliquez ici}} pour rÃ©essayer',\n      pa: 'à¨¤à©à¨¹à¨¾à¨¡à¨¾ à¨à¨µà¨¾à¨¬ à¨¤à¨¸à¨¦à©à¨ à¨à¨°à¨¨ à¨µà©à¨²à© à¨à¨²à¨¤à© à¨à¨ à¨à¨¿à¨°à¨ªà¨¾ à¨à¨°à¨à© à¨¦à©à¨¬à¨¾à¨°à¨¾ à¨à©à¨¸à¨¼à¨¿à¨¸à¨¼ à¨à¨°à¨¨ à¨²à¨ {{à¨à©±à¨¥à© à¨à¨²à¨¿à¨ à¨à¨°à©}}',\n    },\n  };\n}\n\n/**\n * 7 mutually exclusive states, the program can only be in one of these state\n * at any given point..\n */\nenum CAPTCHA_STATE {\n  FETCHING_CAPTCHA_IMG = 1,\n  SUCCESS_FETCH_IMG = 2,\n  ERROR_FETCH_IMG = 3,\n  VERIFYING_ANSWER = 4,\n  SUCCESS_VERIFY_ANSWER_CORRECT = 5,\n  // http error during verification call.\n  ERROR_VERIFY = 6,\n  // SUCCESS_VERIFY_ANSWER_INCORRECT = 6,\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { CaptchaComponent } from './captcha.component';\nimport { CaptchaDataService } from './captcha-data.service';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    CaptchaComponent\n  ],\n  imports: [\n    HttpClientModule,\n    CommonModule,\n    FormsModule\n  ],\n  providers: [\n    CaptchaDataService\n  ],\n  exports: [\n    CaptchaComponent\n  ],\n})\nexport class CaptchaModule { \n  static forRoot(): ModuleWithProviders<CaptchaModule> {\n    return {\n      ngModule: CaptchaModule,\n      providers: [CaptchaDataService]\n    }\n  }\n}\n"],"names":["Injectable","HttpClient","EventEmitter","Component","ChangeDetectorRef","NgZone","ViewChild","Input","Output","NgModule","HttpClientModule","CommonModule","FormsModule"],"mappings":"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"}
