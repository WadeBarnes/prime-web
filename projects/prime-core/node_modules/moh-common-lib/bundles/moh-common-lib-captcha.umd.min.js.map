{"version":3,"sources":["ng://moh-common-lib/captcha/captcha-data.service.ts","ng://moh-common-lib/captcha/captcha.component.ts","ng://moh-common-lib/captcha/captcha.module.ts"],"names":["CaptchaDataService","httpClient","this","prototype","fetchData","apiBaseUrl","nonce","post","observe","verifyCaptcha","answer","encryptedAnswer","validation","fetchAudio","translation","payload","Injectable","HttpClient","CaptchaComponent","dataService","cd","ngZone","onValidToken","EventEmitter","language","errorFetchingImg","errorVerifyAnswer","audio","fetchingAudioInProgress","translatedMessages","playAudio","en","zh","fr","pa","tryAnotherImg","userPromptMessage","incorrectAnswer","successMessage","correct","loadingImage","browserNotSupportAudio","verifyingAnswer","errorRetrievingImg","errorVerifyingAnswer","ngOnInit","forceRefresh","bind","window","publicForceRefresh","ngAfterViewInit","ngOnChanges","changes","length","reloadCaptcha","previousValue","currentValue","getNewCaptcha","detectChanges","_this","run","answerChanged","event","state","CAPTCHA_STATE","VERIFYING_ANSWER","subscribe","response","body","isValidPayload","handleVerify","ERROR_VERIFY","createErrorTextLine","error","console","log","valid","SUCCESS_VERIFY_ANSWER_CORRECT","emit","jwt","hasOwnProperty","retryFetchCaptcha","undefined","setTimeout","audioElement","nativeElement","play","playImmediately","errorCase","FETCHING_CAPTCHA_IMG","SUCCESS_FETCH_IMG","imageContainer","innerHTML","captcha","eagerFetchAudio","ERROR_FETCH_IMG","line","status","statusText","Component","args","selector","template","ChangeDetectorRef","NgZone","ViewChild","Input","Output","CaptchaModule","forRoot","ngModule","providers","NgModule","declarations","imports","HttpClientModule","CommonModule","FormsModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\n// import { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs';\n\n// payload returned from the server\n@Injectable()\nexport class ServerPayload {\n    nonce: string;\n    captcha: string;\n    validation: string;\n    expiry: string;\n}\n\n@Injectable()\nexport class CaptchaDataService {\n\n    constructor(private httpClient: HttpClient) { }\n    // private http: Http) { }\n\n    public fetchData(apiBaseUrl: string, nonce: string): Observable<HttpResponse<ServerPayload>> {\n        return this.httpClient\n            .post<ServerPayload>(\n                apiBaseUrl + '/captcha',\n                { nonce: nonce },\n                { observe: 'response' });\n    }\n\n    public verifyCaptcha(apiBaseUrl: string,\n                            nonce: string,\n                            answer: string,\n                            encryptedAnswer: string): Observable<HttpResponse<ServerPayload>> {\n        return this.httpClient\n            .post<ServerPayload>(\n                apiBaseUrl + '/verify/captcha',\n                { nonce: nonce, answer: answer, validation: encryptedAnswer },\n                { observe: 'response' });\n    }\n\n    public fetchAudio(apiBaseUrl: string, validation: string, translation?: string) {\n        const payload: any = { validation: validation };\n        if (translation) {\n            payload.translation = translation;\n        }\n        return this.httpClient\n            .post<string>(\n                apiBaseUrl + '/captcha/audio',\n                payload,\n                { observe: 'response' });\n    }\n    /*\n      fetchData(apiBaseUrl: string, nonce: string): Observable<Response> {\n        return this.http.post(apiBaseUrl + '/captcha', {nonce: nonce}, {});\n      }\n\n      verifyCaptcha(apiBaseUrl: string, nonce: string, answer: string, encryptedAnswer: string): Observable<Response> {\n        return this.http.post(apiBaseUrl + '/verify/captcha', {nonce: nonce, answer: answer, validation: encryptedAnswer}, {});\n      }\n\n      fetchAudio(apiBaseUrl: string, validation: string): Observable<Response> {\n        return this.http.post(apiBaseUrl + '/captcha/audio', {validation: validation}, {});\n      }\n    */\n}\n","import {\n  Component, ElementRef, ViewChild, SimpleChanges, NgZone,\n  ChangeDetectorRef, Output, Input, AfterViewInit, OnInit, OnChanges, EventEmitter\n} from '@angular/core';\n// import { Http, Response } from '@angular/http';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { CaptchaDataService, ServerPayload } from './captcha-data.service';\n\n@Component({\n  selector: 'common-captcha',\n  templateUrl: './captcha.component.html',\n  styleUrls: ['./captcha.component.scss']\n})\nexport class CaptchaComponent implements AfterViewInit, OnInit, OnChanges {\n\n  @ViewChild('image') imageContainer: ElementRef;\n  @ViewChild('audioElement') audioElement: ElementRef;\n  // tslint:disable:no-input-rename\n  @Input('apiBaseUrl') apiBaseUrl: string;\n  @Input('nonce') nonce: string;\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() onValidToken = new EventEmitter<string>();\n  @Input('successMessage') successMessage: string;\n  @Input('eagerFetchAudio') eagerFetchAudio: string;\n  @Input('language') language: string = 'en';\n  @Input('userPromptMessage') userPromptMessage: string;\n\n  /**\n   * Http error response for fetching a CAPTCHA image.\n   */\n  errorFetchingImg = null;\n\n  /**\n   * Http error response for verifying user's answer.\n   */\n  errorVerifyAnswer = null;\n\n  private validation = '';\n  public audio = '';\n  public answer = '';\n\n  state: CAPTCHA_STATE;\n  incorrectAnswer: boolean;\n\n  public fetchingAudioInProgress = false;\n\n  constructor(private dataService: CaptchaDataService,\n    private cd: ChangeDetectorRef,\n    private ngZone: NgZone) {\n  }\n\n  ngOnInit() {\n    this.forceRefresh.bind(this);\n    window['ca.bcgov.captchaRefresh'] = this.publicForceRefresh.bind(this);\n\n    // if(!this.userPromptMessage){\n    //   this.userPromptMessage = \"Enter the text you either see in the box or you hear in the audio\";\n    // }\n  }\n  ngAfterViewInit() {\n    this.forceRefresh();\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    // when changing language, if audio is empty then no need to refetch\n    if (!changes.language || !this.audio || this.audio.length === 0) {\n      if (!(changes.reloadCaptcha && (true === changes.reloadCaptcha.previousValue\n        || false === changes.reloadCaptcha.previousValue)\n        && (changes.reloadCaptcha.currentValue !== changes.reloadCaptcha.previousValue))) {\n        return;\n      }\n    }\n    this.getNewCaptcha(false);\n  }\n\n  forceRefresh() {\n    this.getNewCaptcha(false);\n    this.cd.detectChanges();\n  }\n\n  publicForceRefresh() {\n    this.ngZone.run(() => this.forceRefresh());\n  }\n\n  answerChanged(event: any) {\n    if (this.answer.length < 6) {\n      this.incorrectAnswer = null;\n    }\n    if (this.answer.length === 6) {\n      this.state = CAPTCHA_STATE.VERIFYING_ANSWER;\n      this.incorrectAnswer = null;\n      this.dataService.verifyCaptcha(this.apiBaseUrl, this.nonce, this.answer, this.validation).subscribe(response => {\n        const payload = response.body;\n        if (this.isValidPayload(payload)) {\n          this.handleVerify(payload);\n        } else {\n          this.state = CAPTCHA_STATE.ERROR_VERIFY;\n          this.errorVerifyAnswer = this.createErrorTextLine(response);\n        }\n      },\n        (error) => {\n          this.state = CAPTCHA_STATE.ERROR_VERIFY;\n          this.errorVerifyAnswer = this.createErrorTextLine(error);\n          console.log('Error response from verifying user answer: %o', error);\n        }\n      );\n    }\n  }\n\n  // Call the backend to see if our answer is correct\n  private handleVerify(payload: any) {\n    // There could be the rare change where an invalid payload response is received.\n    if (payload.valid === true) {\n      this.state = CAPTCHA_STATE.SUCCESS_VERIFY_ANSWER_CORRECT;\n      this.onValidToken.emit(payload.jwt);\n    } else {\n      this.incorrectAnswer = true;\n      this.answer = '';\n      this.audio = '';\n      // They failed - try a new one.\n      this.getNewCaptcha(true);\n    }\n  }\n\n  /**\n   * Case where HTTP 200 response code is received by the payload is incorrect or corrupt.\n   * The occurance of this type of case should be rare.\n   * @param payload\n   */\n  private isValidPayload(payload) {\n    // console.debug('Response payload: %o', payload);\n    if (!payload) {\n      console.error('payload cannot be null or undefined or 0');\n      return false;\n    } else {\n      const hasValueProp = payload.hasOwnProperty('valid');\n      if (!hasValueProp) {\n        console.error('payload must have its own property named \\'valid\\'');\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  public retryFetchCaptcha() {\n    console.log('Retry captcha');\n    this.state = undefined;\n\n    /**\n     * wait for 0.5 seond before resubmitting\n     */\n    setTimeout(() => {\n      this.getNewCaptcha(false);\n    }, 100);\n  }\n\n  public playAudio() {\n    if (this.audio && this.audio.length > 0) {\n      this.audioElement.nativeElement.play();\n    } else {\n      this.fetchAudio(true);\n    }\n  }\n\n  private fetchAudio(playImmediately: boolean = false) {\n    if (!this.fetchingAudioInProgress) {\n      this.fetchingAudioInProgress = true;\n      this.dataService.fetchAudio(this.apiBaseUrl, this.validation, this.language).subscribe((response: HttpResponse<any>) => {\n        this.fetchingAudioInProgress = false;\n        this.audio = response.body.audio;\n        this.cd.detectChanges();\n        if (playImmediately) {\n          this.audioElement.nativeElement.play();\n        }\n      },\n        (error) => {\n          this.fetchingAudioInProgress = false;\n          console.log('Error response from fetching audio CAPTCHA: %o', error);\n          this.cd.detectChanges();\n        }\n      );\n    }\n  }\n\n  public getNewCaptcha(errorCase: any) {\n    this.state = CAPTCHA_STATE.FETCHING_CAPTCHA_IMG;\n    this.audio = '';\n\n    // Reset things\n    if (!errorCase) {\n      // Let them know they failed instead of wiping out the answer area\n      // Contructing this form on page load/reload will have errorCase = false\n      this.incorrectAnswer = null;\n    }\n\n\n    this.dataService.fetchData(this.apiBaseUrl, this.nonce).subscribe(response => {\n      this.state = CAPTCHA_STATE.SUCCESS_FETCH_IMG;\n\n      const payload = response.body;\n      this.imageContainer.nativeElement.innerHTML = payload.captcha;\n      this.validation = payload.validation;\n      this.cd.detectChanges();\n\n      if (this.eagerFetchAudio === 'true') {\n        // console.log('Fetch audio eagerly');\n        this.fetchAudio();\n      } else {\n        // console.log('Not to fetch audio eagerly');\n      }\n    },\n\n      (error) => {\n        this.state = CAPTCHA_STATE.ERROR_FETCH_IMG;\n        this.errorFetchingImg = this.createErrorTextLine(error);\n        console.log('Error esponse from fetching CAPTCHA text: %o', error);\n        this.cd.detectChanges();\n      }\n    );\n  }\n\n  private createErrorTextLine(error) {\n\n    let line = 'Error status: ' + error.status;\n    if (error.statusText) {\n      line = line + ', status text: ' + error.statusText;\n    }\n    return line;\n  }\n\n  // tslint:disable-next-line:member-ordering\n  public translatedMessages = {\n    playAudio: {\n      en: 'Play Audio',\n      zh: 'æ­æ¾å£°é³',\n      fr: 'Lecture audio',\n      pa: 'à¨à¨¡à©à¨ à¨à¨²à¨¾à¨',\n    },\n    tryAnotherImg: {\n      en: 'Try another image',\n      zh: 'æ¢ä¸ªå¾å',\n      fr: 'Essayez une autre image',\n      pa: 'à¨à©à¨ à¨¹à©à¨° à¨à¨¿à©±à¨¤à¨° à¨à¨à¨¼à¨®à¨¾à¨',\n    },\n    userPromptMessage: {\n      en: 'Enter the text you either see in the box or you hear in the audio',\n      zh: 'è¯·è¾å¥çå°æå¬å°çæå­',\n      fr: 'Entrez le texte que vous voyez dans la case ou que vous entendez dans le son',\n      pa: 'à¨à¨¹ à¨à©à¨à¨¸à¨ à¨¦à¨¾à¨à¨² à¨à¨°à© à¨à© à¨¤à©à¨¸à©à¨ à¨¬à¨à¨¸à© à¨µà¨¿à©±à¨ à¨¦à©à¨à¨¦à© à¨¹à© à¨à¨¾à¨ à¨¤à©à¨¸à©à¨ à¨à¨¡à©à¨ à¨µà¨¿à©±à¨ à¨¸à©à¨£à¨¦à© à¨¹à©',\n    },\n    incorrectAnswer: {\n      en: 'Incorrect answer, please try again.',\n      zh: 'ç­æ¡ä¸å¯¹ãè¯·éè¯ã',\n      fr: 'Mauvaise rÃ©ponse, veuillez rÃ©essayer.',\n      pa: 'à¨à¨²à¨¤ à¨à¨µà¨¾à¨¬, à¨à¨¿à¨°à¨ªà¨¾ à¨à¨°à¨à© à¨¦à©à¨¬à¨¾à¨°à¨¾ à¨à©à¨¸à¨¼à¨¿à¨¸à¨¼ à¨à¨°à©.',\n    },\n    successMessage: {\n      en: 'You can submit your application now.',\n      zh: 'ä½ ç°å¨å¯ä»¥æäº¤ç³è¯·äºã',\n      fr: 'Vous pouvez soumettre votre candidature maintenant.',\n      pa: 'à¨¤à©à¨¸à©à¨ à¨à¨ªà¨£à© à¨à¨°à¨à¨¼à© à¨¹à©à¨£à© à¨ªà©à¨¸à¨¼ à¨à¨° à¨¸à¨à¨¦à© à¨¹à©',\n    },\n    correct: {\n      en: 'Correct.',\n      zh: 'æ­£ç¡®ã',\n      fr: 'Correct.',\n      pa: 'à¨¸à¨¹à© à¨à¨°à©',\n    },\n    loadingImage: {\n      en: 'Loading CAPTCHA image',\n      zh: 'æ­£å¨ä¸è½½éªè¯ç ',\n      fr: 'Chargement de l\\'image CAPTCHA',\n      pa: 'à¨à©à¨ªà¨à¨à¨¾ à¨à¨¿à©±à¨¤à¨° à¨²à©à¨¡ à¨à¨° à¨°à¨¿à¨¹à¨¾ à¨¹à©',\n    },\n    browserNotSupportAudio: {\n      en: 'Your browser does not support the audio element.',\n      zh: 'ä½ çæµè§å¨ä¸æ¯ææ­é³',\n      fr: 'Votre navigateur ne supporte pas l\\'Ã©lÃ©ment audio.',\n      pa: 'à¨¤à©à¨¹à¨¾à¨¡à¨¾ à¨¬à©à¨°à¨¾à¨à¨à¨¼à¨° à¨à¨¡à©à¨ à¨à¨²à©à¨®à©à¨à¨ à¨¦à¨¾ à¨¸à¨®à¨°à¨¥à¨¨ à¨¨à¨¹à©à¨ à¨à¨°à¨¦à¨¾.',\n    },\n    verifyingAnswer: {\n      en: 'Verifying your answer...',\n      zh: 'æ­£å¨éªè¯ç­æ¡...',\n      fr: 'VÃ©rification de votre rÃ©ponse ...',\n      pa: 'à¨¤à©à¨¹à¨¾à¨¡à¨¾ à¨à¨µà¨¾à¨¬ à¨¤à¨¸à¨¦à©à¨ à¨à¨° à¨°à¨¿à¨¹à¨¾ à¨¹à© ...',\n    },\n    errorRetrievingImg: {\n      en: 'Error happened while retrieving CAPTCHA image. please {{click here}} to try again',\n      zh: 'éªè¯ç ä¸è½½éè¯¯ãè¯·{{ç¹å»è¿é}}éè¯',\n      fr: 'Une erreur s\\'est produite lors de la rÃ©cupÃ©ration de l\\'image CAPTCHA. s\\'il vous plaÃ®t {{cliquez ici}} pour rÃ©essayer',\n      pa: 'à¨à©à¨ªà¨à¨à¨¾ à¨à¨¿à©±à¨¤à¨° à¨¨à©à©° à¨ªà©à¨°à¨¾à¨ªà¨¤ à¨à¨°à¨¦à© à¨¸à¨®à©à¨ à¨¤à¨°à©à©±à¨à© à¨à¨¤à¨ªà©°à¨¨ à¨¹à©à¨. à¨à¨¿à¨°à¨ªà¨¾ à¨à¨°à¨à© à¨¦à©à¨¬à¨¾à¨°à¨¾ à¨à©à¨¸à¨¼à¨¿à¨¸à¨¼ à¨à¨°à¨¨ à¨²à¨ {{à¨à©±à¨¥à© à¨à¨²à¨¿à¨ à¨à¨°à©}}',\n    },\n    errorVerifyingAnswer: {\n      en: 'Error happened while verifying your answer. please {{click here}} to try again',\n      zh: 'éªè¯ç­æ¡è¿ç¨åçéè¯¯ãè¯·{{ç¹å»è¿é}}éè¯',\n      fr: 'Une erreur s\\'est produite lors de la vÃ©rification de votre rÃ©ponse. s\\'il vous plaÃ®t {{cliquez ici}} pour rÃ©essayer',\n      pa: 'à¨¤à©à¨¹à¨¾à¨¡à¨¾ à¨à¨µà¨¾à¨¬ à¨¤à¨¸à¨¦à©à¨ à¨à¨°à¨¨ à¨µà©à¨²à© à¨à¨²à¨¤à© à¨à¨ à¨à¨¿à¨°à¨ªà¨¾ à¨à¨°à¨à© à¨¦à©à¨¬à¨¾à¨°à¨¾ à¨à©à¨¸à¨¼à¨¿à¨¸à¨¼ à¨à¨°à¨¨ à¨²à¨ {{à¨à©±à¨¥à© à¨à¨²à¨¿à¨ à¨à¨°à©}}',\n    },\n  };\n}\n\n/**\n * 7 mutually exclusive states, the program can only be in one of these state\n * at any given point..\n */\nenum CAPTCHA_STATE {\n  FETCHING_CAPTCHA_IMG = 1,\n  SUCCESS_FETCH_IMG = 2,\n  ERROR_FETCH_IMG = 3,\n  VERIFYING_ANSWER = 4,\n  SUCCESS_VERIFY_ANSWER_CORRECT = 5,\n  // http error during verification call.\n  ERROR_VERIFY = 6,\n  // SUCCESS_VERIFY_ANSWER_INCORRECT = 6,\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { CaptchaComponent } from './captcha.component';\nimport { CaptchaDataService } from './captcha-data.service';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    CaptchaComponent\n  ],\n  imports: [\n    HttpClientModule,\n    CommonModule,\n    FormsModule\n  ],\n  providers: [\n    CaptchaDataService\n  ],\n  exports: [\n    CaptchaComponent\n  ],\n})\nexport class CaptchaModule { \n  static forRoot(): ModuleWithProviders<CaptchaModule> {\n    return {\n      ngModule: CaptchaModule,\n      providers: [CaptchaDataService]\n    }\n  }\n}\n"]}