import '@angular/forms';
import { UUID } from 'angular2-uuid';
import * as moment_ from 'moment';
import { ViewChild, EventEmitter, Input, Output } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Base functionality for container that is used to display bread crumbs
 */
class Container {
    /**
     * Converts a lower case string of a route in a user readable title.  e.g.
     * "personal-info" -> "Personal Info"
     * @param {?} routePath
     * @return {?}
     */
    convertRouteToTitle(routePath) {
        return routePath.split('-').map((/**
         * @param {?} x
         * @return {?}
         */
        x => x[0].toUpperCase() + x.slice(1))).join(' ');
    }
    /**
     * @protected
     * @param {?} pageRoutes
     * @return {?}
     */
    setProgressSteps(pageRoutes) {
        // Interface for wizard progress items
        this.progressSteps = pageRoutes.map((/**
         * @param {?} page
         * @return {?}
         */
        page => {
            if (page.path !== '') {
                return {
                    title: this.convertRouteToTitle(page.path),
                    route: page.path
                };
            }
        })).filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * @abstract
 */
class AbstractForm {
    /**
     * Constructor
     * @param {?} router
     */
    constructor(router) {
        this.router = router;
        /**
         * Show or hide the loading spinner as required, should be passed to form action bar.
         */
        this.loading = false;
        this.router = router;
    }
    /**
     * Determines if the Continue button is disabled on the form action bar
     * @return {?}
     */
    canContinue() {
        // Returns true if form is valid
        return this.form.valid;
    }
    /**
     * Navigates to a route then automatically scrolls to the top of the page.
     * @protected
     * @param {?} url
     * @return {?}
     */
    navigate(url) {
        this.router.navigate([url])
            .then((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }));
    }
    /**
     * Runs the angular 'markAsTouched()' on all form inputs.
     * @protected
     * @return {?}
     */
    markAllInputsTouched() {
        Object.keys(this.form.form.controls).forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            this.form.form.get(x).markAsTouched();
        }));
    }
}
AbstractForm.propDecorators = {
    form: [{ type: ViewChild, args: ['formRef',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Address class, each project can extend this address class
 */
class Address {
    /**
     * Overwrite the native JavaScript toString method to determine how the
     * object should be printed, instead of [object Object].  This provides a
     * standard way to print out an address. If you need something specific you
     * should access the properties directly. We omit Province/Country because of
     * PharmaCare's BC focus.
     * @return {?}
     */
    toString() {
        return `${this.street}, ${this.city}`;
    }
    /**
     * Address must have all fields filled out to be considered
     * complete
     * @return {?}
     */
    isComplete() {
        // All fields have data - not empty
        return !!(this.street && this.city && this.country &&
            this.province && this.postal);
    }
    /* Copy function */
    /**
     * @param {?} object
     * @return {?}
     */
    copy(object) {
        this.street = object.street;
        this.city = object.city;
        this.country = object.country;
        this.postal = object.postal;
        this.province = object.province;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Base class.  Components extend this class to have object IDs.
 * NPM package dependencies:
 *  a) moment
 */
class Base {
    constructor() {
        /**
         * An identifier for parents to keep track of components
         */
        this.objectId = UUID.UUID().toString();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const moment = moment_;
/**
 * Person, each project can extend this person class
 * NPM package dependencies:
 *  a) moment
 */
class Person extends Base {
    constructor() {
        super(...arguments);
        /**
         * Format to display birthdate
         */
        this.dobFormat = 'YYYY/MM/DD';
        // Initialize dob to nulls
        this.dateOfBirth = { year: null, month: null, day: null };
    }
    /**
     * Returns DoB in YYYYMMDD format, used by API.
     * @return {?}
     */
    get dateOfBirthShort() {
        return this.isDobEmpty() ? null :
            moment({
                year: this.dateOfBirth.year,
                month: this.dateOfBirth.month - 1,
                day: this.dateOfBirth.day
            }).format('YYYYMMDD');
    }
    /**
     * Returns DoB in dobFormat (default: YYYY/MM/DD), for display purposes
     * @return {?}
     */
    get formatDateOfBirth() {
        return this.isDobEmpty() ? null :
            moment({
                year: this.dateOfBirth.year,
                month: this.dateOfBirth.month - 1,
                day: this.dateOfBirth.day
            }).format(this.dobFormat);
    }
    /**
     * Indicates whether or not the date of birth is empty
     * @return {?}
     */
    isDobEmpty() {
        return Object.keys(this.dateOfBirth)
            .map((/**
         * @param {?} key
         * @return {?}
         */
        key => this.dateOfBirth[key]))
            .filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x)) // Filter out null/undefined
            .length !== 3;
    }
    /**
     * Concatenates the first and last name together
     * @return {?}
     */
    get name() {
        /** @type {?} */
        let _name = null;
        if (this.firstName) {
            _name = this.firstName;
        }
        if (this.lastName) {
            _name = _name ? _name.concat(' ' + this.lastName) : this.lastName;
        }
        return _name;
    }
    /**
     * Sets the full name for the person (first, middle and last names)
     * NOTE: Just for development with dummy data and unit tests
     * @param {?} fullName
     * @return {?}
     */
    set name(fullName) {
        /** @type {?} */
        const names = fullName.split(' ');
        this.firstName = names[0];
        if (names.length === 2) {
            this.lastName = names[1];
        }
        else if (names.length === 3) {
            this.middleName = names[1];
            this.lastName = names[2];
        }
    }
    /**
     * Calculates the age from date of birth
     * @return {?}
     */
    getAge() {
        /** @type {?} */
        const dobDt = new Date(this.dateOfBirth.year, this.dateOfBirth.month, this.dateOfBirth.day);
        return Math.ceil(moment().diff(dobDt, 'year', true));
    }
    /* Copy function */
    /**
     * @param {?} object
     * @return {?}
     */
    copy(object) {
        this.firstName = object.firstName;
        this.middleName = object.middleName;
        this.lastName = object.lastName;
        this.dateOfBirth.month = object.dateOfBirth.month;
        this.dateOfBirth.day = object.dateOfBirth.day;
        this.dateOfBirth.year = object.dateOfBirth.year;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LETTER = /[A-Z]/i;
// Ignore case here, then upperCase it via pipe.
/** @type {?} */
const NUMBER = /\d/;
/** @type {?} */
const SPACE = ' ';
class MaskModel extends Base {
    constructor() {
        super();
        this.valueChange = new EventEmitter();
        this.disabled = false;
        this.required = true;
    }
    /**
     * Upper cases letters in string
     * @param {?} text
     * @return {?}
     */
    upperCasePipe(text) {
        return text.toUpperCase();
    }
    /**
     * Updates the value
     * @param {?} value
     * @return {?}
     */
    onUpdate(value) {
        // Emit value without spaces
        this.valueChange.emit(value);
    }
}
MaskModel.propDecorators = {
    value: [{ type: Input }],
    valueChange: [{ type: Output }],
    disabled: [{ type: Input }],
    required: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AbstractForm, Address, Base, Person, MaskModel, LETTER, NUMBER, SPACE, Container };

//# sourceMappingURL=moh-common-lib-models.js.map