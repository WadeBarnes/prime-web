{"version":3,"file":"moh-common-lib-models.js.map","sources":["ng://moh-common-lib/models/container.ts","ng://moh-common-lib/models/abstract-form.ts","ng://moh-common-lib/models/address.model.ts","ng://moh-common-lib/models/base.ts","ng://moh-common-lib/models/person.model.ts","ng://moh-common-lib/models/mask.model.ts"],"sourcesContent":["import { Route } from '@angular/router';\n\nexport interface WizardProgressItem {\n  title: string;\n  route: string;\n}\n\n/** Base functionality for container that is used to display bread crumbs */\nexport class Container {\n\n  /** Route items for the stepper */\n  progressSteps: WizardProgressItem[];\n\n  /**\n   * Converts a lower case string of a route in a user readable title.  e.g.\n   * \"personal-info\" -> \"Personal Info\"\n   */\n  convertRouteToTitle(routePath: string): string {\n    return routePath.split('-').map(x => x[0].toUpperCase() + x.slice(1)).join(' ');\n  }\n\n  protected setProgressSteps( pageRoutes: Route[] ): void {\n        // Interface for wizard progress items\n        this.progressSteps = pageRoutes.map(page => {\n          if (page.path !== '') {\n            return {\n              title: this.convertRouteToTitle(page.path),\n              route: page.path\n            };\n          }\n        }).filter(x => x);\n  }\n}\n","import { ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n/**\n *\n */\nexport abstract class AbstractForm {\n  /** Access to the form elements for validation */\n  @ViewChild('formRef') form: NgForm;\n\n  /** Disables all inputs (todo: not implemented) */\n  disabled: boolean;\n  /** Show or hide the loading spinner as required, should be passed to form action bar. */\n  loading: boolean = false;\n  /** What happens when the user clicks the continue button. Generally navigating to another page. */\n  abstract continue(): void;\n\n\n  /**\n   * Constructor\n   */\n  constructor(protected router: Router) {\n    this.router = router;\n  }\n\n  /**\n   * Determines if the Continue button is disabled on the form action bar\n   */\n  canContinue(): boolean {\n    // Returns true if form is valid\n    return this.form.valid;\n  }\n\n  /** Navigates to a route then automatically scrolls to the top of the page. */\n  protected navigate(url: string) {\n    this.router.navigate([url])\n      .then((data) => {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n      });\n  }\n\n  /** Runs the angular 'markAsTouched()' on all form inputs. */\n  protected markAllInputsTouched(): void {\n    Object.keys(this.form.form.controls).forEach(x => {\n      this.form.form.get(x).markAsTouched();\n    });\n  }\n\n}\n","/**\n * Address class, each project can extend this address class\n */\n\nexport class Address {\n\n  /* Variables for class */\n  public street: string;\n  public postal: string;\n  public country: string;\n  public province: string;\n  public city: string;\n\n  /** Overwrite the native JavaScript toString method to determine how the\n   * object should be printed, instead of [object Object].  This provides a\n   * standard way to print out an address. If you need something specific you\n   * should access the properties directly. We omit Province/Country because of\n   * PharmaCare's BC focus. */\n  toString() {\n    return `${this.street}, ${this.city}`;\n  }\n\n  /**\n   * Address must have all fields filled out to be considered\n   * complete\n   */\n  isComplete(): boolean {\n    // All fields have data - not empty\n    return !!(this.street && this.city && this.country &&\n             this.province && this.postal);\n  }\n\n  /* Copy function */\n  copy(object: Address) {\n    this.street = object.street;\n    this.city = object.city;\n    this.country = object.country;\n    this.postal = object.postal;\n    this.province = object.province;\n  }\n}\n\n\n\n\n","import { UUID } from 'angular2-uuid';\n\n/**\n * Base class.  Components extend this class to have object IDs.\n * NPM package dependencies:\n *  a) moment\n */\nexport class Base {\n\n  /** An identifier for parents to keep track of components */\n  public objectId: string = UUID.UUID().toString();\n\n  constructor() {}\n}\n","import * as moment_ from 'moment';\nimport { Base } from './base';\nimport { SimpleDate } from './simple-date.interface';\nconst moment = moment_;\n\n/**\n * Person, each project can extend this person class\n * NPM package dependencies:\n *  a) moment\n */\nexport class Person extends Base {\n\n  // Parts of a person's name\n  public firstName: string;\n  public middleName: string;\n  public lastName: string;\n\n  /** Format to display birthdate */\n  public dobFormat = 'YYYY/MM/DD';\n\n  // Initialize dob to nulls\n  public dateOfBirth: SimpleDate = { year: null, month: null, day: null };\n\n  /** Returns DoB in YYYYMMDD format, used by API. */\n  get dateOfBirthShort(): string {\n    return this.isDobEmpty() ? null :\n        moment( {\n          year: this.dateOfBirth.year,\n          month: this.dateOfBirth.month - 1,\n          day: this.dateOfBirth.day\n        }).format( 'YYYYMMDD' );\n  }\n\n  /** Returns DoB in dobFormat (default: YYYY/MM/DD), for display purposes */\n  get formatDateOfBirth(): string {\n    return this.isDobEmpty() ? null :\n        moment( {\n          year: this.dateOfBirth.year,\n          month: this.dateOfBirth.month - 1,\n          day: this.dateOfBirth.day\n        }).format( this.dobFormat );\n  }\n\n  /** Indicates whether or not the date of birth is empty */\n  isDobEmpty(): boolean {\n    return Object.keys( this.dateOfBirth )\n        .map( key => this.dateOfBirth[key] )\n        .filter( x => x ) // Filter out null/undefined\n        .length !== 3;\n  }\n\n  /** Concatenates the first and last name together */\n  get name(): string {\n    let _name = null;\n\n    if ( this.firstName ) {\n      _name = this.firstName;\n    }\n\n    if ( this.lastName ) {\n      _name = _name ? _name.concat( ' ' + this.lastName ) : this.lastName;\n    }\n\n    return _name;\n  }\n\n  /**\n   * Sets the full name for the person (first, middle and last names)\n   * NOTE: Just for development with dummy data and unit tests\n   */\n  set name( fullName: string ) {\n\n    const names = fullName.split( ' ') ;\n    this.firstName = names[0];\n\n    if ( names.length === 2 ) {\n      this.lastName = names[1];\n    } else if ( names.length === 3 ) {\n      this.middleName = names[1];\n      this.lastName = names[2];\n    }\n  }\n\n  /** Calculates the age from date of birth */\n  getAge(): Number {\n    const dobDt = new Date( this.dateOfBirth.year, this.dateOfBirth.month, this.dateOfBirth.day );\n    return Math.ceil( moment( ).diff( dobDt, 'year', true ) );\n  }\n\n  /* Copy function */\n  copy( object: Person ) {\n    this.firstName = object.firstName;\n    this.middleName = object.middleName;\n    this.lastName = object.lastName;\n    this.dateOfBirth.month = object.dateOfBirth.month;\n    this.dateOfBirth.day = object.dateOfBirth.day;\n    this.dateOfBirth.year = object.dateOfBirth.year;\n  }\n}\n","// List of constants used for masking inputs\nimport {EventEmitter, Input, Output} from '@angular/core';\nimport { Base } from './base';\n\nexport const LETTER = /[A-Z]/i; // Ignore case here, then upperCase it via pipe.\nexport const NUMBER = /\\d/;\nexport const SPACE = ' ';\n\nexport class MaskModel extends Base {\n\n  @Input() value: string;\n  @Output() valueChange: EventEmitter<string> = new EventEmitter<string>();\n\n  @Input() disabled: boolean = false;\n  @Input() required: boolean = true;\n\n  public mask: any;\n  public placeholder: string;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Upper cases letters in string\n   */\n  upperCasePipe(text: string) {\n    return text.toUpperCase();\n  }\n\n  /**\n   * Updates the value\n   */\n  onUpdate( value: string ) {\n\n    // Emit value without spaces\n    this.valueChange.emit( value );\n  }\n}\n"],"names":[],"mappings":"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"}
