/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { catchError, tap } from 'rxjs/operators';
/**
 * Abstract class for HTTP Service
 * @abstract
 */
var /**
 * Abstract class for HTTP Service
 * @abstract
 */
AbstractHttpService = /** @class */ (function () {
    function AbstractHttpService(http) {
        this.http = http;
        this.logHTTPRequestsToConsole = false;
    }
    /**
     * Makes a GET request to the specified URL, using headers and HTTP options specified in their respective methods.
     * @param url Target URL to make the GET request
     */
    /**
     * Makes a GET request to the specified URL, using headers and HTTP options specified in their respective methods.
     * @protected
     * @template T
     * @param {?} url Target URL to make the GET request
     * @param {?=} queryParams
     * @return {?}
     */
    AbstractHttpService.prototype.get = /**
     * Makes a GET request to the specified URL, using headers and HTTP options specified in their respective methods.
     * @protected
     * @template T
     * @param {?} url Target URL to make the GET request
     * @param {?=} queryParams
     * @return {?}
     */
    function (url, queryParams) {
        /**
         * The HTTP request observer with always on error handling
         * @type {?}
         */
        var httpOpts = this.httpOptions;
        httpOpts.params = queryParams ? queryParams : undefined;
        /** @type {?} */
        var observable = this.http.get(url, httpOpts);
        return this.setupRequest(observable);
    };
    /**
     * @protected
     * @template T
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    AbstractHttpService.prototype.post = /**
     * @protected
     * @template T
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    function (url, body) {
        if (this.logHTTPRequestsToConsole) {
            console.log('Post Request: ', body);
        }
        /** @type {?} */
        var observable = this.http.post(url, body, this.httpOptions);
        return this.setupRequest(observable);
    };
    /**
     * @protected
     * @template T
     * @param {?} observable
     * @return {?}
     */
    AbstractHttpService.prototype.setupRequest = /**
     * @protected
     * @template T
     * @param {?} observable
     * @return {?}
     */
    function (observable) {
        // All failed requests should trigger the abstract method handleError
        observable = observable.pipe(catchError(this.handleError.bind(this)));
        // Optionally add console logging
        if (this.logHTTPRequestsToConsole) {
            observable = observable.pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return console.log('HTTP Success: ', data); }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return console.log('HTTP Error: ', error); })));
        }
        return observable;
    };
    Object.defineProperty(AbstractHttpService.prototype, "httpOptions", {
        /** The HttpOptions object that Angular takes for GET and POST requests. Used in every HTTP request from this service. */
        get: /**
         * The HttpOptions object that Angular takes for GET and POST requests. Used in every HTTP request from this service.
         * @protected
         * @return {?}
         */
        function () {
            return {
                headers: this._headers
            };
        },
        enumerable: true,
        configurable: true
    });
    return AbstractHttpService;
}());
/**
 * Abstract class for HTTP Service
 * @abstract
 */
export { AbstractHttpService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AbstractHttpService.prototype.logHTTPRequestsToConsole;
    /**
     * The headers to send along with every GET and POST.
     * @type {?}
     * @protected
     */
    AbstractHttpService.prototype._headers;
    /**
     * @type {?}
     * @protected
     */
    AbstractHttpService.prototype.http;
    /**
     * Handles all failed requests that throw either a server error (400/500) or a client error (e.g. lost internet).
     * @abstract
     * @protected
     * @param {?} error
     * @return {?}
     */
    AbstractHttpService.prototype.handleError = function (error) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtYXBpLXNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tb2gtY29tbW9uLWxpYi9zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImFic3RyYWN0LWFwaS1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OztBQU1qRDs7Ozs7SUFJRSw2QkFBc0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUY1Qiw2QkFBd0IsR0FBWSxLQUFLLENBQUM7SUFFWCxDQUFDO0lBSzFDOzs7T0FHRzs7Ozs7Ozs7O0lBQ08saUNBQUc7Ozs7Ozs7O0lBQWIsVUFBaUIsR0FBRyxFQUFFLFdBQXdCOzs7OztZQUV0QyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVc7UUFDakMsUUFBUSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDOztZQUNsRCxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQztRQUMvQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkMsQ0FBQzs7Ozs7Ozs7SUFFUyxrQ0FBSTs7Ozs7OztJQUFkLFVBQWtCLEdBQUcsRUFBRSxJQUFJO1FBQ3pCLElBQUksSUFBSSxDQUFDLHdCQUF3QixFQUFFO1lBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUUsZ0JBQWdCLEVBQUUsSUFBSSxDQUFFLENBQUM7U0FDdkM7O1lBQ0ssVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM5RCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkMsQ0FBQzs7Ozs7OztJQUVTLDBDQUFZOzs7Ozs7SUFBdEIsVUFBMEIsVUFBMkI7UUFDbkQscUVBQXFFO1FBQ3JFLFVBQVUsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEUsaUNBQWlDO1FBQ2pDLElBQUksSUFBSSxDQUFDLHdCQUF3QixFQUFFO1lBQ2pDLFVBQVUsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUc7Ozs7WUFDOUIsVUFBQSxJQUFJLElBQUksT0FBQSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxFQUFuQyxDQUFtQzs7OztZQUMzQyxVQUFBLEtBQUssSUFBSSxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxFQUFsQyxDQUFrQyxFQUM1QyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFHRCxzQkFBYyw0Q0FBVztRQUR6Qix5SEFBeUg7Ozs7OztRQUN6SDtZQUNFLE9BQU87Z0JBQ0wsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRO2FBQ3ZCLENBQUM7UUFDSixDQUFDOzs7T0FBQTtJQUlILDBCQUFDO0FBQUQsQ0FBQyxBQW5ERCxJQW1EQzs7Ozs7Ozs7Ozs7SUFqREMsdURBQW9EOzs7Ozs7SUFLcEQsdUNBQXlDOzs7OztJQUg3QixtQ0FBMEI7Ozs7Ozs7O0lBOEN0QyxpRUFBeUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwRXJyb3JSZXNwb25zZSwgSHR0cEhlYWRlcnMsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cblxuLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyBmb3IgSFRUUCBTZXJ2aWNlXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdEh0dHBTZXJ2aWNlIHtcblxuICBwcm90ZWN0ZWQgbG9nSFRUUFJlcXVlc3RzVG9Db25zb2xlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGh0dHA6IEh0dHBDbGllbnQpIHt9XG5cbiAgLyoqIFRoZSBoZWFkZXJzIHRvIHNlbmQgYWxvbmcgd2l0aCBldmVyeSBHRVQgYW5kIFBPU1QuICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBfaGVhZGVyczogSHR0cEhlYWRlcnM7XG5cbiAgLyoqXG4gICAqIE1ha2VzIGEgR0VUIHJlcXVlc3QgdG8gdGhlIHNwZWNpZmllZCBVUkwsIHVzaW5nIGhlYWRlcnMgYW5kIEhUVFAgb3B0aW9ucyBzcGVjaWZpZWQgaW4gdGhlaXIgcmVzcGVjdGl2ZSBtZXRob2RzLlxuICAgKiBAcGFyYW0gdXJsIFRhcmdldCBVUkwgdG8gbWFrZSB0aGUgR0VUIHJlcXVlc3RcbiAgICovXG4gIHByb3RlY3RlZCBnZXQ8VD4odXJsLCBxdWVyeVBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICAvKiogVGhlIEhUVFAgcmVxdWVzdCBvYnNlcnZlciB3aXRoIGFsd2F5cyBvbiBlcnJvciBoYW5kbGluZyAqL1xuICAgIGNvbnN0IGh0dHBPcHRzID0gdGhpcy5odHRwT3B0aW9ucztcbiAgICBodHRwT3B0cy5wYXJhbXMgPSBxdWVyeVBhcmFtcyA/IHF1ZXJ5UGFyYW1zIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IG9ic2VydmFibGUgPSB0aGlzLmh0dHAuZ2V0KHVybCwgaHR0cE9wdHMpO1xuICAgIHJldHVybiB0aGlzLnNldHVwUmVxdWVzdChvYnNlcnZhYmxlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBwb3N0PFQ+KHVybCwgYm9keSk6IE9ic2VydmFibGU8VD4ge1xuICAgIGlmICh0aGlzLmxvZ0hUVFBSZXF1ZXN0c1RvQ29uc29sZSkge1xuICAgICAgY29uc29sZS5sb2coICdQb3N0IFJlcXVlc3Q6ICcsIGJvZHkgKTtcbiAgICB9XG4gICAgY29uc3Qgb2JzZXJ2YWJsZSA9IHRoaXMuaHR0cC5wb3N0KHVybCwgYm9keSwgdGhpcy5odHRwT3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMuc2V0dXBSZXF1ZXN0KG9ic2VydmFibGUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldHVwUmVxdWVzdDxUPihvYnNlcnZhYmxlOiBPYnNlcnZhYmxlPGFueT4gKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgLy8gQWxsIGZhaWxlZCByZXF1ZXN0cyBzaG91bGQgdHJpZ2dlciB0aGUgYWJzdHJhY3QgbWV0aG9kIGhhbmRsZUVycm9yXG4gICAgb2JzZXJ2YWJsZSA9IG9ic2VydmFibGUucGlwZShjYXRjaEVycm9yKHRoaXMuaGFuZGxlRXJyb3IuYmluZCh0aGlzKSkpO1xuICAgIC8vIE9wdGlvbmFsbHkgYWRkIGNvbnNvbGUgbG9nZ2luZ1xuICAgIGlmICh0aGlzLmxvZ0hUVFBSZXF1ZXN0c1RvQ29uc29sZSkge1xuICAgICAgb2JzZXJ2YWJsZSA9IG9ic2VydmFibGUucGlwZSh0YXAoXG4gICAgICAgIGRhdGEgPT4gY29uc29sZS5sb2coJ0hUVFAgU3VjY2VzczogJywgZGF0YSksXG4gICAgICAgIGVycm9yID0+IGNvbnNvbGUubG9nKCdIVFRQIEVycm9yOiAnLCBlcnJvcilcbiAgICAgICkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgfVxuXG4gIC8qKiBUaGUgSHR0cE9wdGlvbnMgb2JqZWN0IHRoYXQgQW5ndWxhciB0YWtlcyBmb3IgR0VUIGFuZCBQT1NUIHJlcXVlc3RzLiBVc2VkIGluIGV2ZXJ5IEhUVFAgcmVxdWVzdCBmcm9tIHRoaXMgc2VydmljZS4gKi9cbiAgcHJvdGVjdGVkIGdldCBodHRwT3B0aW9ucygpOiB7aGVhZGVyczogSHR0cEhlYWRlcnMsIHBhcmFtcz86IEh0dHBQYXJhbXN9IHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xuICAgIH07XG4gIH1cblxuICAvKiogSGFuZGxlcyBhbGwgZmFpbGVkIHJlcXVlc3RzIHRoYXQgdGhyb3cgZWl0aGVyIGEgc2VydmVyIGVycm9yICg0MDAvNTAwKSBvciBhIGNsaWVudCBlcnJvciAoZS5nLiBsb3N0IGludGVybmV0KS4gKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGhhbmRsZUVycm9yKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSk7XG59XG4iXX0=