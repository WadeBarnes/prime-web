/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import * as moment_ from 'moment';
import { Base } from './base';
/** @type {?} */
var moment = moment_;
/**
 * Person, each project can extend this person class
 * NPM package dependencies:
 *  a) moment
 */
var /**
 * Person, each project can extend this person class
 * NPM package dependencies:
 *  a) moment
 */
Person = /** @class */ (function (_super) {
    tslib_1.__extends(Person, _super);
    function Person() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Format to display birthdate
         */
        _this.dobFormat = 'YYYY/MM/DD';
        // Initialize dob to nulls
        _this.dateOfBirth = { year: null, month: null, day: null };
        return _this;
    }
    Object.defineProperty(Person.prototype, "dateOfBirthShort", {
        /** Returns DoB in YYYYMMDD format, used by API. */
        get: /**
         * Returns DoB in YYYYMMDD format, used by API.
         * @return {?}
         */
        function () {
            return this.isDobEmpty() ? null :
                moment({
                    year: this.dateOfBirth.year,
                    month: this.dateOfBirth.month - 1,
                    day: this.dateOfBirth.day
                }).format('YYYYMMDD');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Person.prototype, "formatDateOfBirth", {
        /** Returns DoB in dobFormat (default: YYYY/MM/DD), for display purposes */
        get: /**
         * Returns DoB in dobFormat (default: YYYY/MM/DD), for display purposes
         * @return {?}
         */
        function () {
            return this.isDobEmpty() ? null :
                moment({
                    year: this.dateOfBirth.year,
                    month: this.dateOfBirth.month - 1,
                    day: this.dateOfBirth.day
                }).format(this.dobFormat);
        },
        enumerable: true,
        configurable: true
    });
    /** Indicates whether or not the date of birth is empty */
    /**
     * Indicates whether or not the date of birth is empty
     * @return {?}
     */
    Person.prototype.isDobEmpty = /**
     * Indicates whether or not the date of birth is empty
     * @return {?}
     */
    function () {
        var _this = this;
        return Object.keys(this.dateOfBirth)
            .map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return _this.dateOfBirth[key]; }))
            .filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x; })) // Filter out null/undefined
            .length !== 3;
    };
    Object.defineProperty(Person.prototype, "name", {
        /** Concatenates the first and last name together */
        get: /**
         * Concatenates the first and last name together
         * @return {?}
         */
        function () {
            /** @type {?} */
            var _name = null;
            if (this.firstName) {
                _name = this.firstName;
            }
            if (this.lastName) {
                _name = _name ? _name.concat(' ' + this.lastName) : this.lastName;
            }
            return _name;
        },
        /**
         * Sets the full name for the person (first, middle and last names)
         * NOTE: Just for development with dummy data and unit tests
         */
        set: /**
         * Sets the full name for the person (first, middle and last names)
         * NOTE: Just for development with dummy data and unit tests
         * @param {?} fullName
         * @return {?}
         */
        function (fullName) {
            /** @type {?} */
            var names = fullName.split(' ');
            this.firstName = names[0];
            if (names.length === 2) {
                this.lastName = names[1];
            }
            else if (names.length === 3) {
                this.middleName = names[1];
                this.lastName = names[2];
            }
        },
        enumerable: true,
        configurable: true
    });
    /** Calculates the age from date of birth */
    /**
     * Calculates the age from date of birth
     * @return {?}
     */
    Person.prototype.getAge = /**
     * Calculates the age from date of birth
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dobDt = new Date(this.dateOfBirth.year, this.dateOfBirth.month, this.dateOfBirth.day);
        return Math.ceil(moment().diff(dobDt, 'year', true));
    };
    /* Copy function */
    /* Copy function */
    /**
     * @param {?} object
     * @return {?}
     */
    Person.prototype.copy = /* Copy function */
    /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        this.firstName = object.firstName;
        this.middleName = object.middleName;
        this.lastName = object.lastName;
        this.dateOfBirth.month = object.dateOfBirth.month;
        this.dateOfBirth.day = object.dateOfBirth.day;
        this.dateOfBirth.year = object.dateOfBirth.year;
    };
    return Person;
}(Base));
/**
 * Person, each project can extend this person class
 * NPM package dependencies:
 *  a) moment
 */
export { Person };
if (false) {
    /** @type {?} */
    Person.prototype.firstName;
    /** @type {?} */
    Person.prototype.middleName;
    /** @type {?} */
    Person.prototype.lastName;
    /**
     * Format to display birthdate
     * @type {?}
     */
    Person.prototype.dobFormat;
    /** @type {?} */
    Person.prototype.dateOfBirth;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc29uLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbW9oLWNvbW1vbi1saWIvbW9kZWxzLyIsInNvdXJjZXMiOlsicGVyc29uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxLQUFLLE9BQU8sTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQzs7SUFFeEIsTUFBTSxHQUFHLE9BQU87Ozs7OztBQU90Qjs7Ozs7O0lBQTRCLGtDQUFJO0lBQWhDO1FBQUEscUVBd0ZDOzs7O1FBaEZRLGVBQVMsR0FBRyxZQUFZLENBQUM7O1FBR3pCLGlCQUFXLEdBQWUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDOztJQTZFMUUsQ0FBQztJQTFFQyxzQkFBSSxvQ0FBZ0I7UUFEcEIsbURBQW1EOzs7OztRQUNuRDtZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDN0IsTUFBTSxDQUFFO29CQUNOLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUk7b0JBQzNCLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxDQUFDO29CQUNqQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHO2lCQUMxQixDQUFDLENBQUMsTUFBTSxDQUFFLFVBQVUsQ0FBRSxDQUFDO1FBQzlCLENBQUM7OztPQUFBO0lBR0Qsc0JBQUkscUNBQWlCO1FBRHJCLDJFQUEyRTs7Ozs7UUFDM0U7WUFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzdCLE1BQU0sQ0FBRTtvQkFDTixJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJO29CQUMzQixLQUFLLEVB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QUFDLElBQUksQ0FBQztJQUNsRCxDQUFDO0lBQ0gsYUFBQztBQUFELENBQUMsQUF4RkQsQ0FBNEIsSUFBSSxHQXdGL0I7Ozs7Ozs7OztJQXJGQywyQkFBeUI7O0lBQ3pCLDRCQUEwQjs7SUFDMUIsMEJBQXdCOzs7OztJQUd4QiwyQkFBZ0M7O0lBR2hDLDZCQUF3RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG1vbWVudF8gZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IEJhc2UgfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgU2ltcGxlRGF0ZSB9IGZyb20gJy4vc2ltcGxlLWRhdGUuaW50ZXJmYWNlJztcbmNvbnN0IG1vbWVudCA9IG1vbWVudF87XG5cbi8qKlxuICogUGVyc29uLCBlYWNoIHByb2plY3QgY2FuIGV4dGVuZCB0aGlzIHBlcnNvbiBjbGFzc1xuICogTlBNIHBhY2thZ2UgZGVwZW5kZW5jaWVzOlxuICogIGEpIG1vbWVudFxuICovXG5leHBvcnQgY2xhc3MgUGVyc29uIGV4dGVuZHMgQmFzZSB7XG5cbiAgLy8gUGFydHMgb2YgYSBwZXJzb24ncyBuYW1lXG4gIHB1YmxpYyBmaXJzdE5hbWU6IHN0cmluZztcbiAgcHVibGljIG1pZGRsZU5hbWU6IHN0cmluZztcbiAgcHVibGljIGxhc3ROYW1lOiBzdHJpbmc7XG5cbiAgLyoqIEZvcm1hdCB0byBkaXNwbGF5IGJpcnRoZGF0ZSAqL1xuICBwdWJsaWMgZG9iRm9ybWF0ID0gJ1lZWVkvTU0vREQnO1xuXG4gIC8vIEluaXRpYWxpemUgZG9iIHRvIG51bGxzXG4gIHB1YmxpYyBkYXRlT2ZCaXJ0aDogU2ltcGxlRGF0ZSA9IHsgeWVhcjogbnVsbCwgbW9udGg6IG51bGwsIGRheTogbnVsbCB9O1xuXG4gIC8qKiBSZXR1cm5zIERvQiBpbiBZWVlZTU1ERCBmb3JtYXQsIHVzZWQgYnkgQVBJLiAqL1xuICBnZXQgZGF0ZU9mQmlydGhTaG9ydCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmlzRG9iRW1wdHkoKSA/IG51bGwgOlxuICAgICAgICBtb21lbnQoIHtcbiAgICAgICAgICB5ZWFyOiB0aGlzLmRhdGVPZkJpcnRoLnllYXIsXG4gICAgICAgICAgbW9udGg6IHRoaXMuZGF0ZU9mQmlydGgubW9udGggLSAxLFxuICAgICAgICAgIGRheTogdGhpcy5kYXRlT2ZCaXJ0aC5kYXlcbiAgICAgICAgfSkuZm9ybWF0KCAnWVlZWU1NREQnICk7XG4gIH1cblxuICAvKiogUmV0dXJucyBEb0IgaW4gZG9iRm9ybWF0IChkZWZhdWx0OiBZWVlZL01NL0REKSwgZm9yIGRpc3BsYXkgcHVycG9zZXMgKi9cbiAgZ2V0IGZvcm1hdERhdGVPZkJpcnRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaXNEb2JFbXB0eSgpID8gbnVsbCA6XG4gICAgICAgIG1vbWVudCgge1xuICAgICAgICAgIHllYXI6IHRoaXMuZGF0ZU9mQmlydGgueWVhcixcbiAgICAgICAgICBtb250aDogdGhpcy5kYXRlT2ZCaXJ0aC5tb250aCAtIDEsXG4gICAgICAgICAgZGF5OiB0aGlzLmRhdGVPZkJpcnRoLmRheVxuICAgICAgICB9KS5mb3JtYXQoIHRoaXMuZG9iRm9ybWF0ICk7XG4gIH1cblxuICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRoZSBkYXRlIG9mIGJpcnRoIGlzIGVtcHR5ICovXG4gIGlzRG9iRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKCB0aGlzLmRhdGVPZkJpcnRoIClcbiAgICAgICAgLm1hcCgga2V5ID0+IHRoaXMuZGF0ZU9mQmlydGhba2V5XSApXG4gICAgICAgIC5maWx0ZXIoIHggPT4geCApIC8vIEZpbHRlciBvdXQgbnVsbC91bmRlZmluZWRcbiAgICAgICAgLmxlbmd0aCAhPT0gMztcbiAgfVxuXG4gIC8qKiBDb25jYXRlbmF0ZXMgdGhlIGZpcnN0IGFuZCBsYXN0IG5hbWUgdG9nZXRoZXIgKi9cbiAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICBsZXQgX25hbWUgPSBudWxsO1xuXG4gICAgaWYgKCB0aGlzLmZpcnN0TmFtZSApIHtcbiAgICAgIF9uYW1lID0gdGhpcy5maXJzdE5hbWU7XG4gICAgfVxuXG4gICAgaWYgKCB0aGlzLmxhc3ROYW1lICkge1xuICAgICAgX25hbWUgPSBfbmFtZSA/IF9uYW1lLmNvbmNhdCggJyAnICsgdGhpcy5sYXN0TmFtZSApIDogdGhpcy5sYXN0TmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX25hbWU7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZnVsbCBuYW1lIGZvciB0aGUgcGVyc29uIChmaXJzdCwgbWlkZGxlIGFuZCBsYXN0IG5hbWVzKVxuICAgKiBOT1RFOiBKdXN0IGZvciBkZXZlbG9wbWVudCB3aXRoIGR1bW15IGRhdGEgYW5kIHVuaXQgdGVzdHNcbiAgICovXG4gIHNldCBuYW1lKCBmdWxsTmFtZTogc3RyaW5nICkge1xuXG4gICAgY29uc3QgbmFtZXMgPSBmdWxsTmFtZS5zcGxpdCggJyAnKSA7XG4gICAgdGhpcy5maXJzdE5hbWUgPSBuYW1lc1swXTtcblxuICAgIGlmICggbmFtZXMubGVuZ3RoID09PSAyICkge1xuICAgICAgdGhpcy5sYXN0TmFtZSA9IG5hbWVzWzFdO1xuICAgIH0gZWxzZSBpZiAoIG5hbWVzLmxlbmd0aCA9PT0gMyApIHtcbiAgICAgIHRoaXMubWlkZGxlTmFtZSA9IG5hbWVzWzFdO1xuICAgICAgdGhpcy5sYXN0TmFtZSA9IG5hbWVzWzJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBDYWxjdWxhdGVzIHRoZSBhZ2UgZnJvbSBkYXRlIG9mIGJpcnRoICovXG4gIGdldEFnZSgpOiBOdW1iZXIge1xuICAgIGNvbnN0IGRvYkR0ID0gbmV3IERhdGUoIHRoaXMuZGF0ZU9mQmlydGgueWVhciwgdGhpcy5kYXRlT2ZCaXJ0aC5tb250aCwgdGhpcy5kYXRlT2ZCaXJ0aC5kYXkgKTtcbiAgICByZXR1cm4gTWF0aC5jZWlsKCBtb21lbnQoICkuZGlmZiggZG9iRHQsICd5ZWFyJywgdHJ1ZSApICk7XG4gIH1cblxuICAvKiBDb3B5IGZ1bmN0aW9uICovXG4gIGNvcHkoIG9iamVjdDogUGVyc29uICkge1xuICAgIHRoaXMuZmlyc3ROYW1lID0gb2JqZWN0LmZpcnN0TmFtZTtcbiAgICB0aGlzLm1pZGRsZU5hbWUgPSBvYmplY3QubWlkZGxlTmFtZTtcbiAgICB0aGlzLmxhc3ROYW1lID0gb2JqZWN0Lmxhc3ROYW1lO1xuICAgIHRoaXMuZGF0ZU9mQmlydGgubW9udGggPSBvYmplY3QuZGF0ZU9mQmlydGgubW9udGg7XG4gICAgdGhpcy5kYXRlT2ZCaXJ0aC5kYXkgPSBvYmplY3QuZGF0ZU9mQmlydGguZGF5O1xuICAgIHRoaXMuZGF0ZU9mQmlydGgueWVhciA9IG9iamVjdC5kYXRlT2ZCaXJ0aC55ZWFyO1xuICB9XG59XG4iXX0=