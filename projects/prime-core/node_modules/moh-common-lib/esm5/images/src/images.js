/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { UUID } from 'angular2-uuid';
/** @enum {number} */
var CommonImageError = {
    WrongType: 0,
    TooSmall: 1,
    TooBig: 2,
    AlreadyExists: 3,
    Unknown: 4,
    CannotOpen: 5,
    PDFnotSupported: 6,
    CannotOpenPDF: 7,
};
export { CommonImageError };
CommonImageError[CommonImageError.WrongType] = 'WrongType';
CommonImageError[CommonImageError.TooSmall] = 'TooSmall';
CommonImageError[CommonImageError.TooBig] = 'TooBig';
CommonImageError[CommonImageError.AlreadyExists] = 'AlreadyExists';
CommonImageError[CommonImageError.Unknown] = 'Unknown';
CommonImageError[CommonImageError.CannotOpen] = 'CannotOpen';
CommonImageError[CommonImageError.PDFnotSupported] = 'PDFnotSupported';
CommonImageError[CommonImageError.CannotOpenPDF] = 'CannotOpenPDF';
var CommonImageProcessingError = /** @class */ (function () {
    // added errorDescription.PDF.JS gives proper error messages as invalid pdf structure or password protected pdf.Good for splunk tracking
    function CommonImageProcessingError(errorCode, errorDescription) {
        this.errorCode = errorCode;
        this.errorDescription = errorDescription;
    }
    return CommonImageProcessingError;
}());
export { CommonImageProcessingError };
if (false) {
    /** @type {?} */
    CommonImageProcessingError.prototype.commonImage;
    /** @type {?} */
    CommonImageProcessingError.prototype.rawImageFile;
    /** @type {?} */
    CommonImageProcessingError.prototype.maxSizeAllowed;
    /** @type {?} */
    CommonImageProcessingError.prototype.errorCode;
    /** @type {?} */
    CommonImageProcessingError.prototype.errorDescription;
}
/**
 * Image as uploaded by user
 */
var /**
 * Image as uploaded by user
 */
CommonImage = /** @class */ (function () {
    function CommonImage() {
        this.attachmentOrder = 0;
        this.uuid = UUID.UUID();
    }
    return CommonImage;
}());
/**
 * Image as uploaded by user
 */
export { CommonImage };
if (false) {
    /** @type {?} */
    CommonImage.prototype.uuid;
    /** @type {?} */
    CommonImage.prototype.fileContent;
    /** @type {?} */
    CommonImage.prototype.contentType;
    /** @type {?} */
    CommonImage.prototype.size;
    /** @type {?} */
    CommonImage.prototype.sizeUnit;
    /** @type {?} */
    CommonImage.prototype.sizeTxt;
    /** @type {?} */
    CommonImage.prototype.naturalHeight;
    /** @type {?} */
    CommonImage.prototype.naturalWidth;
    /** @type {?} */
    CommonImage.prototype.name;
    /** @type {?} */
    CommonImage.prototype.id;
    /** @type {?} */
    CommonImage.prototype.error;
    /** @type {?} */
    CommonImage.prototype.attachmentOrder;
}
/**
 * @record
 */
export function CommonImageScaleFactors() { }
if (false) {
    /** @type {?} */
    CommonImageScaleFactors.prototype.widthFactor;
    /** @type {?} */
    CommonImageScaleFactors.prototype.heightFactor;
    /**
     * @param {?} scale
     * @return {?}
     */
    CommonImageScaleFactors.prototype.scaleDown = function (scale) { };
}
var CommonImageScaleFactorsImpl = /** @class */ (function () {
    function CommonImageScaleFactorsImpl(wFactor, hFactor) {
        this.widthFactor = wFactor;
        this.heightFactor = hFactor;
    }
    /**
     * @param {?} scale
     * @return {?}
     */
    CommonImageScaleFactorsImpl.prototype.scaleDown = /**
     * @param {?} scale
     * @return {?}
     */
    function (scale) {
        return new CommonImageScaleFactorsImpl(this.widthFactor * scale, this.heightFactor * scale);
    };
    return CommonImageScaleFactorsImpl;
}());
export { CommonImageScaleFactorsImpl };
if (false) {
    /** @type {?} */
    CommonImageScaleFactorsImpl.prototype.widthFactor;
    /** @type {?} */
    CommonImageScaleFactorsImpl.prototype.heightFactor;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbW9oLWNvbW1vbi1saWIvIiwic291cmNlcyI6WyJpbWFnZXMvc3JjL2ltYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0lBSWpDLFlBQVM7SUFDVCxXQUFRO0lBQ1IsU0FBTTtJQUNOLGdCQUFhO0lBQ2IsVUFBTztJQUNQLGFBQVU7SUFDVixrQkFBZTtJQUNmLGdCQUFhOzs7Ozs7Ozs7OztBQUdqQjtJQUlJLHdJQUF3STtJQUN4SSxvQ0FBbUIsU0FBMkIsRUFBUyxnQkFBeUI7UUFBN0QsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFBUyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQVM7SUFFaEYsQ0FBQztJQUNMLGlDQUFDO0FBQUQsQ0FBQyxBQVJELElBUUM7Ozs7SUFQRyxpREFBMEI7O0lBQzFCLGtEQUFvQjs7SUFDcEIsb0RBQXdCOztJQUVaLCtDQUFrQzs7SUFBRSxzREFBZ0M7Ozs7O0FBT3BGOzs7O0lBSUk7UUFrQkEsb0JBQWUsR0FBVyxDQUFDLENBQUM7UUFqQnhCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFpQkwsa0JBQUM7QUFBRCxDQUFDLEFBdkJELElBdUJDOzs7Ozs7O0lBckJHLDJCQUFhOztJQU1iLGtDQUFvQjs7SUFDcEIsa0NBQW9COztJQUVwQiwyQkFBYTs7SUFDYiwrQkFBaUI7O0lBQ2pCLDhCQUFnQjs7SUFDaEIsb0NBQXNCOztJQUN0QixtQ0FBcUI7O0lBQ3JCLDJCQUFhOztJQUdiLHlCQUFXOztJQUVYLDRCQUF5Qjs7SUFDekIsc0NBQTRCOzs7OztBQUdoQyw2Q0FLQzs7O0lBSkcsOENBQW9COztJQUNwQiwrQ0FBcUI7Ozs7O0lBRXJCLG1FQUFrRDs7QUFHdEQ7SUFJSSxxQ0FBWSxPQUFlLEVBQUUsT0FBZTtRQUN4QyxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztJQUNoQyxDQUFDOzs7OztJQUVELCtDQUFTOzs7O0lBQVQsVUFBVSxLQUFhO1FBQ25CLE9BQU8sSUFBSSwyQkFBMkIsQ0FDbEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLEVBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNMLGtDQUFDO0FBQUQsQ0FBQyxBQWRELElBY0M7Ozs7SUFiRyxrREFBb0I7O0lBQ3BCLG1EQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVVSUQgfSBmcm9tICdhbmd1bGFyMi11dWlkJztcblxuLy8gTk9URTogSWYgeW91IGNoYW5nZSBhbnl0aGluZyBpbiB0aGlzIGVudW0sIGNoZWNrIGltYWdlLWVycm9yLW1vZGFsLmNvbXBvbmVudC5odG1sIGZvciB0ZXN0cyBhbmQgZmlsZS11cGxvYWRlci5jb21wb25lbnQudHM6XG5leHBvcnQgZW51bSBDb21tb25JbWFnZUVycm9yIHtcbiAgICBXcm9uZ1R5cGUsXG4gICAgVG9vU21hbGwsXG4gICAgVG9vQmlnLFxuICAgIEFscmVhZHlFeGlzdHMsXG4gICAgVW5rbm93bixcbiAgICBDYW5ub3RPcGVuLFxuICAgIFBERm5vdFN1cHBvcnRlZCxcbiAgICBDYW5ub3RPcGVuUERGLFxufVxuXG5leHBvcnQgY2xhc3MgQ29tbW9uSW1hZ2VQcm9jZXNzaW5nRXJyb3Ige1xuICAgIGNvbW1vbkltYWdlPzogQ29tbW9uSW1hZ2U7XG4gICAgcmF3SW1hZ2VGaWxlPzogRmlsZTtcbiAgICBtYXhTaXplQWxsb3dlZD86IG51bWJlcjtcbiAgICAvLyBhZGRlZCBlcnJvckRlc2NyaXB0aW9uLlBERi5KUyBnaXZlcyBwcm9wZXIgZXJyb3IgbWVzc2FnZXMgYXMgaW52YWxpZCBwZGYgc3RydWN0dXJlIG9yIHBhc3N3b3JkIHByb3RlY3RlZCBwZGYuR29vZCBmb3Igc3BsdW5rIHRyYWNraW5nXG4gICAgY29uc3RydWN0b3IocHVibGljIGVycm9yQ29kZTogQ29tbW9uSW1hZ2VFcnJvciwgcHVibGljIGVycm9yRGVzY3JpcHRpb24/OiBzdHJpbmcpIHtcblxuICAgIH1cbn1cbi8qKlxuICogSW1hZ2UgYXMgdXBsb2FkZWQgYnkgdXNlclxuICovXG5leHBvcnQgY2xhc3MgQ29tbW9uSW1hZ2Uge1xuXG4gICAgdXVpZDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudXVpZCA9IFVVSUQuVVVJRCgpO1xuICAgIH1cblxuICAgIGZpbGVDb250ZW50OiBzdHJpbmc7XG4gICAgY29udGVudFR5cGU6IHN0cmluZztcbiAgICAvLyBudW1iZXIgb2YgYnl0ZXMuXG4gICAgc2l6ZTogbnVtYmVyO1xuICAgIHNpemVVbml0OiBzdHJpbmc7XG4gICAgc2l6ZVR4dDogc3RyaW5nO1xuICAgIG5hdHVyYWxIZWlnaHQ6IG51bWJlcjtcbiAgICBuYXR1cmFsV2lkdGg6IG51bWJlcjtcbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICAvLyBmaWxlIHVuaXFuZXNzIGNoZWNrc3VtXG4gICAgaWQ6IHN0cmluZztcblxuICAgIGVycm9yPzogQ29tbW9uSW1hZ2VFcnJvcjtcbiAgICBhdHRhY2htZW50T3JkZXI6IG51bWJlciA9IDA7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbW9uSW1hZ2VTY2FsZUZhY3RvcnMge1xuICAgIHdpZHRoRmFjdG9yOiBudW1iZXI7XG4gICAgaGVpZ2h0RmFjdG9yOiBudW1iZXI7XG5cbiAgICBzY2FsZURvd24oc2NhbGU6IG51bWJlcik6IENvbW1vbkltYWdlU2NhbGVGYWN0b3JzO1xufVxuXG5leHBvcnQgY2xhc3MgQ29tbW9uSW1hZ2VTY2FsZUZhY3RvcnNJbXBsIGltcGxlbWVudHMgQ29tbW9uSW1hZ2VTY2FsZUZhY3RvcnMge1xuICAgIHdpZHRoRmFjdG9yOiBudW1iZXI7XG4gICAgaGVpZ2h0RmFjdG9yOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcih3RmFjdG9yOiBudW1iZXIsIGhGYWN0b3I6IG51bWJlcikge1xuICAgICAgICB0aGlzLndpZHRoRmFjdG9yID0gd0ZhY3RvcjtcbiAgICAgICAgdGhpcy5oZWlnaHRGYWN0b3IgPSBoRmFjdG9yO1xuICAgIH1cblxuICAgIHNjYWxlRG93bihzY2FsZTogbnVtYmVyKTogQ29tbW9uSW1hZ2VTY2FsZUZhY3RvcnMge1xuICAgICAgICByZXR1cm4gbmV3IENvbW1vbkltYWdlU2NhbGVGYWN0b3JzSW1wbChcbiAgICAgICAgICAgIHRoaXMud2lkdGhGYWN0b3IgKiBzY2FsZSxcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0RmFjdG9yICogc2NhbGUpO1xuICAgIH1cbn1cbiJdfQ==