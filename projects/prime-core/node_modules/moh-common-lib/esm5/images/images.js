/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { UUID } from 'angular2-uuid';
/** @enum {number} */
var CommonImageError = {
    WrongType: 0,
    TooSmall: 1,
    TooBig: 2,
    AlreadyExists: 3,
    Unknown: 4,
    CannotOpen: 5,
    PDFnotSupported: 6,
    CannotOpenPDF: 7,
};
export { CommonImageError };
CommonImageError[CommonImageError.WrongType] = 'WrongType';
CommonImageError[CommonImageError.TooSmall] = 'TooSmall';
CommonImageError[CommonImageError.TooBig] = 'TooBig';
CommonImageError[CommonImageError.AlreadyExists] = 'AlreadyExists';
CommonImageError[CommonImageError.Unknown] = 'Unknown';
CommonImageError[CommonImageError.CannotOpen] = 'CannotOpen';
CommonImageError[CommonImageError.PDFnotSupported] = 'PDFnotSupported';
CommonImageError[CommonImageError.CannotOpenPDF] = 'CannotOpenPDF';
var CommonImageProcessingError = /** @class */ (function () {
    // added errorDescription.PDF.JS gives proper error messages as invalid pdf structure or password protected pdf.Good for splunk tracking
    function CommonImageProcessingError(errorCode, errorDescription) {
        this.errorCode = errorCode;
        this.errorDescription = errorDescription;
    }
    return CommonImageProcessingError;
}());
export { CommonImageProcessingError };
if (false) {
    /** @type {?} */
    CommonImageProcessingError.prototype.commonImage;
    /** @type {?} */
    CommonImageProcessingError.prototype.rawImageFile;
    /** @type {?} */
    CommonImageProcessingError.prototype.maxSizeAllowed;
    /** @type {?} */
    CommonImageProcessingError.prototype.errorCode;
    /** @type {?} */
    CommonImageProcessingError.prototype.errorDescription;
}
/**
 * Image as uploaded by user
 */
var /**
 * Image as uploaded by user
 */
CommonImage = /** @class */ (function () {
    function CommonImage() {
        this.attachmentOrder = 0;
        this.uuid = UUID.UUID();
    }
    return CommonImage;
}());
/**
 * Image as uploaded by user
 */
export { CommonImage };
if (false) {
    /** @type {?} */
    CommonImage.prototype.uuid;
    /** @type {?} */
    CommonImage.prototype.fileContent;
    /** @type {?} */
    CommonImage.prototype.contentType;
    /** @type {?} */
    CommonImage.prototype.size;
    /** @type {?} */
    CommonImage.prototype.sizeUnit;
    /** @type {?} */
    CommonImage.prototype.sizeTxt;
    /** @type {?} */
    CommonImage.prototype.naturalHeight;
    /** @type {?} */
    CommonImage.prototype.naturalWidth;
    /** @type {?} */
    CommonImage.prototype.name;
    /** @type {?} */
    CommonImage.prototype.id;
    /** @type {?} */
    CommonImage.prototype.error;
    /** @type {?} */
    CommonImage.prototype.attachmentOrder;
}
/**
 * @record
 */
export function CommonImageScaleFactors() { }
if (false) {
    /** @type {?} */
    CommonImageScaleFactors.prototype.widthFactor;
    /** @type {?} */
    CommonImageScaleFactors.prototype.heightFactor;
    /**
     * @param {?} scale
     * @return {?}
     */
    CommonImageScaleFactors.prototype.scaleDown = function (scale) { };
}
var CommonImageScaleFactorsImpl = /** @class */ (function () {
    function CommonImageScaleFactorsImpl(wFactor, hFactor) {
        this.widthFactor = wFactor;
        this.heightFactor = hFactor;
    }
    /**
     * @param {?} scale
     * @return {?}
     */
    CommonImageScaleFactorsImpl.prototype.scaleDown = /**
     * @param {?} scale
     * @return {?}
     */
    function (scale) {
        return new CommonImageScaleFactorsImpl(this.widthFactor * scale, this.heightFactor * scale);
    };
    return CommonImageScaleFactorsImpl;
}());
export { CommonImageScaleFactorsImpl };
if (false) {
    /** @type {?} */
    CommonImageScaleFactorsImpl.prototype.widthFactor;
    /** @type {?} */
    CommonImageScaleFactorsImpl.prototype.heightFactor;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbW9oLWNvbW1vbi1saWIvaW1hZ2VzLyIsInNvdXJjZXMiOlsiaW1hZ2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7SUFJakMsWUFBUztJQUNULFdBQVE7SUFDUixTQUFNO0lBQ04sZ0JBQWE7SUFDYixVQUFPO0lBQ1AsYUFBVTtJQUNWLGtCQUFlO0lBQ2YsZ0JBQWE7Ozs7Ozs7Ozs7O0FBR2pCO0lBSUksd0lBQXdJO0lBQ3hJLG9DQUFtQixTQUEyQixFQUFTLGdCQUF5QjtRQUE3RCxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUFTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBUztJQUVoRixDQUFDO0lBQ0wsaUNBQUM7QUFBRCxDQUFDLEFBUkQsSUFRQzs7OztJQVBHLGlEQUEwQjs7SUFDMUIsa0RBQW9COztJQUNwQixvREFBd0I7O0lBRVosK0NBQWtDOztJQUFFLHNEQUFnQzs7Ozs7QUFPcEY7Ozs7SUFJSTtRQWtCQSxvQkFBZSxHQUFXLENBQUMsQ0FBQztRQWpCeEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQWlCTCxrQkFBQztBQUFELENBQUMsQUF2QkQsSUF1QkM7Ozs7Ozs7SUFyQkcsMkJBQWE7O0lBTWIsa0NBQW9COztJQUNwQixrQ0FBb0I7O0lBRXBCLDJCQUFhOztJQUNiLCtCQUFpQjs7SUFDakIsOEJBQWdCOztJQUNoQixvQ0FBc0I7O0lBQ3RCLG1DQUFxQjs7SUFDckIsMkJBQWE7O0lBR2IseUJBQVc7O0lBRVgsNEJBQXlCOztJQUN6QixzQ0FBNEI7Ozs7O0FBR2hDLDZDQUtDOzs7SUFKRyw4Q0FBb0I7O0lBQ3BCLCtDQUFxQjs7Ozs7SUFFckIsbUVBQWtEOztBQUd0RDtJQUlJLHFDQUFZLE9BQWUsRUFBRSxPQUFlO1FBQ3hDLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO1FBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBRUQsK0NBQVM7Ozs7SUFBVCxVQUFVLEtBQWE7UUFDbkIsT0FBTyxJQUFJLDJCQUEyQixDQUNsQyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssRUFDeEIsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQ0wsa0NBQUM7QUFBRCxDQUFDLEFBZEQsSUFjQzs7OztJQWJHLGtEQUFvQjs7SUFDcEIsbURBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVVVJRCB9IGZyb20gJ2FuZ3VsYXIyLXV1aWQnO1xuXG4vLyBOT1RFOiBJZiB5b3UgY2hhbmdlIGFueXRoaW5nIGluIHRoaXMgZW51bSwgY2hlY2sgaW1hZ2UtZXJyb3ItbW9kYWwuY29tcG9uZW50Lmh0bWwgZm9yIHRlc3RzIGFuZCBmaWxlLXVwbG9hZGVyLmNvbXBvbmVudC50czpcbmV4cG9ydCBlbnVtIENvbW1vbkltYWdlRXJyb3Ige1xuICAgIFdyb25nVHlwZSxcbiAgICBUb29TbWFsbCxcbiAgICBUb29CaWcsXG4gICAgQWxyZWFkeUV4aXN0cyxcbiAgICBVbmtub3duLFxuICAgIENhbm5vdE9wZW4sXG4gICAgUERGbm90U3VwcG9ydGVkLFxuICAgIENhbm5vdE9wZW5QREYsXG59XG5cbmV4cG9ydCBjbGFzcyBDb21tb25JbWFnZVByb2Nlc3NpbmdFcnJvciB7XG4gICAgY29tbW9uSW1hZ2U/OiBDb21tb25JbWFnZTtcbiAgICByYXdJbWFnZUZpbGU/OiBGaWxlO1xuICAgIG1heFNpemVBbGxvd2VkPzogbnVtYmVyO1xuICAgIC8vIGFkZGVkIGVycm9yRGVzY3JpcHRpb24uUERGLkpTIGdpdmVzIHByb3BlciBlcnJvciBtZXNzYWdlcyBhcyBpbnZhbGlkIHBkZiBzdHJ1Y3R1cmUgb3IgcGFzc3dvcmQgcHJvdGVjdGVkIHBkZi5Hb29kIGZvciBzcGx1bmsgdHJhY2tpbmdcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZXJyb3JDb2RlOiBDb21tb25JbWFnZUVycm9yLCBwdWJsaWMgZXJyb3JEZXNjcmlwdGlvbj86IHN0cmluZykge1xuXG4gICAgfVxufVxuLyoqXG4gKiBJbWFnZSBhcyB1cGxvYWRlZCBieSB1c2VyXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21tb25JbWFnZSB7XG5cbiAgICB1dWlkOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy51dWlkID0gVVVJRC5VVUlEKCk7XG4gICAgfVxuXG4gICAgZmlsZUNvbnRlbnQ6IHN0cmluZztcbiAgICBjb250ZW50VHlwZTogc3RyaW5nO1xuICAgIC8vIG51bWJlciBvZiBieXRlcy5cbiAgICBzaXplOiBudW1iZXI7XG4gICAgc2l6ZVVuaXQ6IHN0cmluZztcbiAgICBzaXplVHh0OiBzdHJpbmc7XG4gICAgbmF0dXJhbEhlaWdodDogbnVtYmVyO1xuICAgIG5hdHVyYWxXaWR0aDogbnVtYmVyO1xuICAgIG5hbWU6IHN0cmluZztcblxuICAgIC8vIGZpbGUgdW5pcW5lc3MgY2hlY2tzdW1cbiAgICBpZDogc3RyaW5nO1xuXG4gICAgZXJyb3I/OiBDb21tb25JbWFnZUVycm9yO1xuICAgIGF0dGFjaG1lbnRPcmRlcjogbnVtYmVyID0gMDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21tb25JbWFnZVNjYWxlRmFjdG9ycyB7XG4gICAgd2lkdGhGYWN0b3I6IG51bWJlcjtcbiAgICBoZWlnaHRGYWN0b3I6IG51bWJlcjtcblxuICAgIHNjYWxlRG93bihzY2FsZTogbnVtYmVyKTogQ29tbW9uSW1hZ2VTY2FsZUZhY3RvcnM7XG59XG5cbmV4cG9ydCBjbGFzcyBDb21tb25JbWFnZVNjYWxlRmFjdG9yc0ltcGwgaW1wbGVtZW50cyBDb21tb25JbWFnZVNjYWxlRmFjdG9ycyB7XG4gICAgd2lkdGhGYWN0b3I6IG51bWJlcjtcbiAgICBoZWlnaHRGYWN0b3I6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHdGYWN0b3I6IG51bWJlciwgaEZhY3RvcjogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMud2lkdGhGYWN0b3IgPSB3RmFjdG9yO1xuICAgICAgICB0aGlzLmhlaWdodEZhY3RvciA9IGhGYWN0b3I7XG4gICAgfVxuXG4gICAgc2NhbGVEb3duKHNjYWxlOiBudW1iZXIpOiBDb21tb25JbWFnZVNjYWxlRmFjdG9ycyB7XG4gICAgICAgIHJldHVybiBuZXcgQ29tbW9uSW1hZ2VTY2FsZUZhY3RvcnNJbXBsKFxuICAgICAgICAgICAgdGhpcy53aWR0aEZhY3RvciAqIHNjYWxlLFxuICAgICAgICAgICAgdGhpcy5oZWlnaHRGYWN0b3IgKiBzY2FsZSk7XG4gICAgfVxufVxuIl19