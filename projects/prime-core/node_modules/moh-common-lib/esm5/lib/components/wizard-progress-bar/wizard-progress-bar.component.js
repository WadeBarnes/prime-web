/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, ViewChildren, QueryList, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
import { filter, map } from 'rxjs/operators';
/**
 * NPM Dependencies:
 *  a) rxjs
 *  b) ngx-bootstrap
 */
var WizardProgressBarComponent = /** @class */ (function () {
    function WizardProgressBarComponent(router, cd) {
        this.router = router;
        this.cd = cd;
        this.progressSteps = [];
    }
    /**
     * @return {?}
     */
    WizardProgressBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Update the progress bar view on route change and _only_ route chaange.
        // Skip most of Angular's ChangeDetection in favour of manually optimizing.
        this.routerEvents$ = this.router.events.pipe(filter((/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return ev instanceof NavigationEnd; })), map((/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return ev.url; }))).subscribe((/**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            _this.activeIndex = _this.getActiveIndex(url);
            _this.cd.detectChanges();
            _this.scrollStepIntoView();
        }));
        // Must schedule first run manually, or bar won't be set.
        this.activeIndex = this.getActiveIndex(this.router.url);
    };
    /**
     * @return {?}
     */
    WizardProgressBarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.cd.detach();
        this.routerEvents$.unsubscribe();
    };
    /**
     * @return {?}
     */
    WizardProgressBarComponent.prototype.calculateProgressPercentage = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var denominator = this.progressSteps.length;
        /** @type {?} */
        var numerator = this.activeIndex + 1;
        if (denominator === 0 || numerator > denominator) {
            return 100;
        }
        // Because we've switched from space-evenly to space-around (for IE), we
        // have to handle the half-space that space-around adds to the start/end of
        // the container
        /** @type {?} */
        var halfSpace = 1 / (denominator * 2);
        return Math.round(((numerator / denominator) - halfSpace) * 100);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    WizardProgressBarComponent.prototype.getActiveIndex = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.progressSteps.findIndex((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return url.includes(x.route); }));
    };
    /**
    * Primarily for mobile, this horizontally scrolls the step into view.
    *
    * Note - be very careful with any changes to this function because it steps
    * outside of Angular to call native browser functions.
    */
    /**
     * Primarily for mobile, this horizontally scrolls the step into view.
     *
     * Note - be very careful with any changes to this function because it steps
     * outside of Angular to call native browser functions.
     * @private
     * @return {?}
     */
    WizardProgressBarComponent.prototype.scrollStepIntoView = /**
     * Primarily for mobile, this horizontally scrolls the step into view.
     *
     * Note - be very careful with any changes to this function because it steps
     * outside of Angular to call native browser functions.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var target = this.steps.toArray()[this.activeIndex];
        /** @type {?} */
        var container = document.getElementsByClassName('horizontal-scroll');
        if (container.length === 1) {
            // Since we're already breaking out of Angular, we try and be safe by using a try/catch.
            // Otherwise an error here could halt execution,
            try {
                container[0].scrollLeft = Math.abs(target.nativeElement.offsetLeft - (window.outerWidth / 2));
            }
            catch (error) { }
        }
    };
    WizardProgressBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-wizard-progress-bar',
                    template: "<progressbar\n  [value]=\"calculateProgressPercentage()\"\n  [max]=\"100\"\n  [animate]=\"true\">\n</progressbar>\n\n<div class=\"step-container\" #stepContainer>\n\n  <a #steps *ngFor=\"let step of progressSteps; let i = index;\" [routerLink]=\"step.route\">\n\n    <div class=\"step\" [ngClass]=\"{active: i === activeIndex}\">\n      <span class=\"step-text\">{{step.title}}</span>\n    </div>\n\n  </a>\n\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host{flex:1;padding:0 2em;min-height:2em;min-width:650px}.step-container{display:flex;justify-content:space-around}progressbar{background-color:#adb5bd;height:.5rem}.step{position:relative;-webkit-transform:translateX(-.5em);transform:translateX(-.5em);margin-top:.25rem}.step:before{content:\" \";position:absolute;width:1em;height:1em;border-radius:100%;background:#fff;border:3px solid #036;right:0;left:0;margin:0 auto;bottom:100%}.step:not(.active) .step-text{opacity:.8}.step:not(.active):before{background:#ced4da}.step .step-text{position:absolute;-webkit-transform:translateX(-33%);transform:translateX(-33%);white-space:nowrap;font-size:small}.progress-background{width:100%;background-color:#00f}"]
                }] }
    ];
    /** @nocollapse */
    WizardProgressBarComponent.ctorParameters = function () { return [
        { type: Router },
        { type: ChangeDetectorRef }
    ]; };
    WizardProgressBarComponent.propDecorators = {
        progressSteps: [{ type: Input }],
        stepContainer: [{ type: ViewChild, args: ['stepContainer',] }],
        steps: [{ type: ViewChildren, args: ['steps',] }]
    };
    return WizardProgressBarComponent;
}());
export { WizardProgressBarComponent };
if (false) {
    /** @type {?} */
    WizardProgressBarComponent.prototype.progressSteps;
    /** @type {?} */
    WizardProgressBarComponent.prototype.stepContainer;
    /** @type {?} */
    WizardProgressBarComponent.prototype.steps;
    /** @type {?} */
    WizardProgressBarComponent.prototype.activeIndex;
    /**
     * @type {?}
     * @private
     */
    WizardProgressBarComponent.prototype.routerEvents$;
    /**
     * @type {?}
     * @private
     */
    WizardProgressBarComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    WizardProgressBarComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l6YXJkLXByb2dyZXNzLWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tb2gtY29tbW9uLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3dpemFyZC1wcm9ncmVzcy1iYXIvd2l6YXJkLXByb2dyZXNzLWJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQy9DLFlBQVksRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQ2hELGlCQUFpQixFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7O0FBVTdDO0lBZUUsb0NBQW9CLE1BQWMsRUFBVSxFQUFxQjtRQUE3QyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFSeEQsa0JBQWEsR0FBeUIsRUFBRSxDQUFDO0lBU2pELENBQUM7Ozs7SUFFRiw2Q0FBUTs7O0lBQVI7UUFBQSxpQkFlQztRQWJDLHlFQUF5RTtRQUN6RSwyRUFBMkU7UUFDM0UsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQzFDLE1BQU07Ozs7UUFBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLEVBQUUsWUFBWSxhQUFhLEVBQTNCLENBQTJCLEVBQUMsRUFDekMsR0FBRzs7OztRQUFDLFVBQUMsRUFBaUIsSUFBSyxPQUFBLEVBQUUsQ0FBQyxHQUFHLEVBQU4sQ0FBTSxFQUFDLENBQ25DLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsR0FBRztZQUNiLEtBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM1QyxLQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3hCLEtBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzVCLENBQUMsRUFBQyxDQUFDO1FBRUgseURBQXlEO1FBQ3pELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFELENBQUM7Ozs7SUFFRCxnREFBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELGdFQUEyQjs7O0lBQTNCOztZQUNRLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU07O1lBQ3ZDLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUM7UUFFdEMsSUFBSSxXQUFXLEtBQUssQ0FBQyxJQUFJLFNBQVMsR0FBRyxXQUFXLEVBQUU7WUFDaEQsT0FBTyxHQUFHLENBQUM7U0FDWjs7Ozs7WUFLSyxTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUN2QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsR0FBRyxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7OztJQUVELG1EQUFjOzs7O0lBQWQsVUFBZSxHQUFHO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBckIsQ0FBcUIsRUFBQyxDQUFDO0lBQ2xFLENBQUM7SUFFQTs7Ozs7TUFLRTs7Ozs7Ozs7O0lBQ0ssdURBQWtCOzs7Ozs7OztJQUExQjs7WUFDUSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDOztZQUMvQyxTQUFTLEdBQUcsUUFBUSxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDO1FBQ3RFLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDMUIsd0ZBQXdGO1lBQ3hGLGdEQUFnRDtZQUNoRCxJQUFJO2dCQUNGLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMvRjtZQUFDLE9BQU8sS0FBSyxFQUFFLEdBQUU7U0FDbkI7SUFDSCxDQUFDOztnQkEzRUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSw0QkFBNEI7b0JBQ3RDLDhhQUFtRDtvQkFFbkQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2lCQUNoRDs7OztnQkFoQlEsTUFBTTtnQkFETixpQkFBaUI7OztnQ0FtQnZCLEtBQUs7Z0NBQ0wsU0FBUyxTQUFDLGVBQWU7d0JBQ3pCLFlBQVksU0FBQyxPQUFPOztJQW9FdkIsaUNBQUM7Q0FBQSxBQTdFRCxJQTZFQztTQXZFWSwwQkFBMEI7OztJQUNyQyxtREFBa0Q7O0lBQ2xELG1EQUFzRDs7SUFDdEQsMkNBQXVFOztJQUV2RSxpREFBMkI7Ozs7O0lBRTNCLG1EQUFvQzs7Ozs7SUFFeEIsNENBQXNCOzs7OztJQUFFLHdDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLFxuICAgICAgICAgVmlld0NoaWxkcmVuLCBRdWVyeUxpc3QsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgICAgICAgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyLCBOYXZpZ2F0aW9uRW5kIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBXaXphcmRQcm9ncmVzc0l0ZW0gfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvc3JjL2NvbnRhaW5lcic7XG5cbi8qKlxuICogTlBNIERlcGVuZGVuY2llczpcbiAqICBhKSByeGpzXG4gKiAgYikgbmd4LWJvb3RzdHJhcFxuICovXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2NvbW1vbi13aXphcmQtcHJvZ3Jlc3MtYmFyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3dpemFyZC1wcm9ncmVzcy1iYXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi93aXphcmQtcHJvZ3Jlc3MtYmFyLmNvbXBvbmVudC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFdpemFyZFByb2dyZXNzQmFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSBwcm9ncmVzc1N0ZXBzOiBXaXphcmRQcm9ncmVzc0l0ZW1bXSA9IFtdO1xuICBAVmlld0NoaWxkKCdzdGVwQ29udGFpbmVyJykgc3RlcENvbnRhaW5lcjogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZHJlbignc3RlcHMnKSBzdGVwczogUXVlcnlMaXN0PEVsZW1lbnRSZWY8SFRNTEFuY2hvckVsZW1lbnQ+PjtcblxuICBwdWJsaWMgYWN0aXZlSW5kZXg6IG51bWJlcjtcblxuICBwcml2YXRlIHJvdXRlckV2ZW50cyQ6IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlcjogUm91dGVyLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgfVxuXG4gIG5nT25Jbml0KCkge1xuXG4gICAgLy8gVXBkYXRlIHRoZSBwcm9ncmVzcyBiYXIgdmlldyBvbiByb3V0ZSBjaGFuZ2UgYW5kIF9vbmx5XyByb3V0ZSBjaGFhbmdlLlxuICAgIC8vIFNraXAgbW9zdCBvZiBBbmd1bGFyJ3MgQ2hhbmdlRGV0ZWN0aW9uIGluIGZhdm91ciBvZiBtYW51YWxseSBvcHRpbWl6aW5nLlxuICAgIHRoaXMucm91dGVyRXZlbnRzJCA9IHRoaXMucm91dGVyLmV2ZW50cy5waXBlKFxuICAgICAgZmlsdGVyKGV2ID0+IGV2IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCksXG4gICAgICBtYXAoKGV2OiBOYXZpZ2F0aW9uRW5kKSA9PiBldi51cmwpXG4gICAgKS5zdWJzY3JpYmUodXJsID0+IHtcbiAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSB0aGlzLmdldEFjdGl2ZUluZGV4KHVybCk7XG4gICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIHRoaXMuc2Nyb2xsU3RlcEludG9WaWV3KCk7XG4gICAgfSk7XG5cbiAgICAvLyBNdXN0IHNjaGVkdWxlIGZpcnN0IHJ1biBtYW51YWxseSwgb3IgYmFyIHdvbid0IGJlIHNldC5cbiAgICB0aGlzLmFjdGl2ZUluZGV4ID0gdGhpcy5nZXRBY3RpdmVJbmRleCh0aGlzLnJvdXRlci51cmwpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5jZC5kZXRhY2goKTtcbiAgICB0aGlzLnJvdXRlckV2ZW50cyQudW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIGNhbGN1bGF0ZVByb2dyZXNzUGVyY2VudGFnZSgpOiBOdW1iZXIge1xuICAgIGNvbnN0IGRlbm9taW5hdG9yID0gdGhpcy5wcm9ncmVzc1N0ZXBzLmxlbmd0aDtcbiAgICBjb25zdCBudW1lcmF0b3IgPSB0aGlzLmFjdGl2ZUluZGV4ICsgMTtcblxuICAgIGlmIChkZW5vbWluYXRvciA9PT0gMCB8fCBudW1lcmF0b3IgPiBkZW5vbWluYXRvcikge1xuICAgICAgcmV0dXJuIDEwMDtcbiAgICB9XG5cbiAgICAvLyBCZWNhdXNlIHdlJ3ZlIHN3aXRjaGVkIGZyb20gc3BhY2UtZXZlbmx5IHRvIHNwYWNlLWFyb3VuZCAoZm9yIElFKSwgd2VcbiAgICAvLyBoYXZlIHRvIGhhbmRsZSB0aGUgaGFsZi1zcGFjZSB0aGF0IHNwYWNlLWFyb3VuZCBhZGRzIHRvIHRoZSBzdGFydC9lbmQgb2ZcbiAgICAvLyB0aGUgY29udGFpbmVyXG4gICAgY29uc3QgaGFsZlNwYWNlID0gMSAvIChkZW5vbWluYXRvciAqIDIpO1xuICAgIHJldHVybiBNYXRoLnJvdW5kKCgobnVtZXJhdG9yIC8gZGVub21pbmF0b3IpIC0gaGFsZlNwYWNlKSAqIDEwMCk7XG4gIH1cblxuICBnZXRBY3RpdmVJbmRleCh1cmwpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnByb2dyZXNzU3RlcHMuZmluZEluZGV4KHggPT4gdXJsLmluY2x1ZGVzKHgucm91dGUpKTtcbiAgfVxuXG4gICAvKipcbiAgICogUHJpbWFyaWx5IGZvciBtb2JpbGUsIHRoaXMgaG9yaXpvbnRhbGx5IHNjcm9sbHMgdGhlIHN0ZXAgaW50byB2aWV3LlxuICAgKlxuICAgKiBOb3RlIC0gYmUgdmVyeSBjYXJlZnVsIHdpdGggYW55IGNoYW5nZXMgdG8gdGhpcyBmdW5jdGlvbiBiZWNhdXNlIGl0IHN0ZXBzXG4gICAqIG91dHNpZGUgb2YgQW5ndWxhciB0byBjYWxsIG5hdGl2ZSBicm93c2VyIGZ1bmN0aW9ucy5cbiAgICovXG4gIHByaXZhdGUgc2Nyb2xsU3RlcEludG9WaWV3KCkge1xuICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc3RlcHMudG9BcnJheSgpW3RoaXMuYWN0aXZlSW5kZXhdO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2hvcml6b250YWwtc2Nyb2xsJyk7XG4gICAgaWYgKGNvbnRhaW5lci5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIFNpbmNlIHdlJ3JlIGFscmVhZHkgYnJlYWtpbmcgb3V0IG9mIEFuZ3VsYXIsIHdlIHRyeSBhbmQgYmUgc2FmZSBieSB1c2luZyBhIHRyeS9jYXRjaC5cbiAgICAgIC8vIE90aGVyd2lzZSBhbiBlcnJvciBoZXJlIGNvdWxkIGhhbHQgZXhlY3V0aW9uLFxuICAgICAgdHJ5IHtcbiAgICAgICAgY29udGFpbmVyWzBdLnNjcm9sbExlZnQgPSBNYXRoLmFicyh0YXJnZXQubmF0aXZlRWxlbWVudC5vZmZzZXRMZWZ0IC0gKHdpbmRvdy5vdXRlcldpZHRoIC8gMikpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHt9XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==