/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';
import { ControlContainer, NgForm } from '@angular/forms';
var FormActionBarComponent = /** @class */ (function () {
    function FormActionBarComponent() {
        this.submitLabel = 'Continue';
        this.canContinue = true;
        this.isLoading = false;
        this.defaultColor = true;
        this.btnClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    FormActionBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FormActionBarComponent.prototype.onClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (!this.isLoading && this.canContinue) {
            this.btnClick.emit($event);
        }
        $event.stopPropagation();
        return false;
    };
    FormActionBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-form-action-bar',
                    template: "<div class=\"form-action-bar form-bar\" [ngClass]=\"{disabled: !canContinue}\">\n    <button class=\"btn btn-lg {{defaultColor ? 'btn-primary' : 'btn-secondary' }} submit\"\n            (click)=\"onClick($event)\"\n            [ngClass]=\"{disabled: !canContinue || isLoading}\">\n      <ng-container *ngIf=\"!isLoading; else loadingSpinner\"> {{submitLabel}} </ng-container>\n      \n    </button>\n</div>\n\n<ng-template #loadingSpinner>\n    <i class=\"fa fa-spinner fa-pulse fa-fw\"></i>\n</ng-template>",
                    viewProviders: [{ provide: ControlContainer, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NgForm; })) }],
                    styles: [".form-action-bar{display:flex;justify-content:flex-end;padding:1em;background-color:#cdd9e4;transition:background-color .3s;position:-webkit-sticky;position:sticky;bottom:0;z-index:10;left:5rem;right:5rem}.form-action-bar.disabled{background-color:#d5d9dd}@media (max-width:991.98px){.form-action-bar{left:2.5rem;right:2.5rem}}.submit{min-width:240px}@media (max-width:767.98px){.form-action-bar{left:0;right:0}.submit{min-width:100%}}.btn{white-space:normal!important;word-wrap:break-word}"]
                }] }
    ];
    /** @nocollapse */
    FormActionBarComponent.ctorParameters = function () { return []; };
    FormActionBarComponent.propDecorators = {
        submitLabel: [{ type: Input }],
        canContinue: [{ type: Input }],
        isLoading: [{ type: Input }],
        defaultColor: [{ type: Input }],
        btnClick: [{ type: Output }]
    };
    return FormActionBarComponent;
}());
export { FormActionBarComponent };
if (false) {
    /** @type {?} */
    FormActionBarComponent.prototype.submitLabel;
    /** @type {?} */
    FormActionBarComponent.prototype.canContinue;
    /** @type {?} */
    FormActionBarComponent.prototype.isLoading;
    /** @type {?} */
    FormActionBarComponent.prototype.defaultColor;
    /** @type {?} */
    FormActionBarComponent.prototype.btnClick;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1hY3Rpb24tYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21vaC1jb21tb24tbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZm9ybS1hY3Rpb24tYmFyL2Zvcm0tYWN0aW9uLWJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxRDtJQWFFO1FBTlMsZ0JBQVcsR0FBVyxVQUFVLENBQUM7UUFDakMsZ0JBQVcsR0FBWSxJQUFJLENBQUM7UUFDNUIsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUMzQixpQkFBWSxHQUFZLElBQUksQ0FBQztRQUM1QixhQUFRLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFaEQsQ0FBQzs7OztJQUVqQix5Q0FBUTs7O0lBQVI7SUFDQSxDQUFDOzs7OztJQUVELHdDQUFPOzs7O0lBQVAsVUFBUSxNQUFNO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM1QjtRQUNELE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN6QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7O2dCQXhCRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsdWdCQUErQztvQkFFL0MsYUFBYSxFQUFFLENBQUUsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEsTUFBTSxFQUFOLENBQU0sRUFBRSxFQUFFLENBQUU7O2lCQUN6Rjs7Ozs7OEJBRUUsS0FBSzs4QkFDTCxLQUFLOzRCQUNMLEtBQUs7K0JBQ0wsS0FBSzsyQkFDTCxNQUFNOztJQWNULDZCQUFDO0NBQUEsQUF6QkQsSUF5QkM7U0FuQlksc0JBQXNCOzs7SUFDakMsNkNBQTBDOztJQUMxQyw2Q0FBcUM7O0lBQ3JDLDJDQUFvQzs7SUFDcEMsOENBQXNDOztJQUN0QywwQ0FBZ0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBmb3J3YXJkUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sQ29udGFpbmVyLCBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2NvbW1vbi1mb3JtLWFjdGlvbi1iYXInLFxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1hY3Rpb24tYmFyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZm9ybS1hY3Rpb24tYmFyLmNvbXBvbmVudC5zY3NzJ10sXG4gIHZpZXdQcm92aWRlcnM6IFsgeyBwcm92aWRlOiBDb250cm9sQ29udGFpbmVyLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBOZ0Zvcm0gKSB9IF1cbn0pXG5leHBvcnQgY2xhc3MgRm9ybUFjdGlvbkJhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIHN1Ym1pdExhYmVsOiBzdHJpbmcgPSAnQ29udGludWUnO1xuICBASW5wdXQoKSBjYW5Db250aW51ZTogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIGlzTG9hZGluZzogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBkZWZhdWx0Q29sb3I6IGJvb2xlYW4gPSB0cnVlO1xuICBAT3V0cHV0KCkgYnRuQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG4gIG9uQ2xpY2soJGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLmlzTG9hZGluZyAmJiB0aGlzLmNhbkNvbnRpbnVlKSB7XG4gICAgICB0aGlzLmJ0bkNsaWNrLmVtaXQoJGV2ZW50KTtcbiAgICB9XG4gICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl19