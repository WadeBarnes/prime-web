/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Output, EventEmitter, HostListener } from '@angular/core';
var DateFieldFormatDirective = /** @class */ (function () {
    function DateFieldFormatDirective() {
        this.ngModelChange = new EventEmitter(false);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    DateFieldFormatDirective.prototype.onInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var input = (/** @type {?} */ (event.target));
        /** @type {?} */
        var maxlen = input.getAttribute('maxlength');
        /** @type {?} */
        var trimmed = input.value.trim();
        if (/[^\d]+/.test(input.value)) {
            trimmed = trimmed.replace(/[^\d]/g, '');
        }
        trimmed = trimmed.substr(0, Number(maxlen));
        input.value = trimmed;
        this.ngModelChange.emit(trimmed);
    };
    DateFieldFormatDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[commonDateFieldFormat]'
                },] }
    ];
    DateFieldFormatDirective.propDecorators = {
        ngModelChange: [{ type: Output }],
        onInput: [{ type: HostListener, args: ['input', ['$event'],] }]
    };
    return DateFieldFormatDirective;
}());
export { DateFieldFormatDirective };
if (false) {
    /** @type {?} */
    DateFieldFormatDirective.prototype.ngModelChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1maWVsZC1mb3JtYXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbW9oLWNvbW1vbi1saWIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9kYXRlL2RhdGUtZmllbGQtZm9ybWF0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RTtJQUFBO1FBS1ksa0JBQWEsR0FBeUIsSUFBSSxZQUFZLENBQVMsS0FBSyxDQUFDLENBQUM7SUFrQmxGLENBQUM7Ozs7O0lBZkMsMENBQU87Ozs7SUFEUCxVQUNTLEtBQW9COztZQUNyQixLQUFLLEdBQUcsbUJBQUEsS0FBSyxDQUFDLE1BQU0sRUFBb0I7O1lBQ3hDLE1BQU0sR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFFLFdBQVcsQ0FBRTs7WUFFNUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ2hDLElBQUksUUFBUSxDQUFDLElBQUksQ0FBRSxLQUFLLENBQUMsS0FBSyxDQUFFLEVBQUc7WUFFakMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBRSxNQUFNLENBQUUsQ0FBRSxDQUFDO1FBRWhELEtBQUssQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFFLE9BQU8sQ0FBRSxDQUFDO0lBQ3JDLENBQUM7O2dCQXRCRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtpQkFDcEM7OztnQ0FHRSxNQUFNOzBCQUVOLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBZ0JuQywrQkFBQztDQUFBLEFBdkJELElBdUJDO1NBcEJZLHdCQUF3Qjs7O0lBRW5DLGlEQUFnRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY29tbW9uRGF0ZUZpZWxkRm9ybWF0XSdcbn0pXG5leHBvcnQgY2xhc3MgRGF0ZUZpZWxkRm9ybWF0RGlyZWN0aXZlIHtcblxuICBAT3V0cHV0KCkgbmdNb2RlbENoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oZmFsc2UpO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2lucHV0JywgWyckZXZlbnQnXSlcbiAgb25JbnB1dCggZXZlbnQ6IEtleWJvYXJkRXZlbnQgKSB7XG4gICAgY29uc3QgaW5wdXQgPSBldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICBjb25zdCBtYXhsZW4gPSBpbnB1dC5nZXRBdHRyaWJ1dGUoICdtYXhsZW5ndGgnICk7XG5cbiAgICBsZXQgdHJpbW1lZCA9IGlucHV0LnZhbHVlLnRyaW0oKTtcbiAgICBpZiAoL1teXFxkXSsvLnRlc3QoIGlucHV0LnZhbHVlICkgKSB7XG5cbiAgICAgIHRyaW1tZWQgPSB0cmltbWVkLnJlcGxhY2UoL1teXFxkXS9nLCAnJyk7XG4gICAgfVxuXG4gICAgdHJpbW1lZCA9IHRyaW1tZWQuc3Vic3RyKCAwLCBOdW1iZXIoIG1heGxlbiApICk7XG5cbiAgICBpbnB1dC52YWx1ZSA9IHRyaW1tZWQ7XG4gICAgdGhpcy5uZ01vZGVsQ2hhbmdlLmVtaXQoIHRyaW1tZWQgKTtcbiAgfVxufVxuIl19