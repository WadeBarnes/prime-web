/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import * as moment_ from 'moment';
/** @type {?} */
var moment = moment_;
// TODO:  Create a message structure to pass in error messages similar to password module.
var YearValidateDirective = /** @class */ (function () {
    function YearValidateDirective() {
    }
    /**
     * @param {?} control
     * @return {?}
     */
    YearValidateDirective.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var date = control.parent.value;
        // console.log( 'validate year: ', control.value );
        if (!control.value) {
            return null; // empty value
        }
        /** @type {?} */
        var year = parseInt(control.value, 10);
        // Only process if value is numeric
        if (!isNaN(year)) {
            /** @type {?} */
            var currentYear = moment().get('y');
            if (currentYear - year > 150) {
                return { 'yearDistantPast': true };
            }
            if (year - currentYear > 150) {
                return { 'yearDistantFuture': true };
            }
            // Check whether dates can be present or past
            if (this.commonYearValidate && this.commonYearValidate !== 'any' &&
                !isNaN(date.day) && !isNaN(date.month)) {
                /** @type {?} */
                var diff = moment({ year: year, month: date.month, day: date.day })
                    .diff(moment(), 'days', true);
                /**
                 * Validate current date as if it's a future date, and reject it when only
                 * accepting past dates.  We accomplish this by comparing diff against 1.
                 */
                if (diff < -1 && this.commonYearValidate === 'future') {
                    return { 'noPastDatesAllowed': true };
                }
                if (diff >= -1 && this.commonYearValidate === 'past') {
                    return { 'noFutureDatesAllowed': true };
                }
            }
            return null;
        }
        return { 'invalidValue': true };
    };
    YearValidateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[commonYearValidate]',
                    providers: [
                        { provide: NG_VALIDATORS, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return YearValidateDirective; })), multi: true }
                    ]
                },] }
    ];
    YearValidateDirective.propDecorators = {
        commonYearValidate: [{ type: Input }]
    };
    return YearValidateDirective;
}());
export { YearValidateDirective };
if (false) {
    /** @type {?} */
    YearValidateDirective.prototype.commonYearValidate;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWVhci12YWxpZGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tb2gtY29tbW9uLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2RhdGUveWVhci12YWxpZGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsYUFBYSxFQUEwQixNQUFNLGdCQUFnQixDQUFDO0FBQ3ZFLE9BQU8sS0FBSyxPQUFPLE1BQU0sUUFBUSxDQUFDOztJQUM1QixNQUFNLEdBQUcsT0FBTzs7QUFJdEI7SUFBQTtJQTJEQSxDQUFDOzs7OztJQWpEQyx3Q0FBUTs7OztJQUFSLFVBQVUsT0FBb0I7O1lBQ3RCLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUs7UUFFakMsbURBQW1EO1FBRW5ELElBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFHO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLENBQUMsY0FBYztTQUM1Qjs7WUFFSyxJQUFJLEdBQVcsUUFBUSxDQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFFO1FBRWxELG1DQUFtQztRQUNuQyxJQUFLLENBQUMsS0FBSyxDQUFHLElBQUksQ0FBRSxFQUFHOztnQkFDZixXQUFXLEdBQUcsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBRTtZQUV2QyxJQUFLLFdBQVcsR0FBRyxJQUFJLEdBQUcsR0FBRyxFQUFHO2dCQUM5QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDcEM7WUFFRCxJQUFLLElBQUksR0FBRyxXQUFXLEdBQUcsR0FBRyxFQUFHO2dCQUM5QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFDLENBQUU7YUFDdEM7WUFFRCw2Q0FBNkM7WUFDN0MsSUFBSyxJQUFJLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLGtCQUFrQixLQUFLLEtBQUs7Z0JBQzVELENBQUMsS0FBSyxDQUFFLElBQUksQ0FBQyxHQUFHLENBQUUsSUFBSyxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFFLEVBQUc7O29CQUUzQyxJQUFJLEdBQUcsTUFBTSxDQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFFO3FCQUNwRSxJQUFJLENBQUUsTUFBTSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBRTtnQkFFaEM7OzttQkFHRztnQkFDRixJQUFLLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEtBQUssUUFBUSxFQUFHO29CQUN2RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFLENBQUM7aUJBQ3ZDO2dCQUVELElBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsS0FBSyxNQUFNLEVBQUc7b0JBQ3RELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsQ0FBQztpQkFDekM7YUFDSjtZQUVELE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxPQUFPLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQ2xDLENBQUM7O2dCQXpERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsU0FBUyxFQUFFO3dCQUNULEVBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSxxQkFBcUIsRUFBckIsQ0FBcUIsRUFBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUM7cUJBQzVGO2lCQUNGOzs7cUNBR0UsS0FBSzs7SUFtRFIsNEJBQUM7Q0FBQSxBQTNERCxJQTJEQztTQXJEWSxxQkFBcUI7OztJQUVoQyxtREFBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIGZvcndhcmRSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxJREFUT1JTLCBWYWxpZGF0b3IsIEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0ICogYXMgbW9tZW50XyBmcm9tICdtb21lbnQnO1xuY29uc3QgbW9tZW50ID0gbW9tZW50XztcblxuLy8gVE9ETzogIENyZWF0ZSBhIG1lc3NhZ2Ugc3RydWN0dXJlIHRvIHBhc3MgaW4gZXJyb3IgbWVzc2FnZXMgc2ltaWxhciB0byBwYXNzd29yZCBtb2R1bGUuXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjb21tb25ZZWFyVmFsaWRhdGVdJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAge3Byb3ZpZGU6IE5HX1ZBTElEQVRPUlMsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFllYXJWYWxpZGF0ZURpcmVjdGl2ZSksIG11bHRpOiB0cnVlfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFllYXJWYWxpZGF0ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciAge1xuXG4gIEBJbnB1dCgpIGNvbW1vblllYXJWYWxpZGF0ZTogc3RyaW5nO1xuXG4gIHZhbGlkYXRlKCBjb250cm9sOiBGb3JtQ29udHJvbCApOiB7W2tleTogc3RyaW5nXTogYW55fSB8IG51bGwge1xuICAgIGNvbnN0IGRhdGUgPSBjb250cm9sLnBhcmVudC52YWx1ZTtcblxuICAgIC8vIGNvbnNvbGUubG9nKCAndmFsaWRhdGUgeWVhcjogJywgY29udHJvbC52YWx1ZSApO1xuXG4gICAgaWYgKCAhY29udHJvbC52YWx1ZSApIHtcbiAgICAgIHJldHVybiBudWxsOyAvLyBlbXB0eSB2YWx1ZVxuICAgIH1cblxuICAgIGNvbnN0IHllYXI6IG51bWJlciA9IHBhcnNlSW50KCBjb250cm9sLnZhbHVlLCAxMCApO1xuXG4gICAgLy8gT25seSBwcm9jZXNzIGlmIHZhbHVlIGlzIG51bWVyaWNcbiAgICBpZiAoICFpc05hTiggIHllYXIgKSApIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRZZWFyID0gbW9tZW50KCkuZ2V0KCAneScgKTtcblxuICAgICAgaWYgKCBjdXJyZW50WWVhciAtIHllYXIgPiAxNTAgKSB7XG4gICAgICAgIHJldHVybiB7ICd5ZWFyRGlzdGFudFBhc3QnOiB0cnVlIH07XG4gICAgICB9XG5cbiAgICAgIGlmICggeWVhciAtIGN1cnJlbnRZZWFyID4gMTUwICkge1xuICAgICAgICByZXR1cm4geyAneWVhckRpc3RhbnRGdXR1cmUnOiB0cnVlfSA7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIHdoZXRoZXIgZGF0ZXMgY2FuIGJlIHByZXNlbnQgb3IgcGFzdFxuICAgICAgaWYgKCB0aGlzLmNvbW1vblllYXJWYWxpZGF0ZSAmJiB0aGlzLmNvbW1vblllYXJWYWxpZGF0ZSAhPT0gJ2FueScgJiZcbiAgICAgICAgICAgIWlzTmFOKCBkYXRlLmRheSApICAmJiAhaXNOYU4oIGRhdGUubW9udGggKSApIHtcblxuICAgICAgICBjb25zdCBkaWZmID0gbW9tZW50KCB7IHllYXI6IHllYXIsIG1vbnRoOiBkYXRlLm1vbnRoLCBkYXk6IGRhdGUuZGF5IH0gKVxuICAgICAgICAgIC5kaWZmKCBtb21lbnQoKSwgJ2RheXMnLCB0cnVlICk7XG5cbiAgICAgICAgIC8qKlxuICAgICAgICAgICogVmFsaWRhdGUgY3VycmVudCBkYXRlIGFzIGlmIGl0J3MgYSBmdXR1cmUgZGF0ZSwgYW5kIHJlamVjdCBpdCB3aGVuIG9ubHlcbiAgICAgICAgICAqIGFjY2VwdGluZyBwYXN0IGRhdGVzLiAgV2UgYWNjb21wbGlzaCB0aGlzIGJ5IGNvbXBhcmluZyBkaWZmIGFnYWluc3QgMS5cbiAgICAgICAgICAqL1xuICAgICAgICAgIGlmICggZGlmZiA8IC0xICYmIHRoaXMuY29tbW9uWWVhclZhbGlkYXRlID09PSAnZnV0dXJlJyApIHtcbiAgICAgICAgICAgIHJldHVybiB7ICdub1Bhc3REYXRlc0FsbG93ZWQnOiB0cnVlIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCBkaWZmID49IC0xICYmIHRoaXMuY29tbW9uWWVhclZhbGlkYXRlID09PSAncGFzdCcgKSB7XG4gICAgICAgICAgICByZXR1cm4geyAnbm9GdXR1cmVEYXRlc0FsbG93ZWQnOiB0cnVlIH07XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4geyAnaW52YWxpZFZhbHVlJzogdHJ1ZSB9O1xuICB9XG5cbn1cbiJdfQ==