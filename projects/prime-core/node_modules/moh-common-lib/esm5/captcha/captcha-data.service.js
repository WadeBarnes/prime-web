/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
// payload returned from the server
var ServerPayload = /** @class */ (function () {
    function ServerPayload() {
    }
    ServerPayload.decorators = [
        { type: Injectable }
    ];
    return ServerPayload;
}());
export { ServerPayload };
if (false) {
    /** @type {?} */
    ServerPayload.prototype.nonce;
    /** @type {?} */
    ServerPayload.prototype.captcha;
    /** @type {?} */
    ServerPayload.prototype.validation;
    /** @type {?} */
    ServerPayload.prototype.expiry;
}
var CaptchaDataService = /** @class */ (function () {
    function CaptchaDataService(httpClient) {
        this.httpClient = httpClient;
    }
    // private http: Http) { }
    // private http: Http) { }
    /**
     * @param {?} apiBaseUrl
     * @param {?} nonce
     * @return {?}
     */
    CaptchaDataService.prototype.fetchData = 
    // private http: Http) { }
    /**
     * @param {?} apiBaseUrl
     * @param {?} nonce
     * @return {?}
     */
    function (apiBaseUrl, nonce) {
        return this.httpClient
            .post(apiBaseUrl + '/captcha', { nonce: nonce }, { observe: 'response' });
    };
    /**
     * @param {?} apiBaseUrl
     * @param {?} nonce
     * @param {?} answer
     * @param {?} encryptedAnswer
     * @return {?}
     */
    CaptchaDataService.prototype.verifyCaptcha = /**
     * @param {?} apiBaseUrl
     * @param {?} nonce
     * @param {?} answer
     * @param {?} encryptedAnswer
     * @return {?}
     */
    function (apiBaseUrl, nonce, answer, encryptedAnswer) {
        return this.httpClient
            .post(apiBaseUrl + '/verify/captcha', { nonce: nonce, answer: answer, validation: encryptedAnswer }, { observe: 'response' });
    };
    /**
     * @param {?} apiBaseUrl
     * @param {?} validation
     * @param {?=} translation
     * @return {?}
     */
    CaptchaDataService.prototype.fetchAudio = /**
     * @param {?} apiBaseUrl
     * @param {?} validation
     * @param {?=} translation
     * @return {?}
     */
    function (apiBaseUrl, validation, translation) {
        /** @type {?} */
        var payload = { validation: validation };
        if (translation) {
            payload.translation = translation;
        }
        return this.httpClient
            .post(apiBaseUrl + '/captcha/audio', payload, { observe: 'response' });
    };
    CaptchaDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CaptchaDataService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return CaptchaDataService;
}());
export { CaptchaDataService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CaptchaDataService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwdGNoYS1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tb2gtY29tbW9uLWxpYi9jYXB0Y2hhLyIsInNvdXJjZXMiOlsiY2FwdGNoYS1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxzQkFBc0IsQ0FBQzs7QUFLaEU7SUFBQTtJQU1BLENBQUM7O2dCQU5BLFVBQVU7O0lBTVgsb0JBQUM7Q0FBQSxBQU5ELElBTUM7U0FMWSxhQUFhOzs7SUFDdEIsOEJBQWM7O0lBQ2QsZ0NBQWdCOztJQUNoQixtQ0FBbUI7O0lBQ25CLCtCQUFlOztBQUduQjtJQUdJLDRCQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQUksQ0FBQztJQUMvQywwQkFBMEI7Ozs7Ozs7SUFFbkIsc0NBQVM7Ozs7Ozs7SUFBaEIsVUFBaUIsVUFBa0IsRUFBRSxLQUFhO1FBQzlDLE9BQU8sSUFBSSxDQUFDLFVBQVU7YUFDakIsSUFBSSxDQUNELFVBQVUsR0FBRyxVQUFVLEVBQ3ZCLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUNoQixFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7Ozs7O0lBRU0sMENBQWE7Ozs7Ozs7SUFBcEIsVUFBcUIsVUFBa0IsRUFDZixLQUFhLEVBQ2IsTUFBYyxFQUNkLGVBQXVCO1FBQzNDLE9BQU8sSUFBSSxDQUFDLFVBQVU7YUFDakIsSUFBSSxDQUNELFVBQVUsR0FBRyxpQkFBaUIsRUFDOUIsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxFQUM3RCxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7Ozs7SUFFTSx1Q0FBVTs7Ozs7O0lBQWpCLFVBQWtCLFVBQWtCLEVBQUUsVUFBa0IsRUFBRSxXQUFvQjs7WUFDcEUsT0FBTyxHQUFRLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtRQUMvQyxJQUFJLFdBQVcsRUFBRTtZQUNiLE9BQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1NBQ3JDO1FBQ0QsT0FBTyxJQUFJLENBQUMsVUFBVTthQUNqQixJQUFJLENBQ0QsVUFBVSxHQUFHLGdCQUFnQixFQUM3QixPQUFPLEVBQ1AsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDOztnQkFuQ0osVUFBVTs7OztnQkFiRixVQUFVOztJQThEbkIseUJBQUM7Q0FBQSxBQWpERCxJQWlEQztTQWhEWSxrQkFBa0I7Ozs7OztJQUVmLHdDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbi8vIGltcG9ydCB7IEh0dHAsIFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8vIHBheWxvYWQgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2VydmVyUGF5bG9hZCB7XG4gICAgbm9uY2U6IHN0cmluZztcbiAgICBjYXB0Y2hhOiBzdHJpbmc7XG4gICAgdmFsaWRhdGlvbjogc3RyaW5nO1xuICAgIGV4cGlyeTogc3RyaW5nO1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2FwdGNoYURhdGFTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkgeyB9XG4gICAgLy8gcHJpdmF0ZSBodHRwOiBIdHRwKSB7IH1cblxuICAgIHB1YmxpYyBmZXRjaERhdGEoYXBpQmFzZVVybDogc3RyaW5nLCBub25jZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8U2VydmVyUGF5bG9hZD4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudFxuICAgICAgICAgICAgLnBvc3Q8U2VydmVyUGF5bG9hZD4oXG4gICAgICAgICAgICAgICAgYXBpQmFzZVVybCArICcvY2FwdGNoYScsXG4gICAgICAgICAgICAgICAgeyBub25jZTogbm9uY2UgfSxcbiAgICAgICAgICAgICAgICB7IG9ic2VydmU6ICdyZXNwb25zZScgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHZlcmlmeUNhcHRjaGEoYXBpQmFzZVVybDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vbmNlOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jcnlwdGVkQW5zd2VyOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxTZXJ2ZXJQYXlsb2FkPj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XG4gICAgICAgICAgICAucG9zdDxTZXJ2ZXJQYXlsb2FkPihcbiAgICAgICAgICAgICAgICBhcGlCYXNlVXJsICsgJy92ZXJpZnkvY2FwdGNoYScsXG4gICAgICAgICAgICAgICAgeyBub25jZTogbm9uY2UsIGFuc3dlcjogYW5zd2VyLCB2YWxpZGF0aW9uOiBlbmNyeXB0ZWRBbnN3ZXIgfSxcbiAgICAgICAgICAgICAgICB7IG9ic2VydmU6ICdyZXNwb25zZScgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGZldGNoQXVkaW8oYXBpQmFzZVVybDogc3RyaW5nLCB2YWxpZGF0aW9uOiBzdHJpbmcsIHRyYW5zbGF0aW9uPzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQ6IGFueSA9IHsgdmFsaWRhdGlvbjogdmFsaWRhdGlvbiB9O1xuICAgICAgICBpZiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgIHBheWxvYWQudHJhbnNsYXRpb24gPSB0cmFuc2xhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XG4gICAgICAgICAgICAucG9zdDxzdHJpbmc+KFxuICAgICAgICAgICAgICAgIGFwaUJhc2VVcmwgKyAnL2NhcHRjaGEvYXVkaW8nLFxuICAgICAgICAgICAgICAgIHBheWxvYWQsXG4gICAgICAgICAgICAgICAgeyBvYnNlcnZlOiAncmVzcG9uc2UnIH0pO1xuICAgIH1cbiAgICAvKlxuICAgICAgZmV0Y2hEYXRhKGFwaUJhc2VVcmw6IHN0cmluZywgbm9uY2U6IHN0cmluZyk6IE9ic2VydmFibGU8UmVzcG9uc2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KGFwaUJhc2VVcmwgKyAnL2NhcHRjaGEnLCB7bm9uY2U6IG5vbmNlfSwge30pO1xuICAgICAgfVxuXG4gICAgICB2ZXJpZnlDYXB0Y2hhKGFwaUJhc2VVcmw6IHN0cmluZywgbm9uY2U6IHN0cmluZywgYW5zd2VyOiBzdHJpbmcsIGVuY3J5cHRlZEFuc3dlcjogc3RyaW5nKTogT2JzZXJ2YWJsZTxSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QoYXBpQmFzZVVybCArICcvdmVyaWZ5L2NhcHRjaGEnLCB7bm9uY2U6IG5vbmNlLCBhbnN3ZXI6IGFuc3dlciwgdmFsaWRhdGlvbjogZW5jcnlwdGVkQW5zd2VyfSwge30pO1xuICAgICAgfVxuXG4gICAgICBmZXRjaEF1ZGlvKGFwaUJhc2VVcmw6IHN0cmluZywgdmFsaWRhdGlvbjogc3RyaW5nKTogT2JzZXJ2YWJsZTxSZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QoYXBpQmFzZVVybCArICcvY2FwdGNoYS9hdWRpbycsIHt2YWxpZGF0aW9uOiB2YWxpZGF0aW9ufSwge30pO1xuICAgICAgfVxuICAgICovXG59XG4iXX0=