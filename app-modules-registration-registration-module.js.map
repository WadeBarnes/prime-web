{"version":3,"sources":["webpack:///./src/app/modules/registration/components/collection-notice/collection-notice.component.html","webpack:///./src/app/modules/registration/components/collection-notice/collection-notice.component.scss","webpack:///./src/app/modules/registration/components/collection-notice/collection-notice.component.ts","webpack:///./src/app/modules/registration/components/reg-login-mfa/reg-login-mfa.component.html","webpack:///./src/app/modules/registration/components/reg-login-mfa/reg-login-mfa.component.scss","webpack:///./src/app/modules/registration/components/reg-login-mfa/reg-login-mfa.component.ts","webpack:///./src/app/modules/registration/components/registration-container/registration-container.component.html","webpack:///./src/app/modules/registration/components/registration-container/registration-container.component.scss","webpack:///./src/app/modules/registration/components/registration-container/registration-container.component.ts","webpack:///./src/app/modules/registration/pages/bcsc-login/bcsc-login.component.html","webpack:///./src/app/modules/registration/pages/bcsc-login/bcsc-login.component.scss","webpack:///./src/app/modules/registration/pages/bcsc-login/bcsc-login.component.ts","webpack:///./src/app/modules/registration/pages/complete/reg-complete.component.html","webpack:///./src/app/modules/registration/pages/complete/reg-complete.component.scss","webpack:///./src/app/modules/registration/pages/complete/reg-complete.component.ts","webpack:///./src/app/modules/registration/pages/document-upload/document-upload.component.html","webpack:///./src/app/modules/registration/pages/document-upload/document-upload.component.scss","webpack:///./src/app/modules/registration/pages/document-upload/document-upload.component.ts","webpack:///./src/app/modules/registration/pages/id-proofing/id-proofing.component.html","webpack:///./src/app/modules/registration/pages/id-proofing/id-proofing.component.scss","webpack:///./src/app/modules/registration/pages/id-proofing/id-proofing.component.ts","webpack:///./src/app/modules/registration/pages/new-account/new-account.component.html","webpack:///./src/app/modules/registration/pages/new-account/new-account.component.scss","webpack:///./src/app/modules/registration/pages/new-account/new-account.component.ts","webpack:///./src/app/modules/registration/pages/profile/profile.component.html","webpack:///./src/app/modules/registration/pages/profile/profile.component.scss","webpack:///./src/app/modules/registration/pages/profile/profile.component.ts","webpack:///./src/app/modules/registration/pages/security/security.component.html","webpack:///./src/app/modules/registration/pages/security/security.component.scss","webpack:///./src/app/modules/registration/pages/security/security.component.ts","webpack:///./src/app/modules/registration/registration-page-routing.module.ts","webpack:///./src/app/modules/registration/registration-routing.module.ts","webpack:///./src/app/modules/registration/registration.module.ts"],"names":[],"mappings":";;;;;;;;;AAAA,45B;;;;;;;;;;;ACAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;ACAoF;AAC/B;AAEd;AAOvC;IAKE,mCAAoB,YAA4B,EAAU,MAAc;QAApD,iBAAY,GAAZ,YAAY,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IAE7E,4CAAQ,GAAR;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACnC,CAAC;IAED,6CAAS,GAAT,UAAU,QAAa;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnD,CAAC;IAED,4CAAQ,GAAR;QACE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;IACnC,CAAC;IAhBsB;QAAtB,+DAAS,CAAC,UAAU,CAAC;kCAAc,wDAAU;kEAAC;IAFpC,yBAAyB;QALrC,+DAAS,CAAC;YACT,QAAQ,EAAE,yBAAyB;;;SAGpC,CAAC;yCAMkC,kEAAc,EAAkB,sDAAM;OAL7D,yBAAyB,CAoBrC;IAAD,gCAAC;CAAA;AApBqC;;;;;;;;;;;;ACVtC,kgBAAkgB,kqG;;;;;;;;;;;ACAlgB,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA6D;AACR;AAEoB;AAGlC;AASvC;IAaE,8BAAoB,gBAAkC,EAAU,YAA4B,EAAU,MAAc;QAAhG,qBAAgB,GAAhB,gBAAgB,CAAkB;QAAU,iBAAY,GAAZ,YAAY,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAQ;QATpH,gBAAW,GAAG,IAAI,CAAC;QACnB,kBAAa,GAAG,KAAK,CAAC;QACtB,oBAAe,GAAG,KAAK,CAAC;QAExB,WAAM,GAAY,KAAK,CAAC;QACxB,WAAM,GAAY,KAAK,CAAC;QACxB,WAAM,GAAY,KAAK,CAAC;IAG+F,CAAC;IAExH,uCAAQ,GAAR;QACE;;;WAGG;IAEL,CAAC;IAED,sBAAI,4CAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;QACpC,CAAC;;;OAAA;IAED,wCAAS,GAAT,UAAU,QAA0B;QAClC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnD,CAAC;IAED,sCAAO,GAAP;QACE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC5B,CAAC;IAED,2CAAY,GAAZ;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED,wCAAS,GAAT;QACE,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED,0CAAW,GAAX;QACE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;IAClD,CAAC;IAED,uCAAQ,GAAR;QACE,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;QAC/B,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED,6CAAc,GAAd;QACE,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9C,MAAM,GAAG,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED,wCAAS,GAAT,UAAU,WAAmB;QAC3B,IAAM,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,KAAK,EAAG,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACtE,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;IACpE,CAAC;IAtEU,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;;;SAGhC,CAAC;yCAcsC,6EAAgB,EAAwB,kEAAc,EAAkB,sDAAM;OAbzG,oBAAoB,CAuEhC;IAAD,2BAAC;CAAA;AAvEgC;;;;;;;;;;;;ACfjC,0XAA0X,2MAA2M,YAAY,wLAAwL,UAAU,8H;;;;;;;;;;;ACAnxB,mB;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;GAEG;;;;;;;;;;AAG+C;AACgB;AAE3B;AAC6B;AACK;AAQzE;IAIE,wCAAoB,MAAc,EAAU,gBAAkC;QAA1D,WAAM,GAAN,MAAM,CAAQ;QAAU,qBAAgB,GAAhB,gBAAgB,CAAkB;QAFvE,eAAU,GAAY,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IAEe,CAAC;IAEpF,iDAAQ,GAAR;QAAA,iBAcC;QAbC,IAAI,CAAC,aAAa,GAAG,4EAAU,CAAC,GAAG,CAAC,WAAC;YACnC,MAAM,CAAC;gBACL,KAAK,EAAE,KAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC;gBACvC,KAAK,EAAE,CAAC,CAAC,IAAI;aACd,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,yDAAyD;QACzD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAC;YAC/B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,cAAI;gBACjD,MAAM,CAAC,IAAI,CAAC,KAAK,KAAK,iBAAiB,CAAC;YAC1C,CAAC,CAAC;QACJ,CAAC;IACH,CAAC;IAED,sBAAI,sDAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;QACpC,CAAC;;;OAAA;IAID;;;;;OAKG;IACH,4DAAmB,GAAnB,UAAoB,SAAiB;QACnC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAA/B,CAA+B,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAClF,CAAC;IAED,oDAAW,GAAX;QACE,IAAI,MAAM,GAAY,KAAK,CAAC;QAE5B,cAAc;QACd,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,mBAAmB,CAAC,CAAC,CAAC;YAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW;gBACpF,IAAI,CAAC,UAAU,CAAC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ;gBAC3F,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK;gBAC1F,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBACxB,MAAM,GAAG,IAAI,CAAC;YAClB,CAAC;QACH,CAAC;QAED,sBAAsB;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,2BAA2B,CAAC,CAAC,CAAC;YACpD,sEAAsE;YACtE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,IAAI,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAC;gBAC5E,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,EAAC;gBACjE,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;QACH,CAAC;QAED,wBAAwB;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,oBAAoB,CAAC,CAAC,CAAC;YAE7C,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,EAAC;gBACxI,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;YAED,0CAA0C;YAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe;gBACjG,IAAI,CAAC,UAAU,CAAC,eAAe;gBAChC,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,CAChG,CAAC,CAAC,CAAC;gBACD,yEAAyE;gBACzE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;oBACjC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC;wBACtC,MAAM,GAAG,IAAI,CAAC;oBAChB,CAAC;gBACH,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,GAAG,IAAI,CAAC;gBAChB,CAAC;YACH,CAAC;QACH,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,iDAAQ,GAAR;QAAA,iBAmBC;QAlBC,4BAA4B;QAC5B,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAE,WAAC;YACvC,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAE,CAAC,CAAC,KAAK,CAAE,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,2BAA2B;QAC3B,EAAE,CAAC,CAAE,CAAC,CAAC,KAAK,GAAI,CAAC,CAAC,CAAC;YACjB,GAAG,GAAG,CAAC,CAAC;QACV,CAAC;QAED,qBAAqB;QACrB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACxC,iBAAiB;YACjB,IAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAE,GAAG,CAAE,CAAC;YACxD,IAAM,MAAM,GAAG,CAAC,YAAY,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC,EAAG,YAAY,CAAE,CAAC;YAEnG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,CAAE,CAAE,CAAC;QAC9E,CAAC;IACH,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;MAqBE;IACF,+CAAM,GAAN;QACE,IAAI,GAAG,GAAG,iCAAiC,CAAC;QAE5C,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAC;YAC/B,GAAG,GAAG,sBAAsB,CAAC;QAC/B,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9B,CAAC;IA9IU,8BAA8B;QAL1C,+DAAS,CAAC;YACT,QAAQ,EAAE,8BAA8B;;;SAGzC,CAAC;yCAK4B,sDAAM,EAA4B,6EAAgB;OAJnE,8BAA8B,CA+I1C;IAAD,qCAAC;CAAA;AA/I0C;;;;;;;;;;;;AClB3C,mzD;;;;;;;;;;;ACAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACuB;AAGlC;AAOvC;IAEE,4BAAqB,MAAc,EAAU,gBAAkC;QAA1D,WAAM,GAAN,MAAM,CAAQ;QAAU,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAI,CAAC;IAEpF,qCAAQ,GAAR;IACA,CAAC;IAED,sBAAI,0CAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;QACpC,CAAC;;;OAAA;IAED,0CAAa,GAAb,UAAc,IAAI;QAChB,yEAAyE;QACzE,oDAAoD;QACpD,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAE7D,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QACnD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QAC7C,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QACtD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QAC7C,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAChD,CAAC;IAED;;;;OAIG;IACH,qCAAQ,GAAR,UAAU,KAAa;QACrB,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAE,GAAG,CAAE,CAAC;QAC/C,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAG,GAAG,GAAG,CAAC,CAAE,CAAC;QACnD,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAED,qCAAQ,GAAR;QAEE,wFAAwF;QACxF,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAE1B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,CAAC,mBAAmB,CAAC,CAAE,CAAC;IAChD,CAAC;IAxCU,kBAAkB;QAL9B,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;;SAG7B,CAAC;yCAG6B,sDAAM,EAA4B,6EAAgB;OAFpE,kBAAkB,CAyC9B;IAAD,yBAAC;CAAA;AAzC8B;;;;;;;;;;;;ACX/B,+dAA+d,wBAAwB,w2B;;;;;;;;;;;ACAvf,mB;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AAEuB;AASzE;IAEE,8BAAoB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAI,CAAC;IAE3D,uCAAQ,GAAR;IACA,CAAC;IAED,sBAAI,4CAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;QACpC,CAAC;;;OAAA;IATU,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;;;SAG3B,CAAC;yCAGsC,6EAAgB;OAF3C,oBAAoB,CAWhC;IAAD,2BAAC;CAAA;AAXgC;;;;;;;;;;;;ACXjC,4iF;;;;;;;;;;;ACAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;ACA4D;AACa;AAImB;AAM5F;IAIE,iCAAoB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAI,CAAC;IAE3D,0CAAQ,GAAR;IACA,CAAC;IAED,sBAAI,+CAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;QACpC,CAAC;;;OAAA;IACD,6CAAW,GAAX,UAAY,GAAY;QACtB,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,GAAK,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACpF,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;IAd0B;QAA1B,+DAAS,CAAC,cAAc,CAAC;kCAAe,iGAAqB;iEAAC;IAFpD,uBAAuB;QALnC,+DAAS,CAAC;YACT,QAAQ,EAAE,uBAAuB;;;SAGlC,CAAC;yCAKsC,6EAAgB;OAJ3C,uBAAuB,CAiBnC;IAAD,8BAAC;CAAA;AAjBmC;;;;;;;;;;;;ACXpC,svBAAsvB,iBAAiB,qBAAqB,kBAAkB,qBAAqB,kBAAkB,uwDAAuwD,qIAAqI,klC;;;;;;;;;;;ACAjuF,yBAAyB,iBAAiB,EAAE,eAAe,gBAAgB,eAAe,EAAE,YAAY,eAAe,gBAAgB,EAAE,aAAa,eAAe,EAAE,gBAAgB,qBAAqB,uBAAuB,gBAAgB,EAAE,eAAe,eAAe,iBAAiB,gBAAgB,8BAA8B,EAAE,gBAAgB,eAAe,iBAAiB,uBAAuB,iBAAiB,8BAA8B,EAAE,G;;;;;;;;;;;;;;;;;;;;;;;;;;ACA1Z;AACX;AACkC;AAQzE;IAEE,6BAAqB,MAAc,EAAU,gBAAkC;QAA1D,WAAM,GAAN,MAAM,CAAQ;QAAU,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAI,CAAC;IAEpF,sCAAQ,GAAR;IACA,CAAC;IAED,sBAAI,2CAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;QACpC,CAAC;;;OAAA;IAED;;;;OAIG;IACH,sCAAQ,GAAR,UAAU,KAAa;QACrB,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAE,GAAG,CAAE,CAAC;QAC/C,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAG,GAAG,GAAG,CAAC,CAAE,CAAC;QACnD,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAED,sBAAI,yCAAQ;aAAZ;YACE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;QACvC,CAAC;;;OAAA;IAxBU,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;;;SAG5B,CAAC;yCAG6B,sDAAM,EAA4B,6EAAgB;OAFpE,mBAAmB,CA0B/B;IAAD,0BAAC;CAAA;AA1B+B;;;;;;;;;;;;ACVhC,giCAAgiC,iBAAiB,4lBAA4lB,YAAY,gE;;;;;;;;;;;ACAzpD,yBAAyB,iBAAiB,EAAE,G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAiB;AACtB;AACoC;AAClB;AACI;AACA;AAO7D;IAEE,6BAAqB,MAAc,EAAU,gBAAkC,EAAU,MAAc;QAAlF,WAAM,GAAN,MAAM,CAAQ;QAAU,qBAAgB,GAAhB,gBAAgB,CAAkB;QAAU,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IAE5G,sCAAQ,GAAR;IACA,CAAC;IAED;;OAEG;IACH,iDAAmB,GAAnB;QACE,oCAAoC;QACpC,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,IAAI,2DAAM,EAAE,CAAC;QAC1C,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,+DAAO,EAAE,CAAC;QACnD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QACnD,iGAAiG;QAEjG,qBAAqB;QACrB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAC,KAAK,EAAE,aAAa,EAAC,CAAC,CAAC;QACxC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,CAAC,IAAI,CAAC,YAAY,CAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAE,GAAG,GAAG,GAAG,SAAS,CAAC,CAAE,CAAC;IACnF,CAAC;IAED;;OAEG;IACH,gDAAkB,GAAlB;QACE,qBAAqB;QACrB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,CAAC,IAAI,CAAC,YAAY,CAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAE,GAAG,GAAG,GAAG,aAAa,CAAC,CAAE,CAAC;IACvF,CAAC;IAED,uCAAS,GAAT;QACE,oCAAoC;QACpC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAC,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,CAAC,IAAI,CAAC,YAAY,CAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAE,GAAG,GAAG,GAAG,YAAY,CAAC,CAAE,CAAC;IACtF,CAAC;IACD;;;;OAIG;IACK,0CAAY,GAApB,UAAsB,GAAW;QAC/B,iBAAiB;QACjB,IAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAE,GAAG,CAAE,CAAC;QACxD,MAAM,CAAC,CAAC,YAAY,KAAK,CAAC,CAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC,EAAG,YAAY,CAAE,CAAC;IAC7F,CAAC;IA5CU,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,mBAAmB;;;SAG9B,CAAC;yCAG6B,sDAAM,EAA4B,6EAAgB,EAAkB,+DAAM;OAF5F,mBAAmB,CA6C/B;IAAD,0BAAC;CAAA;AA7C+B;;;;;;;;;;;;ACZhC,+tCAA+tC,65GAA65G,qBAAqB,kmB;;;;;;;;;;;ACAjpJ,mB;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACuB;AAIzE,IAAM,MAAM,GAAG,IAAI,CAAC;AAOpB;IAQE,0BAAoB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAN9C,cAAS,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QAClH,eAAU,GAAY,KAAK,CAAC;QAC5B,mBAAc,GAAY,KAAK,CAAC;QACvC,6FAA6F;QACtF,aAAQ,GAAG,KAAK,CAAC;IAEkC,CAAC;IAE3D,mCAAQ,GAAR;QACE,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;IAChD,CAAC;IAED,sBAAI,wCAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;QACpC,CAAC;;;OAAA;IAID,uCAAY,GAAZ;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,2BAA4B,CAAC,EAAC;YACjD,oCAAoC;YACpC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IA1BU,gBAAgB;QAL5B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;yCASsC,6EAAgB;OAR3C,gBAAgB,CA2B5B;IAAD,uBAAC;CAAA;AA3B4B;;;;;;;;;;;;ACZ7B,y2IAAy2I,qBAAqB,wyC;;;;;;;;;;;ACA93I,6BAA6B,eAAe,gBAAgB,gBAAgB,8BAA8B,EAAE,gBAAgB,eAAe,gBAAgB,uBAAuB,iBAAiB,8BAA8B,EAAE,G;;;;;;;;;;;;;;;;;;;;;;;;;ACAjL;AACuB;AAGzE,IAAM,MAAM,GAAG,IAAI,CAAC;AAOpB;IAIE,2BAAoB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAF9C,cAAS,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAE/D,CAAC;IAE3D,oCAAQ,GAAR;QACE,IAAI,CAAC,UAAU,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC1C,IAAI,CAAC,UAAU,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC1C,IAAI,CAAC,UAAU,CAAC,iBAAiB,GAAG,KAAK,CAAC;IAC5C,CAAC;IAED,sBAAI,yCAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;QACpC,CAAC;;;OAAA;IAED,sBAAI,uCAAQ;aAAZ;YACE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;QACvC,CAAC;;;OAAA;IAED,wCAAY,GAAZ;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC,CAAC;YACjD,oCAAoC;YACpC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;IACH,CAAC;IAzBU,iBAAiB;QAL7B,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;;;SAG3B,CAAC;yCAKsC,6EAAgB;OAJ3C,iBAAiB,CA0B7B;IAAD,wBAAC;CAAA;AA1B6B;;;;;;;;;;;;;ACV9B;AAAA;AAAA;AAAA;AAAA;AAAmE;AACuB;AACpB;AAE/D,IAAM,UAAU,GAAW;IAChC;QACE,IAAI,EAAE,SAAS;QACf,SAAS,EAAE,iFAAgB;KAC5B;IACD;QACE,IAAI,EAAE,iBAAiB;QACvB,SAAS,EAAE,wGAAuB;KACnC;IACD;QACE,IAAI,EAAE,UAAU;QAChB,SAAS,EAAE,oFAAiB;KAC7B;CACF,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBuC;AACY;AACyB;AACA;AACD;AACuC;AACtD;AACa;AAEpE,IAAM,MAAM,GAAW;IAC5B;QACE,IAAI,EAAE,aAAa;QACnB,SAAS,EAAE,4FAAmB;KAC/B;IACD;QACE,IAAI,EAAE,aAAa;QACnB,SAAS,EAAE,4FAAmB;KAC/B;IACD;QACE,IAAI,EAAE,uBAAuB;QAC7B,SAAS,EAAE,2FAAoB;KAChC;IACD;QACE,IAAI,EAAE,YAAY;QAClB,SAAS,EAAE,yFAAkB;KAC9B;IACD;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,kIAA8B;QACzC,QAAQ,EAAE,4EAAU;KACrB;IACD;QACE,IAAI,EAAE,IAAI;QACV,UAAU,EAAE,WAAW;KACxB;CACA,CAAC;AAMJ;IAAA;IAAyC,CAAC;IAA7B,yBAAyB;QAJrC,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,yBAAyB,CAAI;IAAD,gCAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCG;AACM;AACyB;AACH;AACuB;AACpB;AACM;AAE/B;AACiC;AACH;AACyC;AAC3E;AAC+C;AACa;AACnD;AACuB;AAwB3E;IAAA;IAAkC,CAAC;IAAtB,kBAAkB;QArB9B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,4DAAU;gBACV,2DAAW;gBACX,sFAAyB;gBACzB,kEAAc;aACf;YACD,YAAY,EAAE;gBACZ,4FAAmB;gBACnB,iFAAgB;gBAChB,wGAAuB;gBACvB,oFAAiB;gBACjB,4FAAmB;gBACnB,2FAAoB;gBACpB,mIAA8B;gBAC9B,uGAAoB;gBACpB,0FAAkB;gBAClB,oHAAyB;aAC1B;SACF,CAAC;OACW,kBAAkB,CAAI;IAAD,yBAAC;CAAA;AAAJ","file":"app-modules-registration-registration-module.js","sourcesContent":["module.exports = \"<ng-template #template>\\n\\n  <div class=\\\"modal-header\\\">\\n    <h2  class=\\\"modal-title\\\">Collection Notice</h2>\\n  </div>\\n\\n  <div class=\\\"modal-body\\\">\\n    <label>\\n      The PRIME application collects personal information for the purposes of verification to authorize your access to PharmaNet. Your personal information is collected by the Ministry of Health under section 26(c) of the Freedom of Information and Protection of Privacy Act. Should you have any questions about the collection of this personal information, please contact PRIME@gov.bc.ca.\\n    </label>\\n  </div>\\n\\n  <div class=\\\"modal-footer\\\">\\n\\n    <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"disagree()\\\" tabindex=\\\"1\\\">\\n      Disagree\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"modalRef.hide()\\\" tabindex=\\\"1\\\">\\n      I Agree\\n    </button>\\n\\n  </div>\\n\\n</ng-template>\\n\\n\"","module.exports = \"\"","import {Component, OnInit, TemplateRef, ElementRef, ViewChild} from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'prime-collection-notice',\n  templateUrl: './collection-notice.component.html',\n  styleUrls: ['./collection-notice.component.scss']\n})\nexport class CollectionNoticeComponent implements OnInit {\n  // Reference firstNameInput variable inside Component\n  @ViewChild('template') templateRef: ElementRef;\n  modalRef: BsModalRef;\n\n  constructor(private modalService: BsModalService, private router: Router) { }\n\n  ngOnInit() {\n    this.openModal(this.templateRef);\n  }\n\n  openModal(template: any) {\n    this.modalRef = this.modalService.show(template);\n  }\n\n  disagree() {\n    this.modalRef.hide();\n    this.router.navigate(['/login']);\n  }\n\n}\n","module.exports = \"<button type=\\\"button\\\" class=\\\"btn btn-primary mx-2\\\" (click)=\\\"openModal(template)\\\">\\n  Login\\n</button>\\n<ng-template #template>\\n  <div class=\\\"modal-header\\\">\\n    <h4 *ngIf=\\\"showOptions\\\" class=\\\"modal-title\\\">Select a method to verify yourself</h4>\\n    <h4 *ngIf=\\\"showVerifyPIN\\\" class=\\\"modal-title\\\">Enter your Verification code</h4>\\n\\n    <button type=\\\"button\\\" class=\\\"close pull-right\\\" aria-label=\\\"Close\\\" (click)=\\\"modalRef.hide()\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n  </div>\\n\\n  <div *ngIf=\\\"showOptions\\\" class=\\\"modal-body\\\">\\n    <form>\\n      <div>\\n        <input type=\\\"radio\\\" name=\\\"mfaOption\\\" value=\\\"sms\\\" [(ngModel)]=\\\"mfaSms\\\" />\\n        <label>SMS/Text</label>\\n        <label class=\\\"has-float-label\\\">\\n          <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"regMFAPhone\\\" name=\\\"regMFAPhone\\\" [ngModel]=\\\"this.registrant.mfaOptionSMSPhone ? this.maskPhone(this.registrant?.mfaOptionSMSPhone) : null\\\" placeholder=\\\" \\\" disabled>\\n          <span>Phone</span>\\n        </label>\\n      </div>\\n\\n      <hr>\\n\\n      <div>\\n        <input type=\\\"radio\\\" name=\\\"mfaOption\\\" value=\\\"key\\\" [(ngModel)]=\\\"mfaKey\\\" />\\n        <label>Physical Security Key</label>\\n        <label class=\\\"has-float-label\\\">\\n          <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" placeholder=\\\" \\\" disabled>\\n          <span>Instructions to follow</span>\\n        </label>\\n      </div>\\n\\n      <hr>\\n\\n      <div>\\n        <input type=\\\"radio\\\" name=\\\"mfaOption\\\" value=\\\"app\\\" [(ngModel)]=\\\"mfaApp\\\" >\\n        <label>Mobile App Authentication</label>\\n      </div>\\n      <img class=\\\"img-thumbnail\\\" src=\\\"assets/mobile_app_icon_android.png\\\" alt=\\\"Generic placeholder image\\\">\\n      <img class=\\\"img-thumbnail\\\" src=\\\"assets/mobile_app_icon_apple.png\\\" alt=\\\"Generic placeholder image\\\">\\n      <img class=\\\"img-thumbnail\\\" src=\\\"assets/mobile_app_icon_windows.png\\\" alt=\\\"Generic placeholder image\\\">\\n    </form>\\n  </div>\\n\\n  <div *ngIf=\\\"showVerifyPIN\\\" class=\\\"modal-body\\\">\\n    <form>\\n      <div>\\n        <label class=\\\"has-float-label\\\">\\n          <input type=\\\"text\\\" id=\\\"pin\\\" name=\\\"pin\\\" class=\\\"form-control prime-input-large\\\" [(ngModel)]=\\\"pin\\\" placeholder=\\\" \\\">\\n          <span>Verification code</span>\\n        </label>\\n      </div>\\n\\n      <div><a href=\\\"javascript:void(0)\\\" (click)=\\\"chooseOption()\\\">Try a different method</a>\\n      </div>\\n    </form>\\n  </div>\\n\\n  <div *ngIf=\\\"showVerifiedPIN\\\" class=\\\"modal-body\\\">\\n    <div style=\\\"text-align:center\\\">\\n      <i class=\\\"fa fa-check-circle text-success fa-3x\\\" aria-hidden=\\\"true\\\"></i>\\n      <h1>Code Verified</h1>\\n      <span>To complete your account please continue to Identity Proofing</span>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"modal-footer\\\">\\n\\n    <button *ngIf=\\\"!showVerifiedPIN\\\" type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"modalRef.hide()\\\" tabindex=\\\"1\\\">\\n      Cancel\\n    </button>\\n    <button *ngIf=\\\"showVerifiedPIN\\\" type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"modalRef.hide()\\\" tabindex=\\\"1\\\">\\n      Later\\n    </button>\\n\\n    <button *ngIf=\\\"showOptions\\\" type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"sendPIN()\\\" tabindex=\\\"1\\\" [disabled]=\\\"!mfaOptionCheck()\\\">\\n      Send Verification code\\n    </button>\\n    <button *ngIf=\\\"showVerifyPIN\\\" type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"verifyPIN()\\\" tabindex=\\\"1\\\" [disabled]=\\\"!pinCheck()\\\">\\n      Verify Verification code\\n    </button>\\n    <button *ngIf=\\\"showVerifiedPIN\\\" type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"verifiedPIN()\\\" tabindex=\\\"1\\\">\\n      Identity Proofing\\n    </button>\\n\\n  </div>\\n\\n</ng-template>\\n\"","module.exports = \"\"","import {Component, OnInit, TemplateRef} from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport {PrimeDataService} from '../../../../services/prime-data.service';\nimport {Person} from '../../../../models/person.model';\nimport { cloneDeep } from 'lodash';\nimport {Router} from '@angular/router';\n\n\n\n@Component({\n  selector: 'prime-reg-login-mfa',\n  templateUrl: './reg-login-mfa.component.html',\n  styleUrls: ['./reg-login-mfa.component.scss']\n})\nexport class RegLoginMfaComponent implements OnInit {\n\n  modalRef: BsModalRef;\n  private _user: Person;\n  showOptions = true;\n  showVerifyPIN = false;\n  showVerifiedPIN = false;\n  pin: string;\n  mfaSms: boolean = false;\n  mfaKey: boolean = false;\n  mfaApp: boolean = false;\n  maskedPhone: String;\n\n  constructor(private primeDataService: PrimeDataService, private modalService: BsModalService, private router: Router){ }\n\n  ngOnInit() {\n    /*if (registrant.mfaOptionSMSPhone) {\n      console.log(this.maskPhone('2504741234');\n      this.maskedPhone = this.maskPhone(this.registrant.mfaOptionSMSPhone);\n    }*/\n\n  }\n\n  get registrant(): Person {\n    return this.primeDataService.user;\n  }\n\n  openModal(template: TemplateRef<any>) {\n    this.modalRef = this.modalService.show(template);\n  }\n\n  sendPIN() {\n    this.showOptions = false;\n    this.showVerifyPIN = true;\n  }\n\n  chooseOption() {\n    this.showOptions = true;\n    this.showVerifyPIN = false;\n  }\n\n  verifyPIN() {\n    this.showVerifyPIN = false;\n    this.showVerifiedPIN = true;\n  }\n\n  verifiedPIN() {\n    this.modalRef.hide();\n    this.router.navigate(['/register/id-proofing']);\n  }\n\n  pinCheck() {\n    let result = false;\n    if (this.pin != null) {\n      result = this.pin.length > 0;\n    }\n    return result;\n  }\n\n  mfaOptionCheck() {\n    let result = false;\n    if (this.mfaSms || this.mfaKey || this.mfaApp) {\n      result = true;\n    }\n    return result;\n  }\n\n  maskPhone(phoneNumber: String) {\n    const noBrackets = phoneNumber.replace(/\\(/g , '').replace(/\\)/g, '');\n    return '**' + noBrackets.substr(2, noBrackets.length - 4) + '***';\n  }\n}\n","module.exports = \"<prime-core-breadcrumb>\\n  <prime-wizard-progress-bar-simple\\n    class='d-none d-lg-block p-md-2 col-md-4 offset-md-4'\\n    center\\n    [progressSteps]=\\\"progressSteps\\\"\\n    [allowLinks]=\\\"allowLinks\\\">\\n  </prime-wizard-progress-bar-simple>\\n\\n  <span right class='d-flex'>\\n    <div class='controls'>\\n      <div *ngIf=\\\"router.url != '/register/security';then continueButton else submitButton\\\"></div>\\n      <ng-template #continueButton>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary mx-2\\\" (click)=\\\"continue()\\\" [disabled]=\\\"!canContinue()\\\">{{'Continue'}}</button>\\n      </ng-template>\\n      <ng-template #submitButton>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary mx-2\\\" (click)=\\\"submit()\\\" [disabled]=\\\"!canContinue()\\\">{{'Submit'}}</button>\\n      </ng-template>\\n\\n\\n    </div>\\n  </span>\\n\\n</prime-core-breadcrumb>\\n\\n\\n<router-outlet></router-outlet>\\n\"","module.exports = \"\"","/**\n * NOTE:  We may want to use this module for applicant, modify to be prime-breadcrumb-container\n */\n\n\nimport { Component, OnInit } from '@angular/core';\nimport {pageRoutes} from '../../registration-page-routing.module';\nimport {WizardProgressItem} from '../../../core/components/wizard-progress-bar/wizard-progress-bar.component';\nimport {Router} from '@angular/router';\nimport {environment} from '../../../../../environments/environment';\nimport {PrimeDataService} from \"../../../../services/prime-data.service\";\nimport {Person} from \"../../../../models/person.model\";\n\n@Component({\n  selector: 'prime-registration-container',\n  templateUrl: './registration-container.component.html',\n  styleUrls: ['./registration-container.component.scss']\n})\nexport class RegistrationContainerComponent implements OnInit {\n\n  public allowLinks: boolean = !environment.production ? true : false;\n\n  constructor( public router: Router, private primeDataService: PrimeDataService ) { }\n\n  ngOnInit() {\n    this.progressSteps = pageRoutes.map(x => {\n      return {\n        title: this.convertRouteToTitle(x.path),\n        route: x.path,\n      };\n    });\n\n    // Disable the document upload page if user has used BCSC\n    if (this.registrant.pairingCode){\n      this.progressSteps = this.progressSteps.filter(step => {\n        return step.route !== 'document-upload';\n      })\n    }\n  }\n\n  get registrant(): Person {\n    return this.primeDataService.user;\n  }\n\n  progressSteps: WizardProgressItem[];\n\n  /**\n   * Converts a lower case string of a route in a user readable title.  e.g.\n   * \"document-upload\" -> \"Document Upload\"\n   *\n   * @param {string} routePath\n   */\n  convertRouteToTitle(routePath: string): string{\n    return routePath.split('-').map(x => x[0].toUpperCase() + x.slice(1)).join(' ');\n  }\n\n  canContinue() {\n    let retVal: boolean = false;\n\n    //Profile Page\n    if (this.router.url === '/register/profile') {\n      if (this.registrant.lastName && this.registrant.firstName && this.registrant.dateOfBirth &&\n          this.registrant.address && this.registrant.address.city && this.registrant.address.province &&\n          this.registrant.address.postal && this.registrant.address.country && this.registrant.phone &&\n          this.registrant.email) {\n          retVal = true;\n      }\n    }\n\n    //Document Upload Page\n    if (this.router.url === '/register/document-upload') {\n      // User must select at least one document type and provide expiry date\n      if (this.registrant.hasDriversLicense && this.registrant.driverLicenseExpiry){\n        return true;\n      }\n\n      if (this.registrant.hasPassport && this.registrant.passportExpiry){\n        return true;\n      }\n    }\n\n    //Document Security Page\n    if (this.router.url === '/register/security') {\n\n      if (this.registrant.pairingCode && this.registrant.securityAnswer1 && this.registrant.securityAnswer2 && this.registrant.securityAnswer3){\n        return true;\n      }\n\n      //User must select at least one mfa option\n      if (this.registrant.primeUserId && this.registrant.securityAnswer1 && this.registrant.securityAnswer2 &&\n          this.registrant.securityAnswer3 &&\n         (this.registrant.mfaOptionSMS || this.registrant.mfaOptionKey || this.registrant.mfaOptionApp)\n      ) {\n        //If the user selects the phone mfa option, they must have a phone number\n        if (this.registrant.mfaOptionSMS) {\n          if (this.registrant.mfaOptionSMSPhone) {\n            retVal = true;\n          }\n        } else {\n          retVal = true;\n        }\n      }\n    }\n    return retVal;\n  }\n\n  /**\n   * Navigates through the pages\n   */\n  continue() {\n    // Find current index of URL\n    let idx = this.progressSteps.findIndex( x => {\n      return this.router.url.endsWith( x.route );\n    });\n\n    // Case were route is blank\n    if ( -1 === idx ) {\n      idx = 0;\n    }\n\n    // Navigate next page\n    if (this.progressSteps.length > idx + 1) {\n      // Get URL prefix\n      const idxEndPrefix = this.router.url.lastIndexOf( '/' );\n      const prefix = (idxEndPrefix === 0 ) ? this.router.url : this.router.url.slice( 0 , idxEndPrefix );\n\n      this.router.navigate( [prefix + '/' + this.progressSteps[idx + 1].route ] );\n    }\n  }\n\n  /*\n  //KPS Back button was removed from registration process so this code is no longer needed\n  back() {\n    let url;\n\n    // Find current index of URL\n    let idx = this.progressSteps.findIndex( x => {\n      return this.router.url.endsWith( x.route ); } );\n\n    // Case were route is blank\n    if ( -1 === idx ) {\n      idx = 0;\n    }\n\n    // Navigate previous page\n      // Get URL prefix\n      const idxEndPrefix = this.router.url.lastIndexOf( '/' );\n      const prefix = (idxEndPrefix === 0 ) ? this.router.url : this.router.url.slice( 0 , idxEndPrefix );\n\n      this.router.navigate( [prefix + '/' + this.progressSteps[idx - 1].route ] );\n  }\n  */\n  submit() {\n    let url = '/register/registration-complete';\n\n    if (this.registrant.pairingCode){\n      url = 'register/id-proofing';\n    }\n\n    this.router.navigate([url]);\n  }\n}\n","module.exports = \"\\n<prime-alert type='danger'>\\n  Please note this screen is an example of the BC Services Card Identity Proofing and Authentication online services.\\n  BC Services Card allows card holders to acquire an electronic credential through an online process. This credential\\n  can be used to access Province of BC online services. For the purpose of this prototype the BC Services Card process\\n  will not be presented. For more information please visit:\\n  <a href=\\\"https://www2.gov.bc.ca/gov/content/governments/services-for-government/information-management-technology/identity-and-authentication-services/bc-services-card-authentication-service\\\">https://www2.gov.bc.ca/gov/content/governments/services-for-government/information-management-technology/identity-and-authentication-services/bc-services-card-authentication-service</a>\\n\\n</prime-alert>\\n\\n  <img class=\\\"img-responsive\\\" src=\\\"assets/bcsc_login_page.png\\\" alt=\\\"BC Services Card Login Page\\\">\\n  <!-- <h3>1. Open the BC Services Card app on your mobile device</h3>\\n  <h3>2. Choose to pair with another device and enter this pairing code. It's only used once, you don't need to remember it.<p></p>\\n  <h3>3. Return to this website to enter pairing code and continue.</h3>\\n\\n  <form>\\n    <div>\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"regLastName\\\" name=\\\"regPairingCode\\\" [ngModel]=\\\"registrant.pairingCode\\\" (ngModelChange)='onPairingCode($event)' placeholder=\\\" \\\">\\n        <span>Pairing Code</span>\\n      </label>\\n    </div> -->\\n    <div class=\\\"card-footer d-flex justify-content-between\\\">\\n      <button type=\\\"button\\\"\\n              class=\\\"h-25 btn btn-primary btn-lg btn-block\\\"\\n              (click)=\\\"continue()\\\">Continue</button>\\n    </div>\\n  <!-- </form> -->\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport {PrimeDataService} from '../../../../services/prime-data.service';\nimport { Person } from '../../../../models/person.model';\nimport { cloneDeep } from 'lodash';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'prime-bcsc-login',\n  templateUrl: './bcsc-login.component.html',\n  styleUrls: ['./bcsc-login.component.scss']\n})\nexport class BcscLoginComponent implements OnInit {\n\n  constructor( private router: Router, private primeDataService: PrimeDataService) { }\n\n  ngOnInit() {\n  }\n\n  get registrant(): Person {\n    return this.primeDataService.user;\n  }\n\n  onPairingCode(code){\n    // If user sets pairing code, we pull up dummy data from a generated user\n    // This is us simulating getting data from a backend\n    this.primeDataService.user = this.primeDataService.people[0];\n\n    this.primeDataService.user.organizationAccess = [];\n    this.primeDataService.user.phone = undefined;\n    this.primeDataService.user.phoneExtension = undefined;\n    this.primeDataService.user.email = undefined;\n    this.primeDataService.user.pairingCode = code;\n  }\n\n  /**\n   * Returns the URL with appropriate prefix\n   * @param {string} route\n   * @returns {string}\n   */\n  getRoute( route: string ): string {\n    const idx = this.router.url.lastIndexOf( '/' );\n    const prefix = this.router.url.slice(0 , idx + 1 );\n    return prefix + route;\n  }\n\n  continue() {\n\n    // Simulate a pairingCode has been added, as that's how we consider BCSC to be completed\n    this.onPairingCode('123');\n\n    this.router.navigate( ['/register/profile'] );\n  }\n}\n","module.exports = \"<prime-page-framework>\\n\\n  <h2 id=\\\"regInfo\\\">Account Created Successfully</h2>\\n  <!--\\n  <div>\\n    <label class=\\\"has-float-label\\\">\\n      <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"regCompleteRegID\\\" name=\\\"regCompleteRegID\\\" [ngModel]=\\\"registrant.primeUserId\\\" placeholder=\\\" \\\" disabled>\\n      <span>User ID</span>\\n    </label>\\n  </div>\\n  -->\\n  Your registration account has been created successfully. Your User ID is <b>{{registrant.primeUserId}}</b>\\n\\n\\n  <h2 id='contactInfo'>Complete Identity Proofing</h2>\\n  Please log in to complete identity proofing. This is required for you to finish the registration process and obtain a Ministry of Health login credential.\\n  <form >\\n    <div>\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"regCompleteUserID\\\" name=\\\"regCompleteUserID\\\" [(ngModel)]=\\\"registrant.primeUserId\\\" [disabled]=\\\"true\\\" placeholder=\\\" \\\">\\n        <span>User ID</span>\\n      </label>\\n\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"password\\\" class=\\\"form-control prime-input-large\\\" id=\\\"regCompletePW\\\" name=\\\"regCompletePW\\\" placeholder=\\\" \\\">\\n        <span>Password</span>\\n      </label>\\n      <prime-reg-login-mfa>\\n      </prime-reg-login-mfa>\\n    </div>\\n  </form>\\n</prime-page-framework>\\n\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport {Person} from '../../../../models/person.model';\nimport {PrimeDataService} from '../../../../services/prime-data.service';\nimport { cloneDeep } from 'lodash';\n\n\n@Component({\n  selector: 'prime-complete',\n  templateUrl: './reg-complete.component.html',\n  styleUrls: ['./reg-complete.component.scss']\n})\nexport class RegCompleteComponent implements OnInit {\n\n  constructor(private primeDataService: PrimeDataService) { }\n\n  ngOnInit() {\n  }\n\n  get registrant(): Person {\n    return this.primeDataService.user;\n  }\n\n}\n","module.exports = \"<prime-page-framework>\\n  <h2 class='prime-title' id=\\\"regDocUp\\\">Identity Documents</h2>\\n  <div>Prior to identity-proofing, please upload the front and back of a valid government-issued photo ID.\\n  </div>\\n\\n\\n  <div class=\\\"row mt-4\\\">\\n    <div class=\\\"col-6 mt-4\\\">\\n      <div class=''>\\n        <span>\\n          <input type=\\\"checkbox\\\" id=\\\"dl\\\" name=\\\"dl\\\" [(ngModel)]=\\\"registrant.hasDriversLicense\\\"/>\\n          <label for=\\\"dl\\\">Driver's Licence</label>\\n        </span>\\n        <prime-datepicker *ngIf='registrant.hasDriversLicense'\\n                          [(date)]='registrant.driverLicenseExpiry'\\n                          id=\\\"dlExpiry\\\"\\n                          name=\\\"dlExpiry\\\"\\n                          placeholder=\\\" \\\"\\n                          dateFormat=\\\"yyyy/mm/dd\\\"\\n                          labelText=\\\"Licence Expiry\\\"\\n                          class=''\\n                          tabindex=\\\"1\\\"></prime-datepicker>\\n\\n\\n      </div>\\n\\n      <div class=''>\\n        <input type=\\\"checkbox\\\" id=\\\"passport\\\" name=\\\"passport\\\" [(ngModel)]=\\\"registrant.hasPassport\\\"/>\\n        <label for=\\\"passport\\\">Passport</label>\\n        <prime-datepicker *ngIf='registrant.hasPassport'\\n                          [(date)]='registrant.passportExpiry'\\n                          id=\\\"passportExpiry\\\"\\n                          name=\\\"passportExpiry\\\"\\n                          placeholder=\\\" \\\"\\n                          dateFormat=\\\"yyyy/mm/dd\\\"\\n                          labelText=\\\"Licence Expiry\\\"\\n                          class=''\\n                          tabindex=\\\"1\\\"></prime-datepicker>\\n      </div>\\n    </div>\\n    <div class=\\\"col-6\\\">\\n      <div class=\\\"d-flex justify-content-start align-items-center\\\">\\n        <i class=\\\"fa fa-upload fa-2x mx-2\\\" aria-label=\\\"Delete\\\"></i>\\n        <h2>Upload your documents</h2>\\n      </div>\\n      <span class=\\\"note\\\">Scan the document, or take a photo of it. Make sure that it's:</span>\\n      <ul class=\\\"note\\\">\\n        <li>The entire document, from corner to corner</li>\\n        <li>At least 1000 pixels wide x 1500 pixels tall</li>\\n        <li>Rotated correctly (not upside down or sideways)</li>\\n        <li>In focus and easy to read</li>\\n        <li>A JPG, PNG, GIF, BMP or PDF file</li>\\n      </ul>\\n      <prime-file-uploader #fileUploader  [images]=\\\"registrant.images\\\"  (onAddDocument)=\\\"addDocument($event)\\\" >\\n        <span class=\\\"note\\\">Please upload required supporting  documents</span>\\n      </prime-file-uploader>\\n    </div>\\n  </div>\\n</prime-page-framework>\\n\"","module.exports = \"\"","import { Component, OnInit ,ViewChild} from '@angular/core';\nimport {PrimeDataService} from \"../../../../services/prime-data.service\";\nimport {Person} from \"../../../../models/person.model\";\nimport {MspImage} from \"../../../../models/msp-image\";\nimport {UUID} from 'angular2-uuid';\nimport {FileUploaderComponent} from '../../../../core/file-uploader/file-uploader.component'\n@Component({\n  selector: 'prime-document-upload',\n  templateUrl: './document-upload.component.html',\n  styleUrls: ['./document-upload.component.scss']\n})\nexport class DocumentUploadComponent implements OnInit {\n\n  @ViewChild('fileUploader') fileUploader: FileUploaderComponent;\n\n  constructor(private primeDataService: PrimeDataService) { }\n\n  ngOnInit() {\n  }\n\n  get registrant(): Person {\n    return this.primeDataService.user;\n  }\n  addDocument(evt:MspImage){\n    console.log('------addDocument-----');\n    this.primeDataService.user.images =   this.primeDataService.user.images.concat(evt);\n    this.fileUploader.forceRender();\n  }\n}\n\n\n","module.exports = \"<prime-alert *ngIf=\\\"!usedBCSC\\\">\\n  Account: Please complete the \\\"Identity Proofing\\\" video chat to complete your registration.\\n</prime-alert>\\n\\n<section class='dashboard-cards row'>\\n  <div class=\\\"col\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-header d-flex justify-content-between\\\">\\n        Profile\\n        <a [routerLink]=\\\"getRoute( 'profile' )\\\">\\n          <i class=\\\"fa fa-edit fa-2x text-muted\\\"></i>\\n        </a>\\n      </div>\\n      <div class=\\\"card-body d-flex justify-content-between\\\">\\n        <div class=\\\"photocol\\\" *ngIf=\\\"usedBCSC\\\">\\n          <img class=\\\"photo\\\" src=\\\"assets/photoPlaceholder.png\\\" alt=\\\"Generic placeholder image\\\">\\n        </div>\\n        <div class=\\\"appcol\\\">\\n          <p>{{registrant.name}}</p>\\n          <p>{{registrant.phone}}</p>\\n          <p>{{registrant.email}}</p>\\n        </div>\\n        <i class=\\\"fa fa-check-circle text-success fa-3x pull-right\\\" aria-hidden=\\\"true\\\"></i>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"col\\\" *ngIf=\\\"!usedBCSC\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-header d-flex justify-content-between\\\">\\n        Document\\n        <a [routerLink]=\\\"getRoute( 'document-upload' )\\\">\\n          <i class=\\\"fa fa-edit fa-2x text-muted\\\"></i>\\n        </a>\\n      </div>\\n      <div class=\\\"card-body d-flex justify-content-between\\\">\\n        <div class=\\\"photocol\\\">\\n          <img class=\\\"photo\\\" src=\\\"assets/photoPlaceholder.png\\\" alt=\\\"Generic placeholder image\\\">\\n        </div>\\n        <div class=\\\"appcol\\\">\\n          <p *ngIf=\\\"registrant.hasDriversLicense\\\">Driver's Licence</p>\\n          <p *ngIf=\\\"registrant.hasPassport\\\">Passport</p>\\n        </div>\\n        <i class=\\\"fa fa-check-circle text-success fa-3x pull-right\\\" aria-hidden=\\\"true\\\"></i>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-header d-flex justify-content-between\\\">\\n        Security\\n        <a [routerLink]=\\\"getRoute( 'security' )\\\">\\n          <i class=\\\"fa fa-edit fa-2x text-muted\\\"></i>\\n        </a>\\n      </div>\\n      <div class=\\\"card-body d-flex justify-content-between\\\">\\n        <div class=\\\"appcol\\\">\\n          <p>Security Questions</p>\\n          <p *ngIf=\\\"!usedBCSC\\\">Multi-Factor Authentication Methods</p>\\n        </div>\\n        <i class=\\\"fa fa-check-circle text-success fa-3x pull-right\\\" aria-hidden=\\\"true\\\"></i>\\n     </div>\\n    </div>\\n  </div>\\n</section>\\n\\n<div>\\n\\n  <h2>Identity Proofing</h2>\\n  <hr>\\n  <div class=\\\"container\\\" style=\\\"border:1px solid lightgrey\\\">\\n    <div class=\\\"leftpane\\\">\\n      <img style=\\\"padding:5px;\\\" src=\\\"assets/live_video_chat.png\\\" alt=\\\"Generic placeholder image\\\">\\n    </div>\\n    <div class=\\\"rightpane\\\" *ngIf=\\\"!usedBCSC; else hasBSCSNoIDProofing\\\">\\n      <label>\\n        <!-- Please complete Identity Proofing by verifying your account information with a PRIME agent. Once you are ready, start the live video chat. -->\\n        Please complete Identity Proofing by verifying your account information with a PRIME agent. Once you are ready, start the live video chat.\\n      </label>\\n      <ul>\\n        <li>Turn webcam on</li>\\n        <li>Check your audio</li>\\n        <li>Start live video chat when you're ready</li>\\n      </ul>\\n    </div>\\n    <div class='text-center'>\\n      <i *ngIf=\\\"!usedBCSC\\\" class=\\\"fa fa-exclamation-triangle text-warning fa-3x\\\" aria-hidden=\\\"true\\\"></i>\\n      <i *ngIf=\\\"usedBCSC\\\" class=\\\"fa fa-check-circle text-success fa-3x\\\" aria-hidden=\\\"true\\\"></i>\\n    </div>\\n    <div >\\n      <button *ngIf=\\\"!usedBCSC\\\" type=\\\"button\\\" class=\\\"btn btn-primary mx-2\\\">Start Live Video Chat</button>\\n    </div>\\n  </div>\\n\\n</div>\\n\\n<ng-template #hasBSCSNoIDProofing>\\n  <p class=\\\"label mt-4\\\">Identity Proofing has been completed as part of the BC Services Card setup.</p>\\n</ng-template>\\n\"","module.exports = \".card {\\n  height: 100%; }\\n\\n.photocol {\\n  height: 70%;\\n  width: 25%; }\\n\\n.photo {\\n  width: 95%;\\n  height: 80%; }\\n\\n.appcol {\\n  width: 65%; }\\n\\n.container {\\n  overflow: hidden;\\n  position: relative;\\n  width: 100%; }\\n\\n.leftpane {\\n  width: 65%;\\n  height: 100%;\\n  float: left;\\n  border-collapse: collapse; }\\n\\n.rightpane {\\n  width: 35%;\\n  height: 100%;\\n  position: relative;\\n  float: right;\\n  border-collapse: collapse; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {PrimeDataService} from \"../../../../services/prime-data.service\";\nimport {Person} from \"../../../../models/person.model\";\n\n@Component({\n  selector: 'prime-dashboard',\n  templateUrl: './id-proofing.component.html',\n  styleUrls: ['./id-proofing.component.scss']\n})\nexport class IdProofingComponent implements OnInit {\n\n  constructor( private router: Router, private primeDataService: PrimeDataService) { }\n\n  ngOnInit() {\n  }\n\n  get registrant(): Person {\n    return this.primeDataService.user;\n  }\n\n  /**\n   * Returns the URL with appropriate prefix\n   * @param {string} route\n   * @returns {string}\n   */\n  getRoute( route: string ): string {\n    const idx = this.router.url.lastIndexOf( '/' );\n    const prefix = this.router.url.slice(0 , idx + 1 );\n    return prefix + route;\n  }\n\n  get usedBCSC(): boolean {\n    return !!this.registrant.pairingCode;\n  }\n\n}\n","module.exports = \"<prime-collection-notice></prime-collection-notice>\\n\\n<div class=\\\"p-md-2\\\">\\n<h1>Application Guidance</h1>\\n  There are two ways to obtain login credentials for PRIME.\\n  If you have a BC Services Card, register with your BC Services\\n  Card. Otherwise, register with the Ministry of Health\\n</div>\\n\\n\\n<section class='dashboard-cards row'>\\n  <div class=\\\"col\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-header d-flex justify-content-between\\\">\\n        <p class=\\\"card-text\\\">BC Services Card</p>\\n      </div>\\n      <div class=\\\"card-body d-flex justify-content-between\\\">\\n        <div class=\\\"card-text\\\">If you have BC Services Card please start your registration process here.</div>\\n\\n          <img class=\\\"img-responsive\\\" src=\\\"assets/bc_services_card.png\\\" alt=\\\"BC Services Card Image\\\">\\n\\n      </div>\\n      <div class=\\\"card-footer d-flex justify-content-between\\\">\\n        <button type=\\\"button\\\"\\n                class=\\\"h-25 btn btn-primary btn-lg btn-block\\\"\\n                (click)=\\\"bcscLogin()\\\">{{'BCSC Register'}}</button>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-header d-flex justify-content-between\\\">\\n        BC Ministry of Health\\n      </div>\\n      <div class=\\\"card-body d-flex justify-content-between\\\">\\n        <div class=\\\"card-text\\\">For standard registration please start your registration here.</div>\\n      </div>\\n      <div class=\\\"card-footer d-flex justify-content-between\\\">\\n        <button type=\\\"button\\\"\\n                class=\\\"h-25 btn btn-primary btn-lg btn-block\\\"\\n                (click)=\\\"continueStandardReg()\\\">{{'Register'}}</button>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\\n\\n\"","module.exports = \".card {\\n  height: 100%; }\\n\"","import {Component, OnInit, TemplateRef} from '@angular/core';\nimport {Router} from '@angular/router';\nimport { PrimeDataService } from '../../../../services/prime-data.service';\nimport { Person } from '../../../../models/person.model';\nimport { Address } from '../../../../models/addresses.model';\nimport { Logger } from '../../../../services/logger.service';\n\n@Component({\n  selector: 'prime-new-account',\n  templateUrl: './new-account.component.html',\n  styleUrls: ['./new-account.component.scss']\n})\nexport class NewAccountComponent implements OnInit {\n\n  constructor( private router: Router, private primeDataService: PrimeDataService, private logger: Logger) { }\n\n  ngOnInit() {\n  }\n\n  /**\n   *\n   */\n  continueStandardReg() {\n    // Reset the user to a non BCSC user\n    this.primeDataService.user = new Person();\n    this.primeDataService.user.address = new Address();\n    this.primeDataService.user.pairingCode = undefined;\n    // NOTE - This new user is NOT in the user list for provisoiner as it's not in dataService.people\n\n    // Navigate next page\n    this.logger.log({event: 'standardReg'});\n    this.router.navigate( [this.getUrlPrefix( this.router.url ) + '/' + 'profile'] );\n  }\n\n  /**\n   *\n   */\n  continueIdProofing() {\n    // Navigate next page\n    this.router.navigate( [this.getUrlPrefix( this.router.url ) + '/' + 'id-proofing'] );\n  }\n\n  bcscLogin() {\n    // Navigate to the bcsc registration\n    this.logger.log({event: 'bcscReg'});\n    this.router.navigate( [this.getUrlPrefix( this.router.url ) + '/' + 'bcsc-login'] );\n  }\n  /**\n   *\n   * @param {string} url\n   * @returns {string}\n   */\n  private getUrlPrefix( url: string ): string {\n    // Get URL prefix\n    const idxEndPrefix = this.router.url.lastIndexOf( '/' );\n    return (idxEndPrefix === 0 ) ? this.router.url : this.router.url.slice( 0 , idxEndPrefix );\n  }\n}\n","module.exports = \"\\n<prime-page-framework>\\n\\n  <h2 class='prime-title' id=\\\"regInfo\\\">Registration Information</h2>\\n  <div *ngIf=\\\"!usedBCSC\\\">Enter your identity information exactly as it appears on any valid government-issued photo ID.</div>\\n  <div *ngIf=\\\"usedBCSC\\\">Your identity information comes from your BC Services Card.</div>\\n\\n  <form>\\n    <div>\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"regLastName\\\" name=\\\"regLastName\\\" [(ngModel)]=\\\"registrant.lastName\\\" placeholder=\\\" \\\" [disabled]=\\\"usedBCSC\\\">\\n        <span>Last Name</span>\\n      </label>\\n\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"regMiddleName\\\" name=\\\"regMiddleName\\\" [(ngModel)]=\\\"registrant.middleName\\\" placeholder=\\\" \\\" [disabled]=\\\"usedBCSC\\\">\\n        <span>Middle Name</span>\\n      </label>\\n\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"regFirstName\\\" name=\\\"regFirstName\\\" [(ngModel)]=\\\"registrant.firstName\\\" placeholder=\\\" \\\" [disabled]=\\\"usedBCSC\\\">\\n        <span>First Name</span>\\n      </label>\\n\\n      <div *ngIf=\\\"!usedBCSC; else dobReadOnly\\\" class=\\\"applicant-row--item prime-input-large\\\">\\n        <prime-datepicker  dateFormat=\\\"yyyy/mm/dd\\\" [(date)]=\\\"registrant.dateOfBirth\\\" labelText=\\\"Date of Birth\\\" ></prime-datepicker>\\n      </div>\\n\\n      <ng-template #dobReadOnly>\\n        <label class=\\\"has-float-label\\\">\\n          <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"dob\\\" name=\\\"dob\\\" disabled [value]=\\\"registrant.dateOfBirthShort\\\">\\n          <span>Date of Birth</span>\\n        </label>\\n      </ng-template>\\n\\n\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"regAddress\\\" name=\\\"regAddress\\\" [(ngModel)]=\\\"registrant.address.street\\\" placeholder=\\\" \\\" [disabled]=\\\"usedBCSC\\\">\\n        <span>Address</span>\\n      </label>\\n\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"regCity\\\" name=\\\"regCity\\\" [(ngModel)]=\\\"registrant.address.city\\\" placeholder=\\\" \\\" [disabled]=\\\"usedBCSC\\\">\\n        <span>City</span>\\n      </label>\\n\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"regProvince\\\" name=\\\"regProvince\\\" [(ngModel)]=\\\"registrant.address.province\\\" placeholder=\\\" \\\" [disabled]=\\\"usedBCSC\\\">\\n        <span>Province</span>\\n      </label>\\n\\n      <!-- For some reason [disabled] is broken on postal code, this is a quick little workaround. -->\\n      <prime-postal-code *ngIf='usedBCSC' [(value)]=\\\"registrant.address.postal\\\" disabled></prime-postal-code>\\n      <prime-postal-code *ngIf='!usedBCSC' [(value)]=\\\"registrant.address.postal\\\"></prime-postal-code>\\n\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"regCountry\\\" name=\\\"regCountry\\\" [(ngModel)]=\\\"registrant.address.country\\\" placeholder=\\\" \\\" [disabled]=\\\"usedBCSC\\\">\\n        <span>Country</span>\\n      </label>\\n    </div>\\n  </form>\\n\\n  <h2 class='prime-title' id=\\\"prefName\\\">Preferred Name (optional)</h2>\\n  If you have a name that is different than your legal name that people know you by, enter your full preferred name\\n  <form>\\n\\n    <div>\\n\\n      <div class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"prefLastName\\\" name=\\\"prefLastName\\\" [(ngModel)]=\\\"registrant.preferLastName\\\" placeholder=\\\" \\\">\\n        <label for=\\\"prefLastName\\\">Preferred Last Name</label>\\n      </div>\\n\\n      <div class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"prefMiddleName\\\" name=\\\"prefMiddleName\\\" [(ngModel)]=\\\"registrant.preferMiddleName\\\" placeholder=\\\" \\\">\\n        <label for=\\\"prefMiddleName\\\">Preferred Middle Name</label>\\n      </div>\\n\\n      <div class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"prefFirstName\\\" name=\\\"prefFirstName\\\" [(ngModel)]=\\\"registrant.preferFirstName\\\" placeholder=\\\" \\\">\\n        <label for=\\\"prefFirstName\\\">Preferred First Name</label>\\n      </div>\\n\\n    </div>\\n\\n  </form>\\n\\n  <h2 class='prime-title' id='contactInfo'>Contact Information</h2>\\n  Enter your personal phone number and email.\\n  <form>\\n    <div>\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"phone\\\" name=\\\"phone\\\" [(ngModel)]=\\\"registrant.phone\\\" placeholder=\\\" \\\" [textMask]='{mask: getPhoneMask()}'>\\n        <span>Phone</span>\\n      </label>\\n\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"phoneExt\\\" name=\\\"phoneExt\\\" [(ngModel)]=\\\"registrant.phoneExtension\\\" placeholder=\\\" \\\">\\n        <span>Extension Number (optional)</span>\\n      </label>\\n\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"email\\\" name=\\\"email\\\" [(ngModel)]=\\\"registrant.email\\\" placeholder=\\\" \\\">\\n        <span>Email</span>\\n      </label>\\n    </div>\\n  </form>\\n</prime-page-framework>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport {PrimeDataService} from \"../../../../services/prime-data.service\";\nimport { Person } from '../../../../models/person.model';\nimport { cloneDeep } from 'lodash';\n\nconst NUMBER = /\\d/;\n\n@Component({\n  selector: 'prime-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit {\n\n  private phoneMask = ['(', NUMBER, NUMBER, NUMBER, ')', '-', NUMBER, NUMBER, NUMBER, '-', NUMBER, NUMBER, NUMBER, NUMBER];\n  public hasChanged: boolean = false;\n  public hasEverChanged: boolean = false;\n  /** Did the user use a BC Services Card to register before? If so, some info is read-only. */\n  public usedBCSC = false;\n\n  constructor(private primeDataService: PrimeDataService) { }\n\n  ngOnInit() {\n    this.usedBCSC = !!this.registrant.pairingCode;\n  }\n\n  get registrant(): Person {\n    return this.primeDataService.user;\n  }\n\n\n\n  getPhoneMask(): (RegExp | string )[] | false {\n    if (!this.registrant.hasInternationalPhoneNumber ){\n      // return  { mask: this.phoneMask };\n      return this.phoneMask;\n    }\n    return false;\n  }\n}\n","module.exports = \"<prime-page-framework>\\n\\n  <ng-container *ngIf=\\\"!usedBCSC\\\">\\n    <h2 class='prime-title' id=\\\"secPrimeAccount\\\">PRIME Account</h2>\\n    <form>\\n      <div>\\n        <label class=\\\"has-float-label\\\">\\n          <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"secUserID\\\" name=\\\"secUserID\\\" [(ngModel)]=\\\"registrant.primeUserId\\\" placeholder=\\\" \\\">\\n          <span>User ID</span>\\n        </label>\\n\\n        <label class=\\\"has-float-label\\\">\\n          <input type=\\\"password\\\" class=\\\"form-control prime-input-large\\\" id=\\\"secPwd\\\" name=\\\"secPwd\\\" placeholder=\\\" \\\">\\n          <span>New Password</span>\\n        </label>\\n\\n        <label class=\\\"has-float-label\\\">\\n          <input type=\\\"password\\\" class=\\\"form-control prime-input-large\\\" id=\\\"secPwdConfirm\\\" name=\\\"secPwdConfirm\\\" placeholder=\\\" \\\">\\n          <span>Confirm Password</span>\\n        </label>\\n      </div>\\n    </form>\\n  </ng-container>\\n  <h2 class='prime-title' id=\\\"secStep1\\\">Security Questions</h2>\\n    <form>\\n      <div class=\\\"prime-input-large\\\">\\n        <label class=\\\"has-float-label\\\">\\n          <select class=\\\"form-control\\\" name=\\\"secQ1\\\" [(ngModel)]=\\\"registrant.securityQuestion1\\\">\\n            <option value=\\\"pet\\\">What is the name of your first pet?</option>\\n            <option value=\\\"teacher\\\">What was the last name of your favourite teacher?</option>\\n            <option value=\\\"town\\\">What town was your mother born in?</option>\\n            <option value=\\\"book\\\">What is your favourite book?</option>\\n            <option value=\\\"spouse\\\">Where did you meet your spouse?</option>\\n          </select>\\n          <span>Security Question 1</span>\\n        </label>\\n      </div>\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"secQ1Answer\\\" name=\\\"secQ1Answer\\\" [(ngModel)]=\\\"registrant.securityAnswer1\\\">\\n        <span>Security Question 1 Answer</span>\\n      </label>\\n\\n      <hr class='invisible'>\\n\\n      <div class=\\\"prime-input-large\\\">\\n        <label class=\\\"has-float-label\\\">\\n          <select class=\\\"form-control\\\" name=\\\"secQ2\\\" [(ngModel)]=\\\"registrant.securityQuestion2\\\">\\n            <option value=\\\"pet\\\">What is the name of your first pet?</option>\\n            <option value=\\\"teacher\\\">What was the last name of your favourite teacher?</option>\\n            <option value=\\\"town\\\">What town was your mother born in?</option>\\n            <option value=\\\"book\\\">What is your favourite book?</option>\\n            <option value=\\\"spouse\\\">Where did you meet your spouse?</option>\\n          </select>\\n          <span>Security Question 2</span>\\n        </label>\\n      </div>\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"secQ2Answer\\\" name=\\\"secQ2Answer\\\" [(ngModel)]=\\\"registrant.securityAnswer2\\\">\\n        <span>Security Question 2 Answer</span>\\n      </label>\\n\\n      <hr class='invisible'>\\n\\n      <div class=\\\"prime-input-large\\\">\\n        <label class=\\\"has-float-label\\\">\\n          <select class=\\\"form-control\\\" name=\\\"secQ3\\\" [(ngModel)]=\\\"registrant.securityQuestion3\\\">\\n            <option value=\\\"pet\\\">What is the name of your first pet?</option>\\n            <option value=\\\"teacher\\\">What was the last name of your favourite teacher?</option>\\n            <option value=\\\"town\\\">What town was your mother born in?</option>\\n            <option value=\\\"book\\\">What is your favourite book?</option>\\n            <option value=\\\"spouse\\\">Where did you meet your spouse?</option>\\n          </select>\\n          <span>Security Question 3</span>\\n        </label>\\n      </div>\\n      <label class=\\\"has-float-label\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"secQ3Answer\\\" name=\\\"secQ3Answer\\\" [(ngModel)]=\\\"registrant.securityAnswer3\\\">\\n        <span>Security Question 3 Answer</span>\\n      </label>\\n    </form>\\n    <ng-container *ngIf=\\\"!usedBCSC\\\">\\n      <h2 class='prime-title' id=\\\"secStep2\\\">Multi-Factor Authentication Methods</h2>\\n      <span>Secondary Security (please select at least one)</span>\\n      <form>\\n        <div>\\n          <input type=\\\"checkbox\\\" id=\\\"secSms\\\" name=\\\"secSms\\\" [(ngModel)]=\\\"registrant.mfaOptionSMS\\\"/>\\n          <label for=\\\"secSms\\\">SMS/Text</label>\\n          <label class=\\\"has-float-label\\\">\\n            <input type=\\\"text\\\" [textMask]=\\\"{mask: getPhoneMask()}\\\" class=\\\"form-control prime-input-large\\\" id=\\\"secPhone\\\" name=\\\"secPhone\\\" [(ngModel)]=\\\"registrant.mfaOptionSMSPhone\\\" placeholder=\\\" \\\">\\n            <span>Phone</span>\\n          </label>\\n        </div>\\n\\n        <hr>\\n        <div>\\n          <input type=\\\"checkbox\\\" id=\\\"secFob\\\" name=\\\"secFob\\\" [(ngModel)]=\\\"registrant.mfaOptionKey\\\"/>\\n          <label for=\\\"secFob\\\">Physical Security Key</label>\\n          <label class=\\\"has-float-label\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control prime-input-large\\\" id=\\\"secFobInstr\\\" name=\\\"secFobInstr\\\" placeholder=\\\" \\\" disabled>\\n            <span>Instructions to follow</span>\\n          </label>\\n        </div>\\n\\n        <hr>\\n        <div>\\n          <input type=\\\"checkbox\\\" id=\\\"secApp\\\" name=\\\"secApp\\\" [(ngModel)]=\\\"registrant.mfaOptionApp\\\"/>\\n          <label for=\\\"secApp\\\">Mobile App Authentication</label>\\n        </div>\\n        <img class=\\\"img-thumbnail\\\" src=\\\"assets/mobile_app_icon_android.png\\\" alt=\\\"Generic placeholder image\\\">\\n        <img class=\\\"img-thumbnail\\\" src=\\\"assets/mobile_app_icon_apple.png\\\" alt=\\\"Generic placeholder image\\\">\\n        <img class=\\\"img-thumbnail\\\" src=\\\"assets/mobile_app_icon_windows.png\\\" alt=\\\"Generic placeholder image\\\">\\n      </form>\\n      </ng-container>\\n\\n</prime-page-framework>\\n\"","module.exports = \".leftpane {\\n  width: 25%;\\n  height: 40%;\\n  float: left;\\n  border-collapse: collapse; }\\n\\n.rightpane {\\n  width: 75%;\\n  height: 40%;\\n  position: relative;\\n  float: right;\\n  border-collapse: collapse; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport {PrimeDataService} from '../../../../services/prime-data.service';\nimport {Person} from '../../../../models/person.model';\n\nconst NUMBER = /\\d/;\n\n@Component({\n  selector: 'prime-security',\n  templateUrl: './security.component.html',\n  styleUrls: ['./security.component.scss']\n})\nexport class SecurityComponent implements OnInit {\n\n  private phoneMask = ['(', NUMBER, NUMBER, NUMBER, ')', '-', NUMBER, NUMBER, NUMBER, '-', NUMBER, NUMBER, NUMBER, NUMBER];\n\n  constructor(private primeDataService: PrimeDataService) { }\n\n  ngOnInit() {\n    this.registrant.securityQuestion1 = 'pet';\n    this.registrant.securityQuestion2 = 'pet';\n    this.registrant.securityQuestion3 = 'pet';\n  }\n\n  get registrant(): Person {\n    return this.primeDataService.user;\n  }\n\n  get usedBCSC(): boolean {\n    return !!this.registrant.pairingCode;\n  }\n\n  getPhoneMask(): (RegExp | string )[] | false {\n    if (!this.registrant.hasInternationalPhoneNumber) {\n      // return  { mask: this.phoneMask };\n      return this.phoneMask;\n    }\n  }\n}\n","import {Routes} from '@angular/router';\nimport {ProfileComponent} from './pages/profile/profile.component';\nimport {DocumentUploadComponent} from './pages/document-upload/document-upload.component';\nimport {SecurityComponent} from './pages/security/security.component';\n\nexport const pageRoutes: Routes = [\n  {\n    path: 'profile',\n    component: ProfileComponent,\n  },\n  {\n    path: 'document-upload',\n    component: DocumentUploadComponent,\n  },\n  {\n    path: 'security',\n    component: SecurityComponent\n  }\n];\n","import { NgModule } from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {NewAccountComponent} from './pages/new-account/new-account.component';\nimport {IdProofingComponent} from './pages/id-proofing/id-proofing.component';\nimport {RegCompleteComponent} from './pages/complete/reg-complete.component';\nimport {RegistrationContainerComponent} from './components/registration-container/registration-container.component';\nimport {pageRoutes} from './registration-page-routing.module';\nimport {BcscLoginComponent} from './pages/bcsc-login/bcsc-login.component';\n\nexport const routes: Routes = [\n  {\n    path: 'id-proofing',\n    component: IdProofingComponent,\n  },\n  {\n    path: 'new-account',\n    component: NewAccountComponent,\n  },\n  {\n    path: 'registration-complete',\n    component: RegCompleteComponent\n  },\n  {\n    path: 'bcsc-login',\n    component: BcscLoginComponent\n  },\n  {\n    path: '',\n    component: RegistrationContainerComponent,\n    children: pageRoutes\n  },\n  {\n    path: '**',\n    redirectTo: 'dashboard'\n  }\n  ];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegistrationRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {RegistrationRoutingModule} from './registration-routing.module';\nimport { ProfileComponent } from './pages/profile/profile.component';\nimport { DocumentUploadComponent } from './pages/document-upload/document-upload.component';\nimport { SecurityComponent } from './pages/security/security.component';\nimport {NewAccountComponent} from './pages/new-account/new-account.component';\nimport { LoginComponent } from './pages/login/login.component';\nimport {CoreModule} from '../core/core.module';\nimport { IdProofingComponent } from './pages/id-proofing/id-proofing.component';\nimport {RegCompleteComponent} from './pages/complete/reg-complete.component';\nimport { RegistrationContainerComponent } from './components/registration-container/registration-container.component';\nimport {FormsModule} from '@angular/forms';\nimport { RegLoginMfaComponent } from './components/reg-login-mfa/reg-login-mfa.component';\nimport { CollectionNoticeComponent } from './components/collection-notice/collection-notice.component';\nimport { TextMaskModule } from 'angular2-text-mask';\nimport {BcscLoginComponent} from './pages/bcsc-login/bcsc-login.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CoreModule,\n    FormsModule,\n    RegistrationRoutingModule,\n    TextMaskModule\n  ],\n  declarations: [\n    NewAccountComponent,\n    ProfileComponent,\n    DocumentUploadComponent,\n    SecurityComponent,\n    IdProofingComponent,\n    RegCompleteComponent,\n    RegistrationContainerComponent,\n    RegLoginMfaComponent,\n    BcscLoginComponent,\n    CollectionNoticeComponent\n  ]\n})\nexport class RegistrationModule { }\n"],"sourceRoot":""}